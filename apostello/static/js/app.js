/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__render_elm__ = __webpack_require__(1);


function handleDOMContentLoaded() {
  // start elm
  try {
    const elmApp = Object(__WEBPACK_IMPORTED_MODULE_0__render_elm__["a" /* default */])();
  } catch (e) {
    console.error(e);
    const node = document.getElementById('elmContainer');
    const style =
      'width:100vw;height:100vh;background:#5a589b;color:#fff;font-size:xx-large;';
    node.innerHTML =
      '<div style="' +
      style +
      '"><p>Something broke there, try reloading the page...</p></div>' +
      '<br></br>' +
      '<br></br>' +
      '<br></br>' +
      e;
  }
}

window.addEventListener('DOMContentLoaded', handleDOMContentLoaded, false);

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('/sw.js');
  });
}


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_js_cookie__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_js_cookie___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_js_cookie__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__notifications__ = __webpack_require__(3);



/* global elmSettings */

function renderElm() {
  const node = document.getElementById('elmContainer');

  if (node !== null) {
    elmSettings.csrftoken = __WEBPACK_IMPORTED_MODULE_0_js_cookie___default.a.get('csrftoken');

    const Elm = __webpack_require__(4);
    const app = Elm.Main.embed(node, {
      settings: elmSettings,
    });

    app.ports.pushSubEvent.subscribe(function(event) {
      if (event === 'check') {
        Object(__WEBPACK_IMPORTED_MODULE_1__notifications__["a" /* isSubscribed */])(app.ports.acceptPushSub);
      } else if (event === 'register') {
        Object(__WEBPACK_IMPORTED_MODULE_1__notifications__["b" /* subscribePush */])(app.ports.acceptPushSub);
      } else if (event === 'unregister') {
        Object(__WEBPACK_IMPORTED_MODULE_1__notifications__["c" /* unsubscribePush */])(app.ports.acceptPushSub);
      }
    });

    const loader = document.getElementById('elmLoader');
    if (loader !== null) {
      loader.remove();
    }

    return app;
  }
  return null;
}

/* harmony default export */ __webpack_exports__["a"] = (renderElm);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * JavaScript Cookie v2.2.0
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader = false;
	if (true) {
		!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		registeredInModuleLoader = true;
	}
	if (true) {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function init (converter) {
		function api (key, value, attributes) {
			var result;
			if (typeof document === 'undefined') {
				return;
			}

			// Write

			if (arguments.length > 1) {
				attributes = extend({
					path: '/'
				}, api.defaults, attributes);

				if (typeof attributes.expires === 'number') {
					var expires = new Date();
					expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
					attributes.expires = expires;
				}

				// We're using "expires" because "max-age" is not supported by IE
				attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

				try {
					result = JSON.stringify(value);
					if (/^[\{\[]/.test(result)) {
						value = result;
					}
				} catch (e) {}

				if (!converter.write) {
					value = encodeURIComponent(String(value))
						.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
				} else {
					value = converter.write(value, key);
				}

				key = encodeURIComponent(String(key));
				key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
				key = key.replace(/[\(\)]/g, escape);

				var stringifiedAttributes = '';

				for (var attributeName in attributes) {
					if (!attributes[attributeName]) {
						continue;
					}
					stringifiedAttributes += '; ' + attributeName;
					if (attributes[attributeName] === true) {
						continue;
					}
					stringifiedAttributes += '=' + attributes[attributeName];
				}
				return (document.cookie = key + '=' + value + stringifiedAttributes);
			}

			// Read

			if (!key) {
				result = {};
			}

			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all. Also prevents odd result when
			// calling "get()"
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var rdecode = /(%[0-9A-Z]{2})+/g;
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!this.json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = parts[0].replace(rdecode, decodeURIComponent);
					cookie = converter.read ?
						converter.read(cookie, name) : converter(cookie, name) ||
						cookie.replace(rdecode, decodeURIComponent);

					if (this.json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					if (key === name) {
						result = cookie;
						break;
					}

					if (!key) {
						result[name] = cookie;
					}
				} catch (e) {}
			}

			return result;
		}

		api.set = api;
		api.get = function (key) {
			return api.call(api, key);
		};
		api.getJSON = function () {
			return api.apply({
				json: true
			}, [].slice.call(arguments));
		};
		api.defaults = {};

		api.remove = function (key, attributes) {
			api(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isSubscribed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return subscribePush; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return unsubscribePush; });
function isSubscribed(port) {
  // TODO send id through port, not bool
  navigator.serviceWorker.ready.then(function(registration) {
    if (!registration.pushManager) {
      port.send({ noSupport: true });
    }
    registration.pushManager
      .getSubscription()
      .then(function(subscription) {
        if (!(subscription === null)) {
          port.send({ regValue: subscription.endpoint });
        } else {
          port.send({ regValue: null });
        }
      })
      .catch(function(error) {
        console.error(error);
        port.send({ failed: true });
      });
  });
}

function subscribePush(port) {
  navigator.serviceWorker.ready.then(function(registration) {
    if (!registration.pushManager) {
      console.log("Your browser doesn't support push notification.");
      port.send({ noSupport: true });
    }

    //To subscribe `push notification` from push manager
    registration.pushManager
      .subscribe({
        userVisibleOnly: true, //Always show notification when received
      })
      .then(function(subscription) {
        console.info('Push notification subscribed.');
        port.send({ regValue: subscription.endpoint });
      })
      .catch(function(error) {
        console.error('Push notification subscription error: ', error);
        port.send({ failed: true });
      });
  });
}

function unsubscribePush(port) {
  navigator.serviceWorker.ready.then(function(registration) {
    //Get `push subscription`
    registration.pushManager
      .getSubscription()
      .then(function(subscription) {
        //If no `push subscription`, then return
        if (!subscription) {
          console.log('Unable to unregister push notification.');
          port.send({ failed: true });
        }

        //Unsubscribe `push notification`
        subscription
          .unsubscribe()
          .then(function() {
            console.info('Push notification unsubscribed.');
            port.send({
              unregValue: subscription.endpoint,
            });
          })
          .catch(function(error) {
            console.error(error);
            port.send({ failed: true });
          });
      })
      .catch(function(error) {
        console.error('Failed to unsubscribe push notification.');
        port.send({ failed: true });
      });
  });
}




/***/ }),
/* 4 */
/***/ (function(module, exports) {


(function() {
'use strict';

function F2(fun)
{
  function wrapper(a) { return function(b) { return fun(a,b); }; }
  wrapper.arity = 2;
  wrapper.func = fun;
  return wrapper;
}

function F3(fun)
{
  function wrapper(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  }
  wrapper.arity = 3;
  wrapper.func = fun;
  return wrapper;
}

function F4(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  }
  wrapper.arity = 4;
  wrapper.func = fun;
  return wrapper;
}

function F5(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  }
  wrapper.arity = 5;
  wrapper.func = fun;
  return wrapper;
}

function F6(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  }
  wrapper.arity = 6;
  wrapper.func = fun;
  return wrapper;
}

function F7(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  }
  wrapper.arity = 7;
  wrapper.func = fun;
  return wrapper;
}

function F8(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  }
  wrapper.arity = 8;
  wrapper.func = fun;
  return wrapper;
}

function F9(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  }
  wrapper.arity = 9;
  wrapper.func = fun;
  return wrapper;
}

function A2(fun, a, b)
{
  return fun.arity === 2
    ? fun.func(a, b)
    : fun(a)(b);
}
function A3(fun, a, b, c)
{
  return fun.arity === 3
    ? fun.func(a, b, c)
    : fun(a)(b)(c);
}
function A4(fun, a, b, c, d)
{
  return fun.arity === 4
    ? fun.func(a, b, c, d)
    : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e)
{
  return fun.arity === 5
    ? fun.func(a, b, c, d, e)
    : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f)
{
  return fun.arity === 6
    ? fun.func(a, b, c, d, e, f)
    : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g)
{
  return fun.arity === 7
    ? fun.func(a, b, c, d, e, f, g)
    : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h)
{
  return fun.arity === 8
    ? fun.func(a, b, c, d, e, f, g, h)
    : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i)
{
  return fun.arity === 9
    ? fun.func(a, b, c, d, e, f, g, h, i)
    : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

//import Native.List //

var _elm_lang$core$Native_Array = function() {

// A RRB-Tree has two distinct data types.
// Leaf -> "height"  is always 0
//         "table"   is an array of elements
// Node -> "height"  is always greater than 0
//         "table"   is an array of child nodes
//         "lengths" is an array of accumulated lengths of the child nodes

// M is the maximal table size. 32 seems fast. E is the allowed increase
// of search steps when concatting to find an index. Lower values will
// decrease balancing, but will increase search steps.
var M = 32;
var E = 2;

// An empty array.
var empty = {
	ctor: '_Array',
	height: 0,
	table: []
};


function get(i, array)
{
	if (i < 0 || i >= length(array))
	{
		throw new Error(
			'Index ' + i + ' is out of range. Check the length of ' +
			'your array first or use getMaybe or getWithDefault.');
	}
	return unsafeGet(i, array);
}


function unsafeGet(i, array)
{
	for (var x = array.height; x > 0; x--)
	{
		var slot = i >> (x * 5);
		while (array.lengths[slot] <= i)
		{
			slot++;
		}
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array = array.table[slot];
	}
	return array.table[i];
}


// Sets the value at the index i. Only the nodes leading to i will get
// copied and updated.
function set(i, item, array)
{
	if (i < 0 || length(array) <= i)
	{
		return array;
	}
	return unsafeSet(i, item, array);
}


function unsafeSet(i, item, array)
{
	array = nodeCopy(array);

	if (array.height === 0)
	{
		array.table[i] = item;
	}
	else
	{
		var slot = getSlot(i, array);
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array.table[slot] = unsafeSet(i, item, array.table[slot]);
	}
	return array;
}


function initialize(len, f)
{
	if (len <= 0)
	{
		return empty;
	}
	var h = Math.floor( Math.log(len) / Math.log(M) );
	return initialize_(f, h, 0, len);
}

function initialize_(f, h, from, to)
{
	if (h === 0)
	{
		var table = new Array((to - from) % (M + 1));
		for (var i = 0; i < table.length; i++)
		{
		  table[i] = f(from + i);
		}
		return {
			ctor: '_Array',
			height: 0,
			table: table
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = initialize_(f, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

function fromList(list)
{
	if (list.ctor === '[]')
	{
		return empty;
	}

	// Allocate M sized blocks (table) and write list elements to it.
	var table = new Array(M);
	var nodes = [];
	var i = 0;

	while (list.ctor !== '[]')
	{
		table[i] = list._0;
		list = list._1;
		i++;

		// table is full, so we can push a leaf containing it into the
		// next node.
		if (i === M)
		{
			var leaf = {
				ctor: '_Array',
				height: 0,
				table: table
			};
			fromListPush(leaf, nodes);
			table = new Array(M);
			i = 0;
		}
	}

	// Maybe there is something left on the table.
	if (i > 0)
	{
		var leaf = {
			ctor: '_Array',
			height: 0,
			table: table.splice(0, i)
		};
		fromListPush(leaf, nodes);
	}

	// Go through all of the nodes and eventually push them into higher nodes.
	for (var h = 0; h < nodes.length - 1; h++)
	{
		if (nodes[h].table.length > 0)
		{
			fromListPush(nodes[h], nodes);
		}
	}

	var head = nodes[nodes.length - 1];
	if (head.height > 0 && head.table.length === 1)
	{
		return head.table[0];
	}
	else
	{
		return head;
	}
}

// Push a node into a higher node as a child.
function fromListPush(toPush, nodes)
{
	var h = toPush.height;

	// Maybe the node on this height does not exist.
	if (nodes.length === h)
	{
		var node = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
		nodes.push(node);
	}

	nodes[h].table.push(toPush);
	var len = length(toPush);
	if (nodes[h].lengths.length > 0)
	{
		len += nodes[h].lengths[nodes[h].lengths.length - 1];
	}
	nodes[h].lengths.push(len);

	if (nodes[h].table.length === M)
	{
		fromListPush(nodes[h], nodes);
		nodes[h] = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
	}
}

// Pushes an item via push_ to the bottom right of a tree.
function push(item, a)
{
	var pushed = push_(item, a);
	if (pushed !== null)
	{
		return pushed;
	}

	var newTree = create(item, a.height);
	return siblise(a, newTree);
}

// Recursively tries to push an item to the bottom-right most
// tree possible. If there is no space left for the item,
// null will be returned.
function push_(item, a)
{
	// Handle resursion stop at leaf level.
	if (a.height === 0)
	{
		if (a.table.length < M)
		{
			var newA = {
				ctor: '_Array',
				height: 0,
				table: a.table.slice()
			};
			newA.table.push(item);
			return newA;
		}
		else
		{
		  return null;
		}
	}

	// Recursively push
	var pushed = push_(item, botRight(a));

	// There was space in the bottom right tree, so the slot will
	// be updated.
	if (pushed !== null)
	{
		var newA = nodeCopy(a);
		newA.table[newA.table.length - 1] = pushed;
		newA.lengths[newA.lengths.length - 1]++;
		return newA;
	}

	// When there was no space left, check if there is space left
	// for a new slot with a tree which contains only the item
	// at the bottom.
	if (a.table.length < M)
	{
		var newSlot = create(item, a.height - 1);
		var newA = nodeCopy(a);
		newA.table.push(newSlot);
		newA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));
		return newA;
	}
	else
	{
		return null;
	}
}

// Converts an array into a list of elements.
function toList(a)
{
	return toList_(_elm_lang$core$Native_List.Nil, a);
}

function toList_(list, a)
{
	for (var i = a.table.length - 1; i >= 0; i--)
	{
		list =
			a.height === 0
				? _elm_lang$core$Native_List.Cons(a.table[i], list)
				: toList_(list, a.table[i]);
	}
	return list;
}

// Maps a function over the elements of an array.
function map(f, a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? f(a.table[i])
				: map(f, a.table[i]);
	}
	return newA;
}

// Maps a function over the elements with their index as first argument.
function indexedMap(f, a)
{
	return indexedMap_(f, a, 0);
}

function indexedMap_(f, a, from)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? A2(f, from + i, a.table[i])
				: indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);
	}
	return newA;
}

function foldl(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = foldl(f, b, a.table[i]);
		}
	}
	return b;
}

function foldr(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = a.table.length; i--; )
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = a.table.length; i--; )
		{
			b = foldr(f, b, a.table[i]);
		}
	}
	return b;
}

// TODO: currently, it slices the right, then the left. This can be
// optimized.
function slice(from, to, a)
{
	if (from < 0)
	{
		from += length(a);
	}
	if (to < 0)
	{
		to += length(a);
	}
	return sliceLeft(from, sliceRight(to, a));
}

function sliceRight(to, a)
{
	if (to === length(a))
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(0, to);
		return newA;
	}

	// Slice the right recursively.
	var right = getSlot(to, a);
	var sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (right === 0)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(0, right),
		lengths: a.lengths.slice(0, right)
	};
	if (sliced.table.length > 0)
	{
		newA.table[right] = sliced;
		newA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);
	}
	return newA;
}

function sliceLeft(from, a)
{
	if (from === 0)
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(from, a.table.length + 1);
		return newA;
	}

	// Slice the left recursively.
	var left = getSlot(from, a);
	var sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (left === a.table.length - 1)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(left, a.table.length + 1),
		lengths: new Array(a.table.length - left)
	};
	newA.table[0] = sliced;
	var len = 0;
	for (var i = 0; i < newA.table.length; i++)
	{
		len += length(newA.table[i]);
		newA.lengths[i] = len;
	}

	return newA;
}

// Appends two trees.
function append(a,b)
{
	if (a.table.length === 0)
	{
		return b;
	}
	if (b.table.length === 0)
	{
		return a;
	}

	var c = append_(a, b);

	// Check if both nodes can be crunshed together.
	if (c[0].table.length + c[1].table.length <= M)
	{
		if (c[0].table.length === 0)
		{
			return c[1];
		}
		if (c[1].table.length === 0)
		{
			return c[0];
		}

		// Adjust .table and .lengths
		c[0].table = c[0].table.concat(c[1].table);
		if (c[0].height > 0)
		{
			var len = length(c[0]);
			for (var i = 0; i < c[1].lengths.length; i++)
			{
				c[1].lengths[i] += len;
			}
			c[0].lengths = c[0].lengths.concat(c[1].lengths);
		}

		return c[0];
	}

	if (c[0].height > 0)
	{
		var toRemove = calcToRemove(a, b);
		if (toRemove > E)
		{
			c = shuffle(c[0], c[1], toRemove);
		}
	}

	return siblise(c[0], c[1]);
}

// Returns an array of two nodes; right and left. One node _may_ be empty.
function append_(a, b)
{
	if (a.height === 0 && b.height === 0)
	{
		return [a, b];
	}

	if (a.height !== 1 || b.height !== 1)
	{
		if (a.height === b.height)
		{
			a = nodeCopy(a);
			b = nodeCopy(b);
			var appended = append_(botRight(a), botLeft(b));

			insertRight(a, appended[1]);
			insertLeft(b, appended[0]);
		}
		else if (a.height > b.height)
		{
			a = nodeCopy(a);
			var appended = append_(botRight(a), b);

			insertRight(a, appended[0]);
			b = parentise(appended[1], appended[1].height + 1);
		}
		else
		{
			b = nodeCopy(b);
			var appended = append_(a, botLeft(b));

			var left = appended[0].table.length === 0 ? 0 : 1;
			var right = left === 0 ? 1 : 0;
			insertLeft(b, appended[left]);
			a = parentise(appended[right], appended[right].height + 1);
		}
	}

	// Check if balancing is needed and return based on that.
	if (a.table.length === 0 || b.table.length === 0)
	{
		return [a, b];
	}

	var toRemove = calcToRemove(a, b);
	if (toRemove <= E)
	{
		return [a, b];
	}
	return shuffle(a, b, toRemove);
}

// Helperfunctions for append_. Replaces a child node at the side of the parent.
function insertRight(parent, node)
{
	var index = parent.table.length - 1;
	parent.table[index] = node;
	parent.lengths[index] = length(node);
	parent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;
}

function insertLeft(parent, node)
{
	if (node.table.length > 0)
	{
		parent.table[0] = node;
		parent.lengths[0] = length(node);

		var len = length(parent.table[0]);
		for (var i = 1; i < parent.lengths.length; i++)
		{
			len += length(parent.table[i]);
			parent.lengths[i] = len;
		}
	}
	else
	{
		parent.table.shift();
		for (var i = 1; i < parent.lengths.length; i++)
		{
			parent.lengths[i] = parent.lengths[i] - parent.lengths[0];
		}
		parent.lengths.shift();
	}
}

// Returns the extra search steps for E. Refer to the paper.
function calcToRemove(a, b)
{
	var subLengths = 0;
	for (var i = 0; i < a.table.length; i++)
	{
		subLengths += a.table[i].table.length;
	}
	for (var i = 0; i < b.table.length; i++)
	{
		subLengths += b.table[i].table.length;
	}

	var toRemove = a.table.length + b.table.length;
	return toRemove - (Math.floor((subLengths - 1) / M) + 1);
}

// get2, set2 and saveSlot are helpers for accessing elements over two arrays.
function get2(a, b, index)
{
	return index < a.length
		? a[index]
		: b[index - a.length];
}

function set2(a, b, index, value)
{
	if (index < a.length)
	{
		a[index] = value;
	}
	else
	{
		b[index - a.length] = value;
	}
}

function saveSlot(a, b, index, slot)
{
	set2(a.table, b.table, index, slot);

	var l = (index === 0 || index === a.lengths.length)
		? 0
		: get2(a.lengths, a.lengths, index - 1);

	set2(a.lengths, b.lengths, index, l + length(slot));
}

// Creates a node or leaf with a given length at their arrays for perfomance.
// Is only used by shuffle.
function createNode(h, length)
{
	if (length < 0)
	{
		length = 0;
	}
	var a = {
		ctor: '_Array',
		height: h,
		table: new Array(length)
	};
	if (h > 0)
	{
		a.lengths = new Array(length);
	}
	return a;
}

// Returns an array of two balanced nodes.
function shuffle(a, b, toRemove)
{
	var newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));
	var newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));

	// Skip the slots with size M. More precise: copy the slot references
	// to the new node
	var read = 0;
	while (get2(a.table, b.table, read).table.length % M === 0)
	{
		set2(newA.table, newB.table, read, get2(a.table, b.table, read));
		set2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));
		read++;
	}

	// Pulling items from left to right, caching in a slot before writing
	// it into the new nodes.
	var write = read;
	var slot = new createNode(a.height - 1, 0);
	var from = 0;

	// If the current slot is still containing data, then there will be at
	// least one more write, so we do not break this loop yet.
	while (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove)
	{
		// Find out the max possible items for copying.
		var source = get2(a.table, b.table, read);
		var to = Math.min(M - slot.table.length, source.table.length);

		// Copy and adjust size table.
		slot.table = slot.table.concat(source.table.slice(from, to));
		if (slot.height > 0)
		{
			var len = slot.lengths.length;
			for (var i = len; i < len + to - from; i++)
			{
				slot.lengths[i] = length(slot.table[i]);
				slot.lengths[i] += (i > 0 ? slot.lengths[i - 1] : 0);
			}
		}

		from += to;

		// Only proceed to next slots[i] if the current one was
		// fully copied.
		if (source.table.length <= to)
		{
			read++; from = 0;
		}

		// Only create a new slot if the current one is filled up.
		if (slot.table.length === M)
		{
			saveSlot(newA, newB, write, slot);
			slot = createNode(a.height - 1, 0);
			write++;
		}
	}

	// Cleanup after the loop. Copy the last slot into the new nodes.
	if (slot.table.length > 0)
	{
		saveSlot(newA, newB, write, slot);
		write++;
	}

	// Shift the untouched slots to the left
	while (read < a.table.length + b.table.length )
	{
		saveSlot(newA, newB, write, get2(a.table, b.table, read));
		read++;
		write++;
	}

	return [newA, newB];
}

// Navigation functions
function botRight(a)
{
	return a.table[a.table.length - 1];
}
function botLeft(a)
{
	return a.table[0];
}

// Copies a node for updating. Note that you should not use this if
// only updating only one of "table" or "lengths" for performance reasons.
function nodeCopy(a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice()
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths.slice();
	}
	return newA;
}

// Returns how many items are in the tree.
function length(array)
{
	if (array.height === 0)
	{
		return array.table.length;
	}
	else
	{
		return array.lengths[array.lengths.length - 1];
	}
}

// Calculates in which slot of "table" the item probably is, then
// find the exact slot via forward searching in  "lengths". Returns the index.
function getSlot(i, a)
{
	var slot = i >> (5 * a.height);
	while (a.lengths[slot] <= i)
	{
		slot++;
	}
	return slot;
}

// Recursively creates a tree with a given height containing
// only the given item.
function create(item, h)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: [item]
		};
	}
	return {
		ctor: '_Array',
		height: h,
		table: [create(item, h - 1)],
		lengths: [1]
	};
}

// Recursively creates a tree that contains the given tree.
function parentise(tree, h)
{
	if (h === tree.height)
	{
		return tree;
	}

	return {
		ctor: '_Array',
		height: h,
		table: [parentise(tree, h - 1)],
		lengths: [length(tree)]
	};
}

// Emphasizes blood brotherhood beneath two trees.
function siblise(a, b)
{
	return {
		ctor: '_Array',
		height: a.height + 1,
		table: [a, b],
		lengths: [length(a), length(a) + length(b)]
	};
}

function toJSArray(a)
{
	var jsArray = new Array(length(a));
	toJSArray_(jsArray, 0, a);
	return jsArray;
}

function toJSArray_(jsArray, i, a)
{
	for (var t = 0; t < a.table.length; t++)
	{
		if (a.height === 0)
		{
			jsArray[i + t] = a.table[t];
		}
		else
		{
			var inc = t === 0 ? 0 : a.lengths[t - 1];
			toJSArray_(jsArray, i + inc, a.table[t]);
		}
	}
}

function fromJSArray(jsArray)
{
	if (jsArray.length === 0)
	{
		return empty;
	}
	var h = Math.floor(Math.log(jsArray.length) / Math.log(M));
	return fromJSArray_(jsArray, h, 0, jsArray.length);
}

function fromJSArray_(jsArray, h, from, to)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: jsArray.slice(from, to)
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = fromJSArray_(jsArray, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

return {
	empty: empty,
	fromList: fromList,
	toList: toList,
	initialize: F2(initialize),
	append: F2(append),
	push: F2(push),
	slice: F3(slice),
	get: F2(get),
	set: F3(set),
	map: F2(map),
	indexedMap: F2(indexedMap),
	foldl: F3(foldl),
	foldr: F3(foldr),
	length: length,

	toJSArray: toJSArray,
	fromJSArray: fromJSArray
};

}();
//import Native.Utils //

var _elm_lang$core$Native_Basics = function() {

function div(a, b)
{
	return (a / b) | 0;
}
function rem(a, b)
{
	return a % b;
}
function mod(a, b)
{
	if (b === 0)
	{
		throw new Error('Cannot perform mod 0. Division by zero error.');
	}
	var r = a % b;
	var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r + b) : -mod(-a, -b));

	return m === b ? 0 : m;
}
function logBase(base, n)
{
	return Math.log(n) / Math.log(base);
}
function negate(n)
{
	return -n;
}
function abs(n)
{
	return n < 0 ? -n : n;
}

function min(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;
}
function max(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;
}
function clamp(lo, hi, n)
{
	return _elm_lang$core$Native_Utils.cmp(n, lo) < 0
		? lo
		: _elm_lang$core$Native_Utils.cmp(n, hi) > 0
			? hi
			: n;
}

var ord = ['LT', 'EQ', 'GT'];

function compare(x, y)
{
	return { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };
}

function xor(a, b)
{
	return a !== b;
}
function not(b)
{
	return !b;
}
function isInfinite(n)
{
	return n === Infinity || n === -Infinity;
}

function truncate(n)
{
	return n | 0;
}

function degrees(d)
{
	return d * Math.PI / 180;
}
function turns(t)
{
	return 2 * Math.PI * t;
}
function fromPolar(point)
{
	var r = point._0;
	var t = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));
}
function toPolar(point)
{
	var x = point._0;
	var y = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));
}

return {
	div: F2(div),
	rem: F2(rem),
	mod: F2(mod),

	pi: Math.PI,
	e: Math.E,
	cos: Math.cos,
	sin: Math.sin,
	tan: Math.tan,
	acos: Math.acos,
	asin: Math.asin,
	atan: Math.atan,
	atan2: F2(Math.atan2),

	degrees: degrees,
	turns: turns,
	fromPolar: fromPolar,
	toPolar: toPolar,

	sqrt: Math.sqrt,
	logBase: F2(logBase),
	negate: negate,
	abs: abs,
	min: F2(min),
	max: F2(max),
	clamp: F3(clamp),
	compare: F2(compare),

	xor: F2(xor),
	not: not,

	truncate: truncate,
	ceiling: Math.ceil,
	floor: Math.floor,
	round: Math.round,
	toFloat: function(x) { return x; },
	isNaN: isNaN,
	isInfinite: isInfinite
};

}();
//import //

var _elm_lang$core$Native_Utils = function() {

// COMPARISONS

function eq(x, y)
{
	var stack = [];
	var isEqual = eqHelp(x, y, 0, stack);
	var pair;
	while (isEqual && (pair = stack.pop()))
	{
		isEqual = eqHelp(pair.x, pair.y, 0, stack);
	}
	return isEqual;
}


function eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push({ x: x, y: y });
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object')
	{
		if (typeof x === 'function')
		{
			throw new Error(
				'Trying to use `(==)` on functions. There is no way to know if functions are "the same" in the Elm sense.'
				+ ' Read more about this at http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#=='
				+ ' which describes why it is this way and what the better version will look like.'
			);
		}
		return false;
	}

	if (x === null || y === null)
	{
		return false
	}

	if (x instanceof Date)
	{
		return x.getTime() === y.getTime();
	}

	if (!('ctor' in x))
	{
		for (var key in x)
		{
			if (!eqHelp(x[key], y[key], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	// convert Dicts and Sets to lists
	if (x.ctor === 'RBNode_elm_builtin' || x.ctor === 'RBEmpty_elm_builtin')
	{
		x = _elm_lang$core$Dict$toList(x);
		y = _elm_lang$core$Dict$toList(y);
	}
	if (x.ctor === 'Set_elm_builtin')
	{
		x = _elm_lang$core$Set$toList(x);
		y = _elm_lang$core$Set$toList(y);
	}

	// check if lists are equal without recursion
	if (x.ctor === '::')
	{
		var a = x;
		var b = y;
		while (a.ctor === '::' && b.ctor === '::')
		{
			if (!eqHelp(a._0, b._0, depth + 1, stack))
			{
				return false;
			}
			a = a._1;
			b = b._1;
		}
		return a.ctor === b.ctor;
	}

	// check if Arrays are equal
	if (x.ctor === '_Array')
	{
		var xs = _elm_lang$core$Native_Array.toJSArray(x);
		var ys = _elm_lang$core$Native_Array.toJSArray(y);
		if (xs.length !== ys.length)
		{
			return false;
		}
		for (var i = 0; i < xs.length; i++)
		{
			if (!eqHelp(xs[i], ys[i], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	if (!eqHelp(x.ctor, y.ctor, depth + 1, stack))
	{
		return false;
	}

	for (var key in x)
	{
		if (!eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

var LT = -1, EQ = 0, GT = 1;

function cmp(x, y)
{
	if (typeof x !== 'object')
	{
		return x === y ? EQ : x < y ? LT : GT;
	}

	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? EQ : a < b ? LT : GT;
	}

	if (x.ctor === '::' || x.ctor === '[]')
	{
		while (x.ctor === '::' && y.ctor === '::')
		{
			var ord = cmp(x._0, y._0);
			if (ord !== EQ)
			{
				return ord;
			}
			x = x._1;
			y = y._1;
		}
		return x.ctor === y.ctor ? EQ : x.ctor === '[]' ? LT : GT;
	}

	if (x.ctor.slice(0, 6) === '_Tuple')
	{
		var ord;
		var n = x.ctor.slice(6) - 0;
		var err = 'cannot compare tuples with more than 6 elements.';
		if (n === 0) return EQ;
		if (n >= 1) { ord = cmp(x._0, y._0); if (ord !== EQ) return ord;
		if (n >= 2) { ord = cmp(x._1, y._1); if (ord !== EQ) return ord;
		if (n >= 3) { ord = cmp(x._2, y._2); if (ord !== EQ) return ord;
		if (n >= 4) { ord = cmp(x._3, y._3); if (ord !== EQ) return ord;
		if (n >= 5) { ord = cmp(x._4, y._4); if (ord !== EQ) return ord;
		if (n >= 6) { ord = cmp(x._5, y._5); if (ord !== EQ) return ord;
		if (n >= 7) throw new Error('Comparison error: ' + err); } } } } } }
		return EQ;
	}

	throw new Error(
		'Comparison error: comparison is only defined on ints, '
		+ 'floats, times, chars, strings, lists of comparable values, '
		+ 'and tuples of comparable values.'
	);
}


// COMMON VALUES

var Tuple0 = {
	ctor: '_Tuple0'
};

function Tuple2(x, y)
{
	return {
		ctor: '_Tuple2',
		_0: x,
		_1: y
	};
}

function chr(c)
{
	return new String(c);
}


// GUID

var count = 0;
function guid(_)
{
	return count++;
}


// RECORDS

function update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


//// LIST STUFF ////

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return {
		ctor: '::',
		_0: hd,
		_1: tl
	};
}

function append(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (xs.ctor === '[]')
	{
		return ys;
	}
	var root = Cons(xs._0, Nil);
	var curr = root;
	xs = xs._1;
	while (xs.ctor !== '[]')
	{
		curr._1 = Cons(xs._0, Nil);
		xs = xs._1;
		curr = curr._1;
	}
	curr._1 = ys;
	return root;
}


// CRASHES

function crash(moduleName, region)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function crashCase(moduleName, region, value)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '`\n\n'
			+ 'This was caused by the `case` expression ' + regionToString(region) + '.\n'
			+ 'One of the branches ended with a crash and the following value got through:\n\n    ' + toString(value) + '\n\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function regionToString(region)
{
	if (region.start.line == region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'between lines ' + region.start.line + ' and ' + region.end.line;
}


// TO STRING

function toString(v)
{
	var type = typeof v;
	if (type === 'function')
	{
		return '<function>';
	}

	if (type === 'boolean')
	{
		return v ? 'True' : 'False';
	}

	if (type === 'number')
	{
		return v + '';
	}

	if (v instanceof String)
	{
		return '\'' + addSlashes(v, true) + '\'';
	}

	if (type === 'string')
	{
		return '"' + addSlashes(v, false) + '"';
	}

	if (v === null)
	{
		return 'null';
	}

	if (type === 'object' && 'ctor' in v)
	{
		var ctorStarter = v.ctor.substring(0, 5);

		if (ctorStarter === '_Tupl')
		{
			var output = [];
			for (var k in v)
			{
				if (k === 'ctor') continue;
				output.push(toString(v[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (ctorStarter === '_Task')
		{
			return '<task>'
		}

		if (v.ctor === '_Array')
		{
			var list = _elm_lang$core$Array$toList(v);
			return 'Array.fromList ' + toString(list);
		}

		if (v.ctor === '<decoder>')
		{
			return '<decoder>';
		}

		if (v.ctor === '_Process')
		{
			return '<process:' + v.id + '>';
		}

		if (v.ctor === '::')
		{
			var output = '[' + toString(v._0);
			v = v._1;
			while (v.ctor === '::')
			{
				output += ',' + toString(v._0);
				v = v._1;
			}
			return output + ']';
		}

		if (v.ctor === '[]')
		{
			return '[]';
		}

		if (v.ctor === 'Set_elm_builtin')
		{
			return 'Set.fromList ' + toString(_elm_lang$core$Set$toList(v));
		}

		if (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin')
		{
			return 'Dict.fromList ' + toString(_elm_lang$core$Dict$toList(v));
		}

		var output = '';
		for (var i in v)
		{
			if (i === 'ctor') continue;
			var str = toString(v[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return v.ctor + output;
	}

	if (type === 'object')
	{
		if (v instanceof Date)
		{
			return '<' + v.toString() + '>';
		}

		if (v.elm_web_socket)
		{
			return '<websocket>';
		}

		var output = [];
		for (var k in v)
		{
			output.push(k + ' = ' + toString(v[k]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return '<internal structure>';
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	eq: eq,
	cmp: cmp,
	Tuple0: Tuple0,
	Tuple2: Tuple2,
	chr: chr,
	update: update,
	guid: guid,

	append: F2(append),

	crash: crash,
	crashCase: crashCase,

	toString: toString
};

}();
var _elm_lang$core$Basics$never = function (_p0) {
	never:
	while (true) {
		var _p1 = _p0;
		var _v1 = _p1._0;
		_p0 = _v1;
		continue never;
	}
};
var _elm_lang$core$Basics$uncurry = F2(
	function (f, _p2) {
		var _p3 = _p2;
		return A2(f, _p3._0, _p3._1);
	});
var _elm_lang$core$Basics$curry = F3(
	function (f, a, b) {
		return f(
			{ctor: '_Tuple2', _0: a, _1: b});
	});
var _elm_lang$core$Basics$flip = F3(
	function (f, b, a) {
		return A2(f, a, b);
	});
var _elm_lang$core$Basics$always = F2(
	function (a, _p4) {
		return a;
	});
var _elm_lang$core$Basics$identity = function (x) {
	return x;
};
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<|'] = F2(
	function (f, x) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['|>'] = F2(
	function (x, f) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>>'] = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<<'] = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['++'] = _elm_lang$core$Native_Utils.append;
var _elm_lang$core$Basics$toString = _elm_lang$core$Native_Utils.toString;
var _elm_lang$core$Basics$isInfinite = _elm_lang$core$Native_Basics.isInfinite;
var _elm_lang$core$Basics$isNaN = _elm_lang$core$Native_Basics.isNaN;
var _elm_lang$core$Basics$toFloat = _elm_lang$core$Native_Basics.toFloat;
var _elm_lang$core$Basics$ceiling = _elm_lang$core$Native_Basics.ceiling;
var _elm_lang$core$Basics$floor = _elm_lang$core$Native_Basics.floor;
var _elm_lang$core$Basics$truncate = _elm_lang$core$Native_Basics.truncate;
var _elm_lang$core$Basics$round = _elm_lang$core$Native_Basics.round;
var _elm_lang$core$Basics$not = _elm_lang$core$Native_Basics.not;
var _elm_lang$core$Basics$xor = _elm_lang$core$Native_Basics.xor;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['||'] = _elm_lang$core$Native_Basics.or;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['&&'] = _elm_lang$core$Native_Basics.and;
var _elm_lang$core$Basics$max = _elm_lang$core$Native_Basics.max;
var _elm_lang$core$Basics$min = _elm_lang$core$Native_Basics.min;
var _elm_lang$core$Basics$compare = _elm_lang$core$Native_Basics.compare;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>='] = _elm_lang$core$Native_Basics.ge;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<='] = _elm_lang$core$Native_Basics.le;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>'] = _elm_lang$core$Native_Basics.gt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<'] = _elm_lang$core$Native_Basics.lt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/='] = _elm_lang$core$Native_Basics.neq;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['=='] = _elm_lang$core$Native_Basics.eq;
var _elm_lang$core$Basics$e = _elm_lang$core$Native_Basics.e;
var _elm_lang$core$Basics$pi = _elm_lang$core$Native_Basics.pi;
var _elm_lang$core$Basics$clamp = _elm_lang$core$Native_Basics.clamp;
var _elm_lang$core$Basics$logBase = _elm_lang$core$Native_Basics.logBase;
var _elm_lang$core$Basics$abs = _elm_lang$core$Native_Basics.abs;
var _elm_lang$core$Basics$negate = _elm_lang$core$Native_Basics.negate;
var _elm_lang$core$Basics$sqrt = _elm_lang$core$Native_Basics.sqrt;
var _elm_lang$core$Basics$atan2 = _elm_lang$core$Native_Basics.atan2;
var _elm_lang$core$Basics$atan = _elm_lang$core$Native_Basics.atan;
var _elm_lang$core$Basics$asin = _elm_lang$core$Native_Basics.asin;
var _elm_lang$core$Basics$acos = _elm_lang$core$Native_Basics.acos;
var _elm_lang$core$Basics$tan = _elm_lang$core$Native_Basics.tan;
var _elm_lang$core$Basics$sin = _elm_lang$core$Native_Basics.sin;
var _elm_lang$core$Basics$cos = _elm_lang$core$Native_Basics.cos;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['^'] = _elm_lang$core$Native_Basics.exp;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['%'] = _elm_lang$core$Native_Basics.mod;
var _elm_lang$core$Basics$rem = _elm_lang$core$Native_Basics.rem;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['//'] = _elm_lang$core$Native_Basics.div;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/'] = _elm_lang$core$Native_Basics.floatDiv;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['*'] = _elm_lang$core$Native_Basics.mul;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['-'] = _elm_lang$core$Native_Basics.sub;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['+'] = _elm_lang$core$Native_Basics.add;
var _elm_lang$core$Basics$toPolar = _elm_lang$core$Native_Basics.toPolar;
var _elm_lang$core$Basics$fromPolar = _elm_lang$core$Native_Basics.fromPolar;
var _elm_lang$core$Basics$turns = _elm_lang$core$Native_Basics.turns;
var _elm_lang$core$Basics$degrees = _elm_lang$core$Native_Basics.degrees;
var _elm_lang$core$Basics$radians = function (t) {
	return t;
};
var _elm_lang$core$Basics$GT = {ctor: 'GT'};
var _elm_lang$core$Basics$EQ = {ctor: 'EQ'};
var _elm_lang$core$Basics$LT = {ctor: 'LT'};
var _elm_lang$core$Basics$JustOneMore = function (a) {
	return {ctor: 'JustOneMore', _0: a};
};

var _elm_lang$core$Maybe$withDefault = F2(
	function ($default, maybe) {
		var _p0 = maybe;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return $default;
		}
	});
var _elm_lang$core$Maybe$Nothing = {ctor: 'Nothing'};
var _elm_lang$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		var _p1 = maybeValue;
		if (_p1.ctor === 'Just') {
			return callback(_p1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$Just = function (a) {
	return {ctor: 'Just', _0: a};
};
var _elm_lang$core$Maybe$map = F2(
	function (f, maybe) {
		var _p2 = maybe;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		var _p3 = {ctor: '_Tuple2', _0: ma, _1: mb};
		if (((_p3.ctor === '_Tuple2') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A2(func, _p3._0._0, _p3._1._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		var _p4 = {ctor: '_Tuple3', _0: ma, _1: mb, _2: mc};
		if ((((_p4.ctor === '_Tuple3') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) && (_p4._2.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A3(func, _p4._0._0, _p4._1._0, _p4._2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		var _p5 = {ctor: '_Tuple4', _0: ma, _1: mb, _2: mc, _3: md};
		if (((((_p5.ctor === '_Tuple4') && (_p5._0.ctor === 'Just')) && (_p5._1.ctor === 'Just')) && (_p5._2.ctor === 'Just')) && (_p5._3.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A4(func, _p5._0._0, _p5._1._0, _p5._2._0, _p5._3._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map5 = F6(
	function (func, ma, mb, mc, md, me) {
		var _p6 = {ctor: '_Tuple5', _0: ma, _1: mb, _2: mc, _3: md, _4: me};
		if ((((((_p6.ctor === '_Tuple5') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) && (_p6._2.ctor === 'Just')) && (_p6._3.ctor === 'Just')) && (_p6._4.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A5(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0, _p6._4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});

//import Native.Utils //

var _elm_lang$core$Native_List = function() {

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return { ctor: '::', _0: hd, _1: tl };
}

function fromArray(arr)
{
	var out = Nil;
	for (var i = arr.length; i--; )
	{
		out = Cons(arr[i], out);
	}
	return out;
}

function toArray(xs)
{
	var out = [];
	while (xs.ctor !== '[]')
	{
		out.push(xs._0);
		xs = xs._1;
	}
	return out;
}

function foldr(f, b, xs)
{
	var arr = toArray(xs);
	var acc = b;
	for (var i = arr.length; i--; )
	{
		acc = A2(f, arr[i], acc);
	}
	return acc;
}

function map2(f, xs, ys)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]')
	{
		arr.push(A2(f, xs._0, ys._0));
		xs = xs._1;
		ys = ys._1;
	}
	return fromArray(arr);
}

function map3(f, xs, ys, zs)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]')
	{
		arr.push(A3(f, xs._0, ys._0, zs._0));
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map4(f, ws, xs, ys, zs)
{
	var arr = [];
	while (   ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A4(f, ws._0, xs._0, ys._0, zs._0));
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map5(f, vs, ws, xs, ys, zs)
{
	var arr = [];
	while (   vs.ctor !== '[]'
		   && ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));
		vs = vs._1;
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function sortBy(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		return _elm_lang$core$Native_Utils.cmp(f(a), f(b));
	}));
}

function sortWith(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		var ord = f(a)(b).ctor;
		return ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;
	}));
}

return {
	Nil: Nil,
	Cons: Cons,
	cons: F2(Cons),
	toArray: toArray,
	fromArray: fromArray,

	foldr: F3(foldr),

	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	sortBy: F2(sortBy),
	sortWith: F2(sortWith)
};

}();
var _elm_lang$core$List$sortWith = _elm_lang$core$Native_List.sortWith;
var _elm_lang$core$List$sortBy = _elm_lang$core$Native_List.sortBy;
var _elm_lang$core$List$sort = function (xs) {
	return A2(_elm_lang$core$List$sortBy, _elm_lang$core$Basics$identity, xs);
};
var _elm_lang$core$List$singleton = function (value) {
	return {
		ctor: '::',
		_0: value,
		_1: {ctor: '[]'}
	};
};
var _elm_lang$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return list;
			} else {
				var _p0 = list;
				if (_p0.ctor === '[]') {
					return list;
				} else {
					var _v1 = n - 1,
						_v2 = _p0._1;
					n = _v1;
					list = _v2;
					continue drop;
				}
			}
		}
	});
var _elm_lang$core$List$map5 = _elm_lang$core$Native_List.map5;
var _elm_lang$core$List$map4 = _elm_lang$core$Native_List.map4;
var _elm_lang$core$List$map3 = _elm_lang$core$Native_List.map3;
var _elm_lang$core$List$map2 = _elm_lang$core$Native_List.map2;
var _elm_lang$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '[]') {
				return false;
			} else {
				if (isOkay(_p1._0)) {
					return true;
				} else {
					var _v4 = isOkay,
						_v5 = _p1._1;
					isOkay = _v4;
					list = _v5;
					continue any;
				}
			}
		}
	});
var _elm_lang$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			_elm_lang$core$List$any,
			function (_p2) {
				return !isOkay(_p2);
			},
			list);
	});
var _elm_lang$core$List$foldr = _elm_lang$core$Native_List.foldr;
var _elm_lang$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return acc;
			} else {
				var _v7 = func,
					_v8 = A2(func, _p3._0, acc),
					_v9 = _p3._1;
				func = _v7;
				acc = _v8;
				list = _v9;
				continue foldl;
			}
		}
	});
var _elm_lang$core$List$length = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, i) {
				return i + 1;
			}),
		0,
		xs);
};
var _elm_lang$core$List$sum = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x + y;
			}),
		0,
		numbers);
};
var _elm_lang$core$List$product = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x * y;
			}),
		1,
		numbers);
};
var _elm_lang$core$List$maximum = function (list) {
	var _p5 = list;
	if (_p5.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$max, _p5._0, _p5._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$minimum = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$min, _p6._0, _p6._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$member = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return _elm_lang$core$Native_Utils.eq(a, x);
			},
			xs);
	});
var _elm_lang$core$List$isEmpty = function (xs) {
	var _p7 = xs;
	if (_p7.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _elm_lang$core$List$tail = function (list) {
	var _p8 = list;
	if (_p8.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p8._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$head = function (list) {
	var _p9 = list;
	if (_p9.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p9._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List_ops = _elm_lang$core$List_ops || {};
_elm_lang$core$List_ops['::'] = _elm_lang$core$Native_List.cons;
var _elm_lang$core$List$map = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, acc) {
					return {
						ctor: '::',
						_0: f(x),
						_1: acc
					};
				}),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$filter = F2(
	function (pred, xs) {
		var conditionalCons = F2(
			function (front, back) {
				return pred(front) ? {ctor: '::', _0: front, _1: back} : back;
			});
		return A3(
			_elm_lang$core$List$foldr,
			conditionalCons,
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _p10 = f(mx);
		if (_p10.ctor === 'Just') {
			return {ctor: '::', _0: _p10._0, _1: xs};
		} else {
			return xs;
		}
	});
var _elm_lang$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			_elm_lang$core$List$maybeCons(f),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$reverse = function (list) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		{ctor: '[]'},
		list);
};
var _elm_lang$core$List$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				var _p11 = accAcc;
				if (_p11.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, x, _p11._0),
						_1: accAcc
					};
				} else {
					return {ctor: '[]'};
				}
			});
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$foldl,
				scan1,
				{
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				},
				xs));
	});
var _elm_lang$core$List$append = F2(
	function (xs, ys) {
		var _p12 = ys;
		if (_p12.ctor === '[]') {
			return xs;
		} else {
			return A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				ys,
				xs);
		}
	});
var _elm_lang$core$List$concat = function (lists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		{ctor: '[]'},
		lists);
};
var _elm_lang$core$List$concatMap = F2(
	function (f, list) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, f, list));
	});
var _elm_lang$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _p13) {
				var _p14 = _p13;
				var _p16 = _p14._0;
				var _p15 = _p14._1;
				return pred(x) ? {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: x, _1: _p16},
					_1: _p15
				} : {
					ctor: '_Tuple2',
					_0: _p16,
					_1: {ctor: '::', _0: x, _1: _p15}
				};
			});
		return A3(
			_elm_lang$core$List$foldr,
			step,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			list);
	});
var _elm_lang$core$List$unzip = function (pairs) {
	var step = F2(
		function (_p18, _p17) {
			var _p19 = _p18;
			var _p20 = _p17;
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: _p19._0, _1: _p20._0},
				_1: {ctor: '::', _0: _p19._1, _1: _p20._1}
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		step,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _elm_lang$core$List$intersperse = F2(
	function (sep, xs) {
		var _p21 = xs;
		if (_p21.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var step = F2(
				function (x, rest) {
					return {
						ctor: '::',
						_0: sep,
						_1: {ctor: '::', _0: x, _1: rest}
					};
				});
			var spersed = A3(
				_elm_lang$core$List$foldr,
				step,
				{ctor: '[]'},
				_p21._1);
			return {ctor: '::', _0: _p21._0, _1: spersed};
		}
	});
var _elm_lang$core$List$takeReverse = F3(
	function (n, list, taken) {
		takeReverse:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return taken;
			} else {
				var _p22 = list;
				if (_p22.ctor === '[]') {
					return taken;
				} else {
					var _v23 = n - 1,
						_v24 = _p22._1,
						_v25 = {ctor: '::', _0: _p22._0, _1: taken};
					n = _v23;
					list = _v24;
					taken = _v25;
					continue takeReverse;
				}
			}
		}
	});
var _elm_lang$core$List$takeTailRec = F2(
	function (n, list) {
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$takeReverse,
				n,
				list,
				{ctor: '[]'}));
	});
var _elm_lang$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
			return {ctor: '[]'};
		} else {
			var _p23 = {ctor: '_Tuple2', _0: n, _1: list};
			_v26_5:
			do {
				_v26_1:
				do {
					if (_p23.ctor === '_Tuple2') {
						if (_p23._1.ctor === '[]') {
							return list;
						} else {
							if (_p23._1._1.ctor === '::') {
								switch (_p23._0) {
									case 1:
										break _v26_1;
									case 2:
										return {
											ctor: '::',
											_0: _p23._1._0,
											_1: {
												ctor: '::',
												_0: _p23._1._1._0,
												_1: {ctor: '[]'}
											}
										};
									case 3:
										if (_p23._1._1._1.ctor === '::') {
											return {
												ctor: '::',
												_0: _p23._1._0,
												_1: {
													ctor: '::',
													_0: _p23._1._1._0,
													_1: {
														ctor: '::',
														_0: _p23._1._1._1._0,
														_1: {ctor: '[]'}
													}
												}
											};
										} else {
											break _v26_5;
										}
									default:
										if ((_p23._1._1._1.ctor === '::') && (_p23._1._1._1._1.ctor === '::')) {
											var _p28 = _p23._1._1._1._0;
											var _p27 = _p23._1._1._0;
											var _p26 = _p23._1._0;
											var _p25 = _p23._1._1._1._1._0;
											var _p24 = _p23._1._1._1._1._1;
											return (_elm_lang$core$Native_Utils.cmp(ctr, 1000) > 0) ? {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A2(_elm_lang$core$List$takeTailRec, n - 4, _p24)
														}
													}
												}
											} : {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A3(_elm_lang$core$List$takeFast, ctr + 1, n - 4, _p24)
														}
													}
												}
											};
										} else {
											break _v26_5;
										}
								}
							} else {
								if (_p23._0 === 1) {
									break _v26_1;
								} else {
									break _v26_5;
								}
							}
						}
					} else {
						break _v26_5;
					}
				} while(false);
				return {
					ctor: '::',
					_0: _p23._1._0,
					_1: {ctor: '[]'}
				};
			} while(false);
			return list;
		}
	});
var _elm_lang$core$List$take = F2(
	function (n, list) {
		return A3(_elm_lang$core$List$takeFast, 0, n, list);
	});
var _elm_lang$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return result;
			} else {
				var _v27 = {ctor: '::', _0: value, _1: result},
					_v28 = n - 1,
					_v29 = value;
				result = _v27;
				n = _v28;
				value = _v29;
				continue repeatHelp;
			}
		}
	});
var _elm_lang$core$List$repeat = F2(
	function (n, value) {
		return A3(
			_elm_lang$core$List$repeatHelp,
			{ctor: '[]'},
			n,
			value);
	});
var _elm_lang$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(lo, hi) < 1) {
				var _v30 = lo,
					_v31 = hi - 1,
					_v32 = {ctor: '::', _0: hi, _1: list};
				lo = _v30;
				hi = _v31;
				list = _v32;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var _elm_lang$core$List$range = F2(
	function (lo, hi) {
		return A3(
			_elm_lang$core$List$rangeHelp,
			lo,
			hi,
			{ctor: '[]'});
	});
var _elm_lang$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$map2,
			f,
			A2(
				_elm_lang$core$List$range,
				0,
				_elm_lang$core$List$length(xs) - 1),
			xs);
	});

var _elm_lang$core$Array$append = _elm_lang$core$Native_Array.append;
var _elm_lang$core$Array$length = _elm_lang$core$Native_Array.length;
var _elm_lang$core$Array$isEmpty = function (array) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Array$length(array),
		0);
};
var _elm_lang$core$Array$slice = _elm_lang$core$Native_Array.slice;
var _elm_lang$core$Array$set = _elm_lang$core$Native_Array.set;
var _elm_lang$core$Array$get = F2(
	function (i, array) {
		return ((_elm_lang$core$Native_Utils.cmp(0, i) < 1) && (_elm_lang$core$Native_Utils.cmp(
			i,
			_elm_lang$core$Native_Array.length(array)) < 0)) ? _elm_lang$core$Maybe$Just(
			A2(_elm_lang$core$Native_Array.get, i, array)) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$core$Array$push = _elm_lang$core$Native_Array.push;
var _elm_lang$core$Array$empty = _elm_lang$core$Native_Array.empty;
var _elm_lang$core$Array$filter = F2(
	function (isOkay, arr) {
		var update = F2(
			function (x, xs) {
				return isOkay(x) ? A2(_elm_lang$core$Native_Array.push, x, xs) : xs;
			});
		return A3(_elm_lang$core$Native_Array.foldl, update, _elm_lang$core$Native_Array.empty, arr);
	});
var _elm_lang$core$Array$foldr = _elm_lang$core$Native_Array.foldr;
var _elm_lang$core$Array$foldl = _elm_lang$core$Native_Array.foldl;
var _elm_lang$core$Array$indexedMap = _elm_lang$core$Native_Array.indexedMap;
var _elm_lang$core$Array$map = _elm_lang$core$Native_Array.map;
var _elm_lang$core$Array$toIndexedList = function (array) {
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		A2(
			_elm_lang$core$List$range,
			0,
			_elm_lang$core$Native_Array.length(array) - 1),
		_elm_lang$core$Native_Array.toList(array));
};
var _elm_lang$core$Array$toList = _elm_lang$core$Native_Array.toList;
var _elm_lang$core$Array$fromList = _elm_lang$core$Native_Array.fromList;
var _elm_lang$core$Array$initialize = _elm_lang$core$Native_Array.initialize;
var _elm_lang$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			_elm_lang$core$Array$initialize,
			n,
			_elm_lang$core$Basics$always(e));
	});
var _elm_lang$core$Array$Array = {ctor: 'Array'};

//import Native.Utils //

var _elm_lang$core$Native_Debug = function() {

function log(tag, value)
{
	var msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);
	var process = process || {};
	if (process.stdout)
	{
		process.stdout.write(msg);
	}
	else
	{
		console.log(msg);
	}
	return value;
}

function crash(message)
{
	throw new Error(message);
}

return {
	crash: crash,
	log: F2(log)
};

}();
//import Maybe, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_String = function() {

function isEmpty(str)
{
	return str.length === 0;
}
function cons(chr, str)
{
	return chr + str;
}
function uncons(str)
{
	var hd = str[0];
	if (hd)
	{
		return _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));
	}
	return _elm_lang$core$Maybe$Nothing;
}
function append(a, b)
{
	return a + b;
}
function concat(strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join('');
}
function length(str)
{
	return str.length;
}
function map(f, str)
{
	var out = str.split('');
	for (var i = out.length; i--; )
	{
		out[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));
	}
	return out.join('');
}
function filter(pred, str)
{
	return str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');
}
function reverse(str)
{
	return str.split('').reverse().join('');
}
function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i < len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function foldr(f, b, str)
{
	for (var i = str.length; i--; )
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function split(sep, str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(sep));
}
function join(sep, strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join(sep);
}
function repeat(n, str)
{
	var result = '';
	while (n > 0)
	{
		if (n & 1)
		{
			result += str;
		}
		n >>= 1, str += str;
	}
	return result;
}
function slice(start, end, str)
{
	return str.slice(start, end);
}
function left(n, str)
{
	return n < 1 ? '' : str.slice(0, n);
}
function right(n, str)
{
	return n < 1 ? '' : str.slice(-n);
}
function dropLeft(n, str)
{
	return n < 1 ? str : str.slice(n);
}
function dropRight(n, str)
{
	return n < 1 ? str : str.slice(0, -n);
}
function pad(n, chr, str)
{
	var half = (n - str.length) / 2;
	return repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);
}
function padRight(n, chr, str)
{
	return str + repeat(n - str.length, chr);
}
function padLeft(n, chr, str)
{
	return repeat(n - str.length, chr) + str;
}

function trim(str)
{
	return str.trim();
}
function trimLeft(str)
{
	return str.replace(/^\s+/, '');
}
function trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function words(str)
{
	return _elm_lang$core$Native_List.fromArray(str.trim().split(/\s+/g));
}
function lines(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(/\r\n|\r|\n/g));
}

function toUpper(str)
{
	return str.toUpperCase();
}
function toLower(str)
{
	return str.toLowerCase();
}

function any(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return true;
		}
	}
	return false;
}
function all(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (!pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return false;
		}
	}
	return true;
}

function contains(sub, str)
{
	return str.indexOf(sub) > -1;
}
function startsWith(sub, str)
{
	return str.indexOf(sub) === 0;
}
function endsWith(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
}
function indexes(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _elm_lang$core$Native_List.Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _elm_lang$core$Native_List.fromArray(is);
}


function toInt(s)
{
	var len = s.length;

	// if empty
	if (len === 0)
	{
		return intErr(s);
	}

	// if hex
	var c = s[0];
	if (c === '0' && s[1] === 'x')
	{
		for (var i = 2; i < len; ++i)
		{
			var c = s[i];
			if (('0' <= c && c <= '9') || ('A' <= c && c <= 'F') || ('a' <= c && c <= 'f'))
			{
				continue;
			}
			return intErr(s);
		}
		return _elm_lang$core$Result$Ok(parseInt(s, 16));
	}

	// is decimal
	if (c > '9' || (c < '0' && c !== '-' && c !== '+'))
	{
		return intErr(s);
	}
	for (var i = 1; i < len; ++i)
	{
		var c = s[i];
		if (c < '0' || '9' < c)
		{
			return intErr(s);
		}
	}

	return _elm_lang$core$Result$Ok(parseInt(s, 10));
}

function intErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int");
}


function toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return floatErr(s);
	}
	var n = +s;
	// faster isNaN check
	return n === n ? _elm_lang$core$Result$Ok(n) : floatErr(s);
}

function floatErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float");
}


function toList(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));
}
function fromList(chars)
{
	return _elm_lang$core$Native_List.toArray(chars).join('');
}

return {
	isEmpty: isEmpty,
	cons: F2(cons),
	uncons: uncons,
	append: F2(append),
	concat: concat,
	length: length,
	map: F2(map),
	filter: F2(filter),
	reverse: reverse,
	foldl: F3(foldl),
	foldr: F3(foldr),

	split: F2(split),
	join: F2(join),
	repeat: F2(repeat),

	slice: F3(slice),
	left: F2(left),
	right: F2(right),
	dropLeft: F2(dropLeft),
	dropRight: F2(dropRight),

	pad: F3(pad),
	padLeft: F3(padLeft),
	padRight: F3(padRight),

	trim: trim,
	trimLeft: trimLeft,
	trimRight: trimRight,

	words: words,
	lines: lines,

	toUpper: toUpper,
	toLower: toLower,

	any: F2(any),
	all: F2(all),

	contains: F2(contains),
	startsWith: F2(startsWith),
	endsWith: F2(endsWith),
	indexes: F2(indexes),

	toInt: toInt,
	toFloat: toFloat,
	toList: toList,
	fromList: fromList
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Char = function() {

return {
	fromCode: function(c) { return _elm_lang$core$Native_Utils.chr(String.fromCharCode(c)); },
	toCode: function(c) { return c.charCodeAt(0); },
	toUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toUpperCase()); },
	toLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLowerCase()); },
	toLocaleUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase()); },
	toLocaleLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase()); }
};

}();
var _elm_lang$core$Char$fromCode = _elm_lang$core$Native_Char.fromCode;
var _elm_lang$core$Char$toCode = _elm_lang$core$Native_Char.toCode;
var _elm_lang$core$Char$toLocaleLower = _elm_lang$core$Native_Char.toLocaleLower;
var _elm_lang$core$Char$toLocaleUpper = _elm_lang$core$Native_Char.toLocaleUpper;
var _elm_lang$core$Char$toLower = _elm_lang$core$Native_Char.toLower;
var _elm_lang$core$Char$toUpper = _elm_lang$core$Native_Char.toUpper;
var _elm_lang$core$Char$isBetween = F3(
	function (low, high, $char) {
		var code = _elm_lang$core$Char$toCode($char);
		return (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(low)) > -1) && (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(high)) < 1);
	});
var _elm_lang$core$Char$isUpper = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('A'),
	_elm_lang$core$Native_Utils.chr('Z'));
var _elm_lang$core$Char$isLower = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('a'),
	_elm_lang$core$Native_Utils.chr('z'));
var _elm_lang$core$Char$isDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('9'));
var _elm_lang$core$Char$isOctDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('7'));
var _elm_lang$core$Char$isHexDigit = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('a'),
		_elm_lang$core$Native_Utils.chr('f'),
		$char) || A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('A'),
		_elm_lang$core$Native_Utils.chr('F'),
		$char));
};

var _elm_lang$core$Result$toMaybe = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$Result$withDefault = F2(
	function (def, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return _p1._0;
		} else {
			return def;
		}
	});
var _elm_lang$core$Result$Err = function (a) {
	return {ctor: 'Err', _0: a};
};
var _elm_lang$core$Result$andThen = F2(
	function (callback, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return callback(_p2._0);
		} else {
			return _elm_lang$core$Result$Err(_p2._0);
		}
	});
var _elm_lang$core$Result$Ok = function (a) {
	return {ctor: 'Ok', _0: a};
};
var _elm_lang$core$Result$map = F2(
	function (func, ra) {
		var _p3 = ra;
		if (_p3.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				func(_p3._0));
		} else {
			return _elm_lang$core$Result$Err(_p3._0);
		}
	});
var _elm_lang$core$Result$map2 = F3(
	function (func, ra, rb) {
		var _p4 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p4._0.ctor === 'Ok') {
			if (_p4._1.ctor === 'Ok') {
				return _elm_lang$core$Result$Ok(
					A2(func, _p4._0._0, _p4._1._0));
			} else {
				return _elm_lang$core$Result$Err(_p4._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p4._0._0);
		}
	});
var _elm_lang$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		var _p5 = {ctor: '_Tuple3', _0: ra, _1: rb, _2: rc};
		if (_p5._0.ctor === 'Ok') {
			if (_p5._1.ctor === 'Ok') {
				if (_p5._2.ctor === 'Ok') {
					return _elm_lang$core$Result$Ok(
						A3(func, _p5._0._0, _p5._1._0, _p5._2._0));
				} else {
					return _elm_lang$core$Result$Err(_p5._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p5._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p5._0._0);
		}
	});
var _elm_lang$core$Result$map4 = F5(
	function (func, ra, rb, rc, rd) {
		var _p6 = {ctor: '_Tuple4', _0: ra, _1: rb, _2: rc, _3: rd};
		if (_p6._0.ctor === 'Ok') {
			if (_p6._1.ctor === 'Ok') {
				if (_p6._2.ctor === 'Ok') {
					if (_p6._3.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							A4(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0));
					} else {
						return _elm_lang$core$Result$Err(_p6._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p6._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p6._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p6._0._0);
		}
	});
var _elm_lang$core$Result$map5 = F6(
	function (func, ra, rb, rc, rd, re) {
		var _p7 = {ctor: '_Tuple5', _0: ra, _1: rb, _2: rc, _3: rd, _4: re};
		if (_p7._0.ctor === 'Ok') {
			if (_p7._1.ctor === 'Ok') {
				if (_p7._2.ctor === 'Ok') {
					if (_p7._3.ctor === 'Ok') {
						if (_p7._4.ctor === 'Ok') {
							return _elm_lang$core$Result$Ok(
								A5(func, _p7._0._0, _p7._1._0, _p7._2._0, _p7._3._0, _p7._4._0));
						} else {
							return _elm_lang$core$Result$Err(_p7._4._0);
						}
					} else {
						return _elm_lang$core$Result$Err(_p7._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p7._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p7._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p7._0._0);
		}
	});
var _elm_lang$core$Result$mapError = F2(
	function (f, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(_p8._0);
		} else {
			return _elm_lang$core$Result$Err(
				f(_p8._0));
		}
	});
var _elm_lang$core$Result$fromMaybe = F2(
	function (err, maybe) {
		var _p9 = maybe;
		if (_p9.ctor === 'Just') {
			return _elm_lang$core$Result$Ok(_p9._0);
		} else {
			return _elm_lang$core$Result$Err(err);
		}
	});

var _elm_lang$core$String$fromList = _elm_lang$core$Native_String.fromList;
var _elm_lang$core$String$toList = _elm_lang$core$Native_String.toList;
var _elm_lang$core$String$toFloat = _elm_lang$core$Native_String.toFloat;
var _elm_lang$core$String$toInt = _elm_lang$core$Native_String.toInt;
var _elm_lang$core$String$indices = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$indexes = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$endsWith = _elm_lang$core$Native_String.endsWith;
var _elm_lang$core$String$startsWith = _elm_lang$core$Native_String.startsWith;
var _elm_lang$core$String$contains = _elm_lang$core$Native_String.contains;
var _elm_lang$core$String$all = _elm_lang$core$Native_String.all;
var _elm_lang$core$String$any = _elm_lang$core$Native_String.any;
var _elm_lang$core$String$toLower = _elm_lang$core$Native_String.toLower;
var _elm_lang$core$String$toUpper = _elm_lang$core$Native_String.toUpper;
var _elm_lang$core$String$lines = _elm_lang$core$Native_String.lines;
var _elm_lang$core$String$words = _elm_lang$core$Native_String.words;
var _elm_lang$core$String$trimRight = _elm_lang$core$Native_String.trimRight;
var _elm_lang$core$String$trimLeft = _elm_lang$core$Native_String.trimLeft;
var _elm_lang$core$String$trim = _elm_lang$core$Native_String.trim;
var _elm_lang$core$String$padRight = _elm_lang$core$Native_String.padRight;
var _elm_lang$core$String$padLeft = _elm_lang$core$Native_String.padLeft;
var _elm_lang$core$String$pad = _elm_lang$core$Native_String.pad;
var _elm_lang$core$String$dropRight = _elm_lang$core$Native_String.dropRight;
var _elm_lang$core$String$dropLeft = _elm_lang$core$Native_String.dropLeft;
var _elm_lang$core$String$right = _elm_lang$core$Native_String.right;
var _elm_lang$core$String$left = _elm_lang$core$Native_String.left;
var _elm_lang$core$String$slice = _elm_lang$core$Native_String.slice;
var _elm_lang$core$String$repeat = _elm_lang$core$Native_String.repeat;
var _elm_lang$core$String$join = _elm_lang$core$Native_String.join;
var _elm_lang$core$String$split = _elm_lang$core$Native_String.split;
var _elm_lang$core$String$foldr = _elm_lang$core$Native_String.foldr;
var _elm_lang$core$String$foldl = _elm_lang$core$Native_String.foldl;
var _elm_lang$core$String$reverse = _elm_lang$core$Native_String.reverse;
var _elm_lang$core$String$filter = _elm_lang$core$Native_String.filter;
var _elm_lang$core$String$map = _elm_lang$core$Native_String.map;
var _elm_lang$core$String$length = _elm_lang$core$Native_String.length;
var _elm_lang$core$String$concat = _elm_lang$core$Native_String.concat;
var _elm_lang$core$String$append = _elm_lang$core$Native_String.append;
var _elm_lang$core$String$uncons = _elm_lang$core$Native_String.uncons;
var _elm_lang$core$String$cons = _elm_lang$core$Native_String.cons;
var _elm_lang$core$String$fromChar = function ($char) {
	return A2(_elm_lang$core$String$cons, $char, '');
};
var _elm_lang$core$String$isEmpty = _elm_lang$core$Native_String.isEmpty;

var _elm_lang$core$Dict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_elm_lang$core$Dict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _elm_lang$core$Dict$keys = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$values = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$toList = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_elm_lang$core$Dict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _elm_lang$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _p2) {
				stepState:
				while (true) {
					var _p3 = _p2;
					var _p9 = _p3._1;
					var _p8 = _p3._0;
					var _p4 = _p8;
					if (_p4.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: _p8,
							_1: A3(rightStep, rKey, rValue, _p9)
						};
					} else {
						var _p7 = _p4._1;
						var _p6 = _p4._0._1;
						var _p5 = _p4._0._0;
						if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) < 0) {
							var _v10 = rKey,
								_v11 = rValue,
								_v12 = {
								ctor: '_Tuple2',
								_0: _p7,
								_1: A3(leftStep, _p5, _p6, _p9)
							};
							rKey = _v10;
							rValue = _v11;
							_p2 = _v12;
							continue stepState;
						} else {
							if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) > 0) {
								return {
									ctor: '_Tuple2',
									_0: _p8,
									_1: A3(rightStep, rKey, rValue, _p9)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _p7,
									_1: A4(bothStep, _p5, _p6, rValue, _p9)
								};
							}
						}
					}
				}
			});
		var _p10 = A3(
			_elm_lang$core$Dict$foldl,
			stepState,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Dict$toList(leftDict),
				_1: initialResult
			},
			rightDict);
		var leftovers = _p10._0;
		var intermediateResult = _p10._1;
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p11, result) {
					var _p12 = _p11;
					return A3(leftStep, _p12._0, _p12._1, result);
				}),
			intermediateResult,
			leftovers);
	});
var _elm_lang$core$Dict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Debug.crash(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/core/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _elm_lang$core$Dict$isBBlack = function (dict) {
	var _p13 = dict;
	_v14_2:
	do {
		if (_p13.ctor === 'RBNode_elm_builtin') {
			if (_p13._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v14_2;
			}
		} else {
			if (_p13._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v14_2;
			}
		}
	} while(false);
	return false;
};
var _elm_lang$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p14 = dict;
			if (_p14.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v16 = A2(_elm_lang$core$Dict$sizeHelp, n + 1, _p14._4),
					_v17 = _p14._3;
				n = _v16;
				dict = _v17;
				continue sizeHelp;
			}
		}
	});
var _elm_lang$core$Dict$size = function (dict) {
	return A2(_elm_lang$core$Dict$sizeHelp, 0, dict);
};
var _elm_lang$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			var _p15 = dict;
			if (_p15.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p16 = A2(_elm_lang$core$Basics$compare, targetKey, _p15._1);
				switch (_p16.ctor) {
					case 'LT':
						var _v20 = targetKey,
							_v21 = _p15._3;
						targetKey = _v20;
						dict = _v21;
						continue get;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p15._2);
					default:
						var _v22 = targetKey,
							_v23 = _p15._4;
						targetKey = _v22;
						dict = _v23;
						continue get;
				}
			}
		}
	});
var _elm_lang$core$Dict$member = F2(
	function (key, dict) {
		var _p17 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p17.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _elm_lang$core$Dict$maxWithDefault = F3(
	function (k, v, r) {
		maxWithDefault:
		while (true) {
			var _p18 = r;
			if (_p18.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: k, _1: v};
			} else {
				var _v26 = _p18._1,
					_v27 = _p18._2,
					_v28 = _p18._4;
				k = _v26;
				v = _v27;
				r = _v28;
				continue maxWithDefault;
			}
		}
	});
var _elm_lang$core$Dict$NBlack = {ctor: 'NBlack'};
var _elm_lang$core$Dict$BBlack = {ctor: 'BBlack'};
var _elm_lang$core$Dict$Black = {ctor: 'Black'};
var _elm_lang$core$Dict$blackish = function (t) {
	var _p19 = t;
	if (_p19.ctor === 'RBNode_elm_builtin') {
		var _p20 = _p19._0;
		return _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$Black) || _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$BBlack);
	} else {
		return true;
	}
};
var _elm_lang$core$Dict$Red = {ctor: 'Red'};
var _elm_lang$core$Dict$moreBlack = function (color) {
	var _p21 = color;
	switch (_p21.ctor) {
		case 'Black':
			return _elm_lang$core$Dict$BBlack;
		case 'Red':
			return _elm_lang$core$Dict$Black;
		case 'NBlack':
			return _elm_lang$core$Dict$Red;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a double black node more black!');
	}
};
var _elm_lang$core$Dict$lessBlack = function (color) {
	var _p22 = color;
	switch (_p22.ctor) {
		case 'BBlack':
			return _elm_lang$core$Dict$Black;
		case 'Black':
			return _elm_lang$core$Dict$Red;
		case 'Red':
			return _elm_lang$core$Dict$NBlack;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a negative black node less black!');
	}
};
var _elm_lang$core$Dict$LBBlack = {ctor: 'LBBlack'};
var _elm_lang$core$Dict$LBlack = {ctor: 'LBlack'};
var _elm_lang$core$Dict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _elm_lang$core$Dict$empty = _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
var _elm_lang$core$Dict$isEmpty = function (dict) {
	return _elm_lang$core$Native_Utils.eq(dict, _elm_lang$core$Dict$empty);
};
var _elm_lang$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Dict$ensureBlackRoot = function (dict) {
	var _p23 = dict;
	if ((_p23.ctor === 'RBNode_elm_builtin') && (_p23._0.ctor === 'Red')) {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	} else {
		return dict;
	}
};
var _elm_lang$core$Dict$lessBlackTree = function (dict) {
	var _p24 = dict;
	if (_p24.ctor === 'RBNode_elm_builtin') {
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$lessBlack(_p24._0),
			_p24._1,
			_p24._2,
			_p24._3,
			_p24._4);
	} else {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	}
};
var _elm_lang$core$Dict$balancedTree = function (col) {
	return function (xk) {
		return function (xv) {
			return function (yk) {
				return function (yv) {
					return function (zk) {
						return function (zv) {
							return function (a) {
								return function (b) {
									return function (c) {
										return function (d) {
											return A5(
												_elm_lang$core$Dict$RBNode_elm_builtin,
												_elm_lang$core$Dict$lessBlack(col),
												yk,
												yv,
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, xk, xv, a, b),
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, zk, zv, c, d));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$core$Dict$blacken = function (t) {
	var _p25 = t;
	if (_p25.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p25._1, _p25._2, _p25._3, _p25._4);
	}
};
var _elm_lang$core$Dict$redden = function (t) {
	var _p26 = t;
	if (_p26.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Debug.crash('can\'t make a Leaf red');
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, _p26._1, _p26._2, _p26._3, _p26._4);
	}
};
var _elm_lang$core$Dict$balanceHelp = function (tree) {
	var _p27 = tree;
	_v36_6:
	do {
		_v36_5:
		do {
			_v36_4:
			do {
				_v36_3:
				do {
					_v36_2:
					do {
						_v36_1:
						do {
							_v36_0:
							do {
								if (_p27.ctor === 'RBNode_elm_builtin') {
									if (_p27._3.ctor === 'RBNode_elm_builtin') {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._3._0.ctor) {
												case 'Red':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																		break _v36_2;
																	} else {
																		if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																			break _v36_3;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															}
														case 'NBlack':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																		break _v36_4;
																	} else {
																		break _v36_6;
																	}
																}
															}
														default:
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	break _v36_6;
																}
															}
													}
												case 'NBlack':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															}
														case 'NBlack':
															if (_p27._0.ctor === 'BBlack') {
																if ((((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																	break _v36_4;
																} else {
																	if ((((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															} else {
																break _v36_6;
															}
														default:
															if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																break _v36_5;
															} else {
																break _v36_6;
															}
													}
												default:
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	break _v36_6;
																}
															}
														case 'NBlack':
															if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																break _v36_4;
															} else {
																break _v36_6;
															}
														default:
															break _v36_6;
													}
											}
										} else {
											switch (_p27._3._0.ctor) {
												case 'Red':
													if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
														break _v36_0;
													} else {
														if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
															break _v36_1;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
														break _v36_5;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										}
									} else {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._4._0.ctor) {
												case 'Red':
													if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
														break _v36_2;
													} else {
														if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
															break _v36_3;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
														break _v36_4;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										} else {
											break _v36_6;
										}
									}
								} else {
									break _v36_6;
								}
							} while(false);
							return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);
						} while(false);
						return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);
					} while(false);
					return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);
				} while(false);
				return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);
			} while(false);
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_elm_lang$core$Dict$Black,
				_p27._4._3._1,
				_p27._4._3._2,
				A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3),
				A5(
					_elm_lang$core$Dict$balance,
					_elm_lang$core$Dict$Black,
					_p27._4._1,
					_p27._4._2,
					_p27._4._3._4,
					_elm_lang$core$Dict$redden(_p27._4._4)));
		} while(false);
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$Black,
			_p27._3._4._1,
			_p27._3._4._2,
			A5(
				_elm_lang$core$Dict$balance,
				_elm_lang$core$Dict$Black,
				_p27._3._1,
				_p27._3._2,
				_elm_lang$core$Dict$redden(_p27._3._3),
				_p27._3._4._3),
			A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));
	} while(false);
	return tree;
};
var _elm_lang$core$Dict$balance = F5(
	function (c, k, v, l, r) {
		var tree = A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
		return _elm_lang$core$Dict$blackish(tree) ? _elm_lang$core$Dict$balanceHelp(tree) : tree;
	});
var _elm_lang$core$Dict$bubble = F5(
	function (c, k, v, l, r) {
		return (_elm_lang$core$Dict$isBBlack(l) || _elm_lang$core$Dict$isBBlack(r)) ? A5(
			_elm_lang$core$Dict$balance,
			_elm_lang$core$Dict$moreBlack(c),
			k,
			v,
			_elm_lang$core$Dict$lessBlackTree(l),
			_elm_lang$core$Dict$lessBlackTree(r)) : A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _elm_lang$core$Dict$removeMax = F5(
	function (c, k, v, l, r) {
		var _p28 = r;
		if (_p28.ctor === 'RBEmpty_elm_builtin') {
			return A3(_elm_lang$core$Dict$rem, c, l, r);
		} else {
			return A5(
				_elm_lang$core$Dict$bubble,
				c,
				k,
				v,
				l,
				A5(_elm_lang$core$Dict$removeMax, _p28._0, _p28._1, _p28._2, _p28._3, _p28._4));
		}
	});
var _elm_lang$core$Dict$rem = F3(
	function (color, left, right) {
		var _p29 = {ctor: '_Tuple2', _0: left, _1: right};
		if (_p29._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p30 = color;
				switch (_p30.ctor) {
					case 'Red':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
					case 'Black':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBBlack);
					default:
						return _elm_lang$core$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p33 = _p29._1._0;
				var _p32 = _p29._0._0;
				var _p31 = {ctor: '_Tuple3', _0: color, _1: _p32, _2: _p33};
				if ((((_p31.ctor === '_Tuple3') && (_p31._0.ctor === 'Black')) && (_p31._1.ctor === 'LBlack')) && (_p31._2.ctor === 'Red')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._1._1, _p29._1._2, _p29._1._3, _p29._1._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/LBlack/Red',
						color,
						_elm_lang$core$Basics$toString(_p32),
						_elm_lang$core$Basics$toString(_p33));
				}
			}
		} else {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p36 = _p29._1._0;
				var _p35 = _p29._0._0;
				var _p34 = {ctor: '_Tuple3', _0: color, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'Red')) && (_p34._2.ctor === 'LBlack')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._0._1, _p29._0._2, _p29._0._3, _p29._0._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/Red/LBlack',
						color,
						_elm_lang$core$Basics$toString(_p35),
						_elm_lang$core$Basics$toString(_p36));
				}
			} else {
				var _p40 = _p29._0._2;
				var _p39 = _p29._0._4;
				var _p38 = _p29._0._1;
				var newLeft = A5(_elm_lang$core$Dict$removeMax, _p29._0._0, _p38, _p40, _p29._0._3, _p39);
				var _p37 = A3(_elm_lang$core$Dict$maxWithDefault, _p38, _p40, _p39);
				var k = _p37._0;
				var v = _p37._1;
				return A5(_elm_lang$core$Dict$bubble, color, k, v, newLeft, right);
			}
		}
	});
var _elm_lang$core$Dict$map = F2(
	function (f, dict) {
		var _p41 = dict;
		if (_p41.ctor === 'RBEmpty_elm_builtin') {
			return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
		} else {
			var _p42 = _p41._1;
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_p41._0,
				_p42,
				A2(f, _p42, _p41._2),
				A2(_elm_lang$core$Dict$map, f, _p41._3),
				A2(_elm_lang$core$Dict$map, f, _p41._4));
		}
	});
var _elm_lang$core$Dict$Same = {ctor: 'Same'};
var _elm_lang$core$Dict$Remove = {ctor: 'Remove'};
var _elm_lang$core$Dict$Insert = {ctor: 'Insert'};
var _elm_lang$core$Dict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p43 = dict;
			if (_p43.ctor === 'RBEmpty_elm_builtin') {
				var _p44 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p44.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Dict$Same, _1: _elm_lang$core$Dict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Dict$Insert,
						_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, k, _p44._0, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty)
					};
				}
			} else {
				var _p55 = _p43._2;
				var _p54 = _p43._4;
				var _p53 = _p43._3;
				var _p52 = _p43._1;
				var _p51 = _p43._0;
				var _p45 = A2(_elm_lang$core$Basics$compare, k, _p52);
				switch (_p45.ctor) {
					case 'EQ':
						var _p46 = alter(
							_elm_lang$core$Maybe$Just(_p55));
						if (_p46.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Remove,
								_1: A3(_elm_lang$core$Dict$rem, _p51, _p53, _p54)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Same,
								_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p46._0, _p53, _p54)
							};
						}
					case 'LT':
						var _p47 = up(_p53);
						var flag = _p47._0;
						var newLeft = _p47._1;
						var _p48 = flag;
						switch (_p48.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, newLeft, _p54)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, newLeft, _p54)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, newLeft, _p54)
								};
						}
					default:
						var _p49 = up(_p54);
						var flag = _p49._0;
						var newRight = _p49._1;
						var _p50 = flag;
						switch (_p50.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, _p53, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, _p53, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, _p53, newRight)
								};
						}
				}
			}
		};
		var _p56 = up(dict);
		var flag = _p56._0;
		var updatedDict = _p56._1;
		var _p57 = flag;
		switch (_p57.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _elm_lang$core$Dict$ensureBlackRoot(updatedDict);
			default:
				return _elm_lang$core$Dict$blacken(updatedDict);
		}
	});
var _elm_lang$core$Dict$insert = F3(
	function (key, value, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _elm_lang$core$Dict$singleton = F2(
	function (key, value) {
		return A3(_elm_lang$core$Dict$insert, key, value, _elm_lang$core$Dict$empty);
	});
var _elm_lang$core$Dict$union = F2(
	function (t1, t2) {
		return A3(_elm_lang$core$Dict$foldl, _elm_lang$core$Dict$insert, t2, t1);
	});
var _elm_lang$core$Dict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_elm_lang$core$Dict$insert, key, value, dict) : dict;
			});
		return A3(_elm_lang$core$Dict$foldl, add, _elm_lang$core$Dict$empty, dictionary);
	});
var _elm_lang$core$Dict$intersect = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (k, _p58) {
					return A2(_elm_lang$core$Dict$member, k, t2);
				}),
			t1);
	});
var _elm_lang$core$Dict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p59) {
				var _p60 = _p59;
				var _p62 = _p60._1;
				var _p61 = _p60._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_elm_lang$core$Dict$insert, key, value, _p61),
					_1: _p62
				} : {
					ctor: '_Tuple2',
					_0: _p61,
					_1: A3(_elm_lang$core$Dict$insert, key, value, _p62)
				};
			});
		return A3(
			_elm_lang$core$Dict$foldl,
			add,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty},
			dict);
	});
var _elm_lang$core$Dict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_elm_lang$core$Dict$insert, _p64._0, _p64._1, dict);
			}),
		_elm_lang$core$Dict$empty,
		assocs);
};
var _elm_lang$core$Dict$remove = F2(
	function (key, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _elm_lang$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2(_elm_lang$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});

//import Maybe, Native.Array, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_Json = function() {


// CORE DECODERS

function succeed(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'succeed',
		msg: msg
	};
}

function fail(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'fail',
		msg: msg
	};
}

function decodePrimitive(tag)
{
	return {
		ctor: '<decoder>',
		tag: tag
	};
}

function decodeContainer(tag, decoder)
{
	return {
		ctor: '<decoder>',
		tag: tag,
		decoder: decoder
	};
}

function decodeNull(value)
{
	return {
		ctor: '<decoder>',
		tag: 'null',
		value: value
	};
}

function decodeField(field, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'field',
		field: field,
		decoder: decoder
	};
}

function decodeIndex(index, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'index',
		index: index,
		decoder: decoder
	};
}

function decodeKeyValuePairs(decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'key-value',
		decoder: decoder
	};
}

function mapMany(f, decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'map-many',
		func: f,
		decoders: decoders
	};
}

function andThen(callback, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'andThen',
		decoder: decoder,
		callback: callback
	};
}

function oneOf(decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'oneOf',
		decoders: decoders
	};
}


// DECODING OBJECTS

function map1(f, d1)
{
	return mapMany(f, [d1]);
}

function map2(f, d1, d2)
{
	return mapMany(f, [d1, d2]);
}

function map3(f, d1, d2, d3)
{
	return mapMany(f, [d1, d2, d3]);
}

function map4(f, d1, d2, d3, d4)
{
	return mapMany(f, [d1, d2, d3, d4]);
}

function map5(f, d1, d2, d3, d4, d5)
{
	return mapMany(f, [d1, d2, d3, d4, d5]);
}

function map6(f, d1, d2, d3, d4, d5, d6)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6]);
}

function map7(f, d1, d2, d3, d4, d5, d6, d7)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
}

function map8(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}


// DECODE HELPERS

function ok(value)
{
	return { tag: 'ok', value: value };
}

function badPrimitive(type, value)
{
	return { tag: 'primitive', type: type, value: value };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badField(field, nestedProblems)
{
	return { tag: 'field', field: field, rest: nestedProblems };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badOneOf(problems)
{
	return { tag: 'oneOf', problems: problems };
}

function bad(msg)
{
	return { tag: 'fail', msg: msg };
}

function badToString(problem)
{
	var context = '_';
	while (problem)
	{
		switch (problem.tag)
		{
			case 'primitive':
				return 'Expecting ' + problem.type
					+ (context === '_' ? '' : ' at ' + context)
					+ ' but instead got: ' + jsToString(problem.value);

			case 'index':
				context += '[' + problem.index + ']';
				problem = problem.rest;
				break;

			case 'field':
				context += '.' + problem.field;
				problem = problem.rest;
				break;

			case 'oneOf':
				var problems = problem.problems;
				for (var i = 0; i < problems.length; i++)
				{
					problems[i] = badToString(problems[i]);
				}
				return 'I ran into the following problems'
					+ (context === '_' ? '' : ' at ' + context)
					+ ':\n\n' + problems.join('\n');

			case 'fail':
				return 'I ran into a `fail` decoder'
					+ (context === '_' ? '' : ' at ' + context)
					+ ': ' + problem.msg;
		}
	}
}

function jsToString(value)
{
	return value === undefined
		? 'undefined'
		: JSON.stringify(value);
}


// DECODE

function runOnString(decoder, string)
{
	var json;
	try
	{
		json = JSON.parse(string);
	}
	catch (e)
	{
		return _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);
	}
	return run(decoder, json);
}

function run(decoder, value)
{
	var result = runHelp(decoder, value);
	return (result.tag === 'ok')
		? _elm_lang$core$Result$Ok(result.value)
		: _elm_lang$core$Result$Err(badToString(result));
}

function runHelp(decoder, value)
{
	switch (decoder.tag)
	{
		case 'bool':
			return (typeof value === 'boolean')
				? ok(value)
				: badPrimitive('a Bool', value);

		case 'int':
			if (typeof value !== 'number') {
				return badPrimitive('an Int', value);
			}

			if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
				return ok(value);
			}

			if (isFinite(value) && !(value % 1)) {
				return ok(value);
			}

			return badPrimitive('an Int', value);

		case 'float':
			return (typeof value === 'number')
				? ok(value)
				: badPrimitive('a Float', value);

		case 'string':
			return (typeof value === 'string')
				? ok(value)
				: (value instanceof String)
					? ok(value + '')
					: badPrimitive('a String', value);

		case 'null':
			return (value === null)
				? ok(decoder.value)
				: badPrimitive('null', value);

		case 'value':
			return ok(value);

		case 'list':
			if (!(value instanceof Array))
			{
				return badPrimitive('a List', value);
			}

			var list = _elm_lang$core$Native_List.Nil;
			for (var i = value.length; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result)
				}
				list = _elm_lang$core$Native_List.Cons(result.value, list);
			}
			return ok(list);

		case 'array':
			if (!(value instanceof Array))
			{
				return badPrimitive('an Array', value);
			}

			var len = value.length;
			var array = new Array(len);
			for (var i = len; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result);
				}
				array[i] = result.value;
			}
			return ok(_elm_lang$core$Native_Array.fromJSArray(array));

		case 'maybe':
			var result = runHelp(decoder.decoder, value);
			return (result.tag === 'ok')
				? ok(_elm_lang$core$Maybe$Just(result.value))
				: ok(_elm_lang$core$Maybe$Nothing);

		case 'field':
			var field = decoder.field;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return badPrimitive('an object with a field named `' + field + '`', value);
			}

			var result = runHelp(decoder.decoder, value[field]);
			return (result.tag === 'ok') ? result : badField(field, result);

		case 'index':
			var index = decoder.index;
			if (!(value instanceof Array))
			{
				return badPrimitive('an array', value);
			}
			if (index >= value.length)
			{
				return badPrimitive('a longer array. Need index ' + index + ' but there are only ' + value.length + ' entries', value);
			}

			var result = runHelp(decoder.decoder, value[index]);
			return (result.tag === 'ok') ? result : badIndex(index, result);

		case 'key-value':
			if (typeof value !== 'object' || value === null || value instanceof Array)
			{
				return badPrimitive('an object', value);
			}

			var keyValuePairs = _elm_lang$core$Native_List.Nil;
			for (var key in value)
			{
				var result = runHelp(decoder.decoder, value[key]);
				if (result.tag !== 'ok')
				{
					return badField(key, result);
				}
				var pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);
				keyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);
			}
			return ok(keyValuePairs);

		case 'map-many':
			var answer = decoder.func;
			var decoders = decoder.decoders;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = runHelp(decoders[i], value);
				if (result.tag !== 'ok')
				{
					return result;
				}
				answer = answer(result.value);
			}
			return ok(answer);

		case 'andThen':
			var result = runHelp(decoder.decoder, value);
			return (result.tag !== 'ok')
				? result
				: runHelp(decoder.callback(result.value), value);

		case 'oneOf':
			var errors = [];
			var temp = decoder.decoders;
			while (temp.ctor !== '[]')
			{
				var result = runHelp(temp._0, value);

				if (result.tag === 'ok')
				{
					return result;
				}

				errors.push(result);

				temp = temp._1;
			}
			return badOneOf(errors);

		case 'fail':
			return bad(decoder.msg);

		case 'succeed':
			return ok(decoder.msg);
	}
}


// EQUALITY

function equality(a, b)
{
	if (a === b)
	{
		return true;
	}

	if (a.tag !== b.tag)
	{
		return false;
	}

	switch (a.tag)
	{
		case 'succeed':
		case 'fail':
			return a.msg === b.msg;

		case 'bool':
		case 'int':
		case 'float':
		case 'string':
		case 'value':
			return true;

		case 'null':
			return a.value === b.value;

		case 'list':
		case 'array':
		case 'maybe':
		case 'key-value':
			return equality(a.decoder, b.decoder);

		case 'field':
			return a.field === b.field && equality(a.decoder, b.decoder);

		case 'index':
			return a.index === b.index && equality(a.decoder, b.decoder);

		case 'map-many':
			if (a.func !== b.func)
			{
				return false;
			}
			return listEquality(a.decoders, b.decoders);

		case 'andThen':
			return a.callback === b.callback && equality(a.decoder, b.decoder);

		case 'oneOf':
			return listEquality(a.decoders, b.decoders);
	}
}

function listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

function encode(indentLevel, value)
{
	return JSON.stringify(value, null, indentLevel);
}

function identity(value)
{
	return value;
}

function encodeObject(keyValuePairs)
{
	var obj = {};
	while (keyValuePairs.ctor !== '[]')
	{
		var pair = keyValuePairs._0;
		obj[pair._0] = pair._1;
		keyValuePairs = keyValuePairs._1;
	}
	return obj;
}

return {
	encode: F2(encode),
	runOnString: F2(runOnString),
	run: F2(run),

	decodeNull: decodeNull,
	decodePrimitive: decodePrimitive,
	decodeContainer: F2(decodeContainer),

	decodeField: F2(decodeField),
	decodeIndex: F2(decodeIndex),

	map1: F2(map1),
	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	map6: F7(map6),
	map7: F8(map7),
	map8: F9(map8),
	decodeKeyValuePairs: decodeKeyValuePairs,

	andThen: F2(andThen),
	fail: fail,
	succeed: succeed,
	oneOf: oneOf,

	identity: identity,
	encodeNull: null,
	encodeArray: _elm_lang$core$Native_Array.toJSArray,
	encodeList: _elm_lang$core$Native_List.toArray,
	encodeObject: encodeObject,

	equality: equality
};

}();

var _elm_lang$core$Json_Encode$list = _elm_lang$core$Native_Json.encodeList;
var _elm_lang$core$Json_Encode$array = _elm_lang$core$Native_Json.encodeArray;
var _elm_lang$core$Json_Encode$object = _elm_lang$core$Native_Json.encodeObject;
var _elm_lang$core$Json_Encode$null = _elm_lang$core$Native_Json.encodeNull;
var _elm_lang$core$Json_Encode$bool = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$float = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$int = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$string = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$encode = _elm_lang$core$Native_Json.encode;
var _elm_lang$core$Json_Encode$Value = {ctor: 'Value'};

var _elm_lang$core$Json_Decode$null = _elm_lang$core$Native_Json.decodeNull;
var _elm_lang$core$Json_Decode$value = _elm_lang$core$Native_Json.decodePrimitive('value');
var _elm_lang$core$Json_Decode$andThen = _elm_lang$core$Native_Json.andThen;
var _elm_lang$core$Json_Decode$fail = _elm_lang$core$Native_Json.fail;
var _elm_lang$core$Json_Decode$succeed = _elm_lang$core$Native_Json.succeed;
var _elm_lang$core$Json_Decode$lazy = function (thunk) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		thunk,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Json_Decode$decodeValue = _elm_lang$core$Native_Json.run;
var _elm_lang$core$Json_Decode$decodeString = _elm_lang$core$Native_Json.runOnString;
var _elm_lang$core$Json_Decode$map8 = _elm_lang$core$Native_Json.map8;
var _elm_lang$core$Json_Decode$map7 = _elm_lang$core$Native_Json.map7;
var _elm_lang$core$Json_Decode$map6 = _elm_lang$core$Native_Json.map6;
var _elm_lang$core$Json_Decode$map5 = _elm_lang$core$Native_Json.map5;
var _elm_lang$core$Json_Decode$map4 = _elm_lang$core$Native_Json.map4;
var _elm_lang$core$Json_Decode$map3 = _elm_lang$core$Native_Json.map3;
var _elm_lang$core$Json_Decode$map2 = _elm_lang$core$Native_Json.map2;
var _elm_lang$core$Json_Decode$map = _elm_lang$core$Native_Json.map1;
var _elm_lang$core$Json_Decode$oneOf = _elm_lang$core$Native_Json.oneOf;
var _elm_lang$core$Json_Decode$maybe = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'maybe', decoder);
};
var _elm_lang$core$Json_Decode$index = _elm_lang$core$Native_Json.decodeIndex;
var _elm_lang$core$Json_Decode$field = _elm_lang$core$Native_Json.decodeField;
var _elm_lang$core$Json_Decode$at = F2(
	function (fields, decoder) {
		return A3(_elm_lang$core$List$foldr, _elm_lang$core$Json_Decode$field, decoder, fields);
	});
var _elm_lang$core$Json_Decode$keyValuePairs = _elm_lang$core$Native_Json.decodeKeyValuePairs;
var _elm_lang$core$Json_Decode$dict = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Dict$fromList,
		_elm_lang$core$Json_Decode$keyValuePairs(decoder));
};
var _elm_lang$core$Json_Decode$array = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'array', decoder);
};
var _elm_lang$core$Json_Decode$list = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'list', decoder);
};
var _elm_lang$core$Json_Decode$nullable = function (decoder) {
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, decoder),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$core$Json_Decode$float = _elm_lang$core$Native_Json.decodePrimitive('float');
var _elm_lang$core$Json_Decode$int = _elm_lang$core$Native_Json.decodePrimitive('int');
var _elm_lang$core$Json_Decode$bool = _elm_lang$core$Native_Json.decodePrimitive('bool');
var _elm_lang$core$Json_Decode$string = _elm_lang$core$Native_Json.decodePrimitive('string');
var _elm_lang$core$Json_Decode$Decoder = {ctor: 'Decoder'};

var _elm_lang$core$Debug$crash = _elm_lang$core$Native_Debug.crash;
var _elm_lang$core$Debug$log = _elm_lang$core$Native_Debug.log;

var _elm_lang$core$Tuple$mapSecond = F2(
	function (func, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p1._0,
			_1: func(_p1._1)
		};
	});
var _elm_lang$core$Tuple$mapFirst = F2(
	function (func, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple2',
			_0: func(_p3._0),
			_1: _p3._1
		};
	});
var _elm_lang$core$Tuple$second = function (_p4) {
	var _p5 = _p4;
	return _p5._1;
};
var _elm_lang$core$Tuple$first = function (_p6) {
	var _p7 = _p6;
	return _p7._0;
};

//import //

var _elm_lang$core$Native_Platform = function() {


// PROGRAMS

function program(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flags !== 'undefined')
				{
					throw new Error(
						'The `' + moduleName + '` module does not need flags.\n'
						+ 'Call ' + moduleName + '.worker() with no arguments and you should be all set!'
					);
				}

				return initialize(
					impl.init,
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function programWithFlags(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flagDecoder === 'undefined')
				{
					throw new Error(
						'Are you trying to sneak a Never value into Elm? Trickster!\n'
						+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
						+ 'Use `program` instead if you do not want flags.'
					);
				}

				var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
				if (result.ctor === 'Err')
				{
					throw new Error(
						moduleName + '.worker(...) was called with an unexpected argument.\n'
						+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
						+ result._0
					);
				}

				return initialize(
					impl.init(result._0),
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function renderer(enqueue, _)
{
	return function(_) {};
}


// HTML TO PROGRAM

function htmlToProgram(vnode)
{
	var emptyBag = batch(_elm_lang$core$Native_List.Nil);
	var noChange = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		emptyBag
	);

	return _elm_lang$virtual_dom$VirtualDom$program({
		init: noChange,
		view: function(model) { return main; },
		update: F2(function(msg, model) { return noChange; }),
		subscriptions: function (model) { return emptyBag; }
	});
}


// INITIALIZE A PROGRAM

function initialize(init, update, subscriptions, renderer)
{
	// ambient state
	var managers = {};
	var updateView;

	// init and update state in main process
	var initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		var model = init._0;
		updateView = renderer(enqueue, model);
		var cmds = init._1;
		var subs = subscriptions(model);
		dispatchEffects(managers, cmds, subs);
		callback(_elm_lang$core$Native_Scheduler.succeed(model));
	});

	function onMessage(msg, model)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
			var results = A2(update, msg, model);
			model = results._0;
			updateView(model);
			var cmds = results._1;
			var subs = subscriptions(model);
			dispatchEffects(managers, cmds, subs);
			callback(_elm_lang$core$Native_Scheduler.succeed(model));
		});
	}

	var mainProcess = spawnLoop(initApp, onMessage);

	function enqueue(msg)
	{
		_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);
	}

	var ports = setupEffects(managers, enqueue);

	return ports ? { ports: ports } : {};
}


// EFFECT MANAGERS

var effectManagers = {};

function setupEffects(managers, callback)
{
	var ports;

	// setup all necessary effect managers
	for (var key in effectManagers)
	{
		var manager = effectManagers[key];

		if (manager.isForeign)
		{
			ports = ports || {};
			ports[key] = manager.tag === 'cmd'
				? setupOutgoingPort(key)
				: setupIncomingPort(key, callback);
		}

		managers[key] = makeManager(manager, callback);
	}

	return ports;
}

function makeManager(info, callback)
{
	var router = {
		main: callback,
		self: undefined
	};

	var tag = info.tag;
	var onEffects = info.onEffects;
	var onSelfMsg = info.onSelfMsg;

	function onMessage(msg, state)
	{
		if (msg.ctor === 'self')
		{
			return A3(onSelfMsg, router, msg._0, state);
		}

		var fx = msg._0;
		switch (tag)
		{
			case 'cmd':
				return A3(onEffects, router, fx.cmds, state);

			case 'sub':
				return A3(onEffects, router, fx.subs, state);

			case 'fx':
				return A4(onEffects, router, fx.cmds, fx.subs, state);
		}
	}

	var process = spawnLoop(info.init, onMessage);
	router.self = process;
	return process;
}

function sendToApp(router, msg)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		router.main(msg);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sendToSelf(router, msg)
{
	return A2(_elm_lang$core$Native_Scheduler.send, router.self, {
		ctor: 'self',
		_0: msg
	});
}


// HELPER for STATEFUL LOOPS

function spawnLoop(init, onMessage)
{
	var andThen = _elm_lang$core$Native_Scheduler.andThen;

	function loop(state)
	{
		var handleMsg = _elm_lang$core$Native_Scheduler.receive(function(msg) {
			return onMessage(msg, state);
		});
		return A2(andThen, loop, handleMsg);
	}

	var task = A2(andThen, loop, init);

	return _elm_lang$core$Native_Scheduler.rawSpawn(task);
}


// BAGS

function leaf(home)
{
	return function(value)
	{
		return {
			type: 'leaf',
			home: home,
			value: value
		};
	};
}

function batch(list)
{
	return {
		type: 'node',
		branches: list
	};
}

function map(tagger, bag)
{
	return {
		type: 'map',
		tagger: tagger,
		tree: bag
	}
}


// PIPE BAGS INTO EFFECT MANAGERS

function dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	gatherEffects(true, cmdBag, effectsDict, null);
	gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		var fx = home in effectsDict
			? effectsDict[home]
			: {
				cmds: _elm_lang$core$Native_List.Nil,
				subs: _elm_lang$core$Native_List.Nil
			};

		_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });
	}
}

function gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.type)
	{
		case 'leaf':
			var home = bag.home;
			var effect = toEffect(isCmd, home, taggers, bag.value);
			effectsDict[home] = insert(isCmd, effect, effectsDict[home]);
			return;

		case 'node':
			var list = bag.branches;
			while (list.ctor !== '[]')
			{
				gatherEffects(isCmd, list._0, effectsDict, taggers);
				list = list._1;
			}
			return;

		case 'map':
			gatherEffects(isCmd, bag.tree, effectsDict, {
				tagger: bag.tagger,
				rest: taggers
			});
			return;
	}
}

function toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		var temp = taggers;
		while (temp)
		{
			x = temp.tagger(x);
			temp = temp.rest;
		}
		return x;
	}

	var map = isCmd
		? effectManagers[home].cmdMap
		: effectManagers[home].subMap;

	return A2(map, applyTaggers, value)
}

function insert(isCmd, newEffect, effects)
{
	effects = effects || {
		cmds: _elm_lang$core$Native_List.Nil,
		subs: _elm_lang$core$Native_List.Nil
	};
	if (isCmd)
	{
		effects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);
		return effects;
	}
	effects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);
	return effects;
}


// PORTS

function checkPortName(name)
{
	if (name in effectManagers)
	{
		throw new Error('There can only be one port named `' + name + '`, but your program has multiple.');
	}
}


// OUTGOING PORTS

function outgoingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'cmd',
		cmdMap: outgoingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var outgoingPortMap = F2(function cmdMap(tagger, value) {
	return value;
});

function setupOutgoingPort(name)
{
	var subs = [];
	var converter = effectManagers[name].converter;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function onEffects(router, cmdList, state)
	{
		while (cmdList.ctor !== '[]')
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = converter(cmdList._0);
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
			cmdList = cmdList._1;
		}
		return init;
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}


// INCOMING PORTS

function incomingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'sub',
		subMap: incomingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var incomingPortMap = F2(function subMap(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});

function setupIncomingPort(name, callback)
{
	var sentBeforeInit = [];
	var subs = _elm_lang$core$Native_List.Nil;
	var converter = effectManagers[name].converter;
	var currentOnEffects = preInitOnEffects;
	var currentSend = preInitSend;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function preInitOnEffects(router, subList, state)
	{
		var postInitResult = postInitOnEffects(router, subList, state);

		for(var i = 0; i < sentBeforeInit.length; i++)
		{
			postInitSend(sentBeforeInit[i]);
		}

		sentBeforeInit = null; // to release objects held in queue
		currentSend = postInitSend;
		currentOnEffects = postInitOnEffects;
		return postInitResult;
	}

	function postInitOnEffects(router, subList, state)
	{
		subs = subList;
		return init;
	}

	function onEffects(router, subList, state)
	{
		return currentOnEffects(router, subList, state);
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function preInitSend(value)
	{
		sentBeforeInit.push(value);
	}

	function postInitSend(value)
	{
		var temp = subs;
		while (temp.ctor !== '[]')
		{
			callback(temp._0(value));
			temp = temp._1;
		}
	}

	function send(incomingValue)
	{
		var result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, incomingValue);
		if (result.ctor === 'Err')
		{
			throw new Error('Trying to send an unexpected type of value through port `' + name + '`:\n' + result._0);
		}

		currentSend(result._0);
	}

	return { send: send };
}

return {
	// routers
	sendToApp: F2(sendToApp),
	sendToSelf: F2(sendToSelf),

	// global setup
	effectManagers: effectManagers,
	outgoingPort: outgoingPort,
	incomingPort: incomingPort,

	htmlToProgram: htmlToProgram,
	program: program,
	programWithFlags: programWithFlags,
	initialize: initialize,

	// effect bags
	leaf: leaf,
	batch: batch,
	map: F2(map)
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Scheduler = function() {

var MAX_STEPS = 10000;


// TASKS

function succeed(value)
{
	return {
		ctor: '_Task_succeed',
		value: value
	};
}

function fail(error)
{
	return {
		ctor: '_Task_fail',
		value: error
	};
}

function nativeBinding(callback)
{
	return {
		ctor: '_Task_nativeBinding',
		callback: callback,
		cancel: null
	};
}

function andThen(callback, task)
{
	return {
		ctor: '_Task_andThen',
		callback: callback,
		task: task
	};
}

function onError(callback, task)
{
	return {
		ctor: '_Task_onError',
		callback: callback,
		task: task
	};
}

function receive(callback)
{
	return {
		ctor: '_Task_receive',
		callback: callback
	};
}


// PROCESSES

function rawSpawn(task)
{
	var process = {
		ctor: '_Process',
		id: _elm_lang$core$Native_Utils.guid(),
		root: task,
		stack: null,
		mailbox: []
	};

	enqueue(process);

	return process;
}

function spawn(task)
{
	return nativeBinding(function(callback) {
		var process = rawSpawn(task);
		callback(succeed(process));
	});
}

function rawSend(process, msg)
{
	process.mailbox.push(msg);
	enqueue(process);
}

function send(process, msg)
{
	return nativeBinding(function(callback) {
		rawSend(process, msg);
		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function kill(process)
{
	return nativeBinding(function(callback) {
		var root = process.root;
		if (root.ctor === '_Task_nativeBinding' && root.cancel)
		{
			root.cancel();
		}

		process.root = null;

		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sleep(time)
{
	return nativeBinding(function(callback) {
		var id = setTimeout(function() {
			callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}


// STEP PROCESSES

function step(numSteps, process)
{
	while (numSteps < MAX_STEPS)
	{
		var ctor = process.root.ctor;

		if (ctor === '_Task_succeed')
		{
			while (process.stack && process.stack.ctor === '_Task_onError')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_fail')
		{
			while (process.stack && process.stack.ctor === '_Task_andThen')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_andThen')
		{
			process.stack = {
				ctor: '_Task_andThen',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_onError')
		{
			process.stack = {
				ctor: '_Task_onError',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_nativeBinding')
		{
			process.root.cancel = process.root.callback(function(newRoot) {
				process.root = newRoot;
				enqueue(process);
			});

			break;
		}

		if (ctor === '_Task_receive')
		{
			var mailbox = process.mailbox;
			if (mailbox.length === 0)
			{
				break;
			}

			process.root = process.root.callback(mailbox.shift());
			++numSteps;
			continue;
		}

		throw new Error(ctor);
	}

	if (numSteps < MAX_STEPS)
	{
		return numSteps + 1;
	}
	enqueue(process);

	return numSteps;
}


// WORK QUEUE

var working = false;
var workQueue = [];

function enqueue(process)
{
	workQueue.push(process);

	if (!working)
	{
		setTimeout(work, 0);
		working = true;
	}
}

function work()
{
	var numSteps = 0;
	var process;
	while (numSteps < MAX_STEPS && (process = workQueue.shift()))
	{
		if (process.root)
		{
			numSteps = step(numSteps, process);
		}
	}
	if (!process)
	{
		working = false;
		return;
	}
	setTimeout(work, 0);
}


return {
	succeed: succeed,
	fail: fail,
	nativeBinding: nativeBinding,
	andThen: F2(andThen),
	onError: F2(onError),
	receive: receive,

	spawn: spawn,
	kill: kill,
	sleep: sleep,
	send: F2(send),

	rawSpawn: rawSpawn,
	rawSend: rawSend
};

}();
var _elm_lang$core$Platform_Cmd$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Cmd$none = _elm_lang$core$Platform_Cmd$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Cmd_ops = _elm_lang$core$Platform_Cmd_ops || {};
_elm_lang$core$Platform_Cmd_ops['!'] = F2(
	function (model, commands) {
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(commands)
		};
	});
var _elm_lang$core$Platform_Cmd$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Cmd$Cmd = {ctor: 'Cmd'};

var _elm_lang$core$Platform_Sub$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Sub$none = _elm_lang$core$Platform_Sub$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Sub$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Sub$Sub = {ctor: 'Sub'};

var _elm_lang$core$Platform$hack = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Platform$sendToSelf = _elm_lang$core$Native_Platform.sendToSelf;
var _elm_lang$core$Platform$sendToApp = _elm_lang$core$Native_Platform.sendToApp;
var _elm_lang$core$Platform$programWithFlags = _elm_lang$core$Native_Platform.programWithFlags;
var _elm_lang$core$Platform$program = _elm_lang$core$Native_Platform.program;
var _elm_lang$core$Platform$Program = {ctor: 'Program'};
var _elm_lang$core$Platform$Task = {ctor: 'Task'};
var _elm_lang$core$Platform$ProcessId = {ctor: 'ProcessId'};
var _elm_lang$core$Platform$Router = {ctor: 'Router'};

var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode = _elm_lang$core$Json_Decode$succeed;
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$resolve = _elm_lang$core$Json_Decode$andThen(_elm_lang$core$Basics$identity);
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom = _elm_lang$core$Json_Decode$map2(
	F2(
		function (x, y) {
			return y(x);
		}));
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded = function (_p0) {
	return _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom(
		_elm_lang$core$Json_Decode$succeed(_p0));
};
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder = F3(
	function (pathDecoder, valDecoder, fallback) {
		var nullOr = function (decoder) {
			return _elm_lang$core$Json_Decode$oneOf(
				{
					ctor: '::',
					_0: decoder,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Json_Decode$null(fallback),
						_1: {ctor: '[]'}
					}
				});
		};
		var handleResult = function (input) {
			var _p1 = A2(_elm_lang$core$Json_Decode$decodeValue, pathDecoder, input);
			if (_p1.ctor === 'Ok') {
				var _p2 = A2(
					_elm_lang$core$Json_Decode$decodeValue,
					nullOr(valDecoder),
					_p1._0);
				if (_p2.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(_p2._0);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p2._0);
				}
			} else {
				return _elm_lang$core$Json_Decode$succeed(fallback);
			}
		};
		return A2(_elm_lang$core$Json_Decode$andThen, handleResult, _elm_lang$core$Json_Decode$value);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalAt = F4(
	function (path, valDecoder, fallback, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder,
				A2(_elm_lang$core$Json_Decode$at, path, _elm_lang$core$Json_Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder,
				A2(_elm_lang$core$Json_Decode$field, key, _elm_lang$core$Json_Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt = F3(
	function (path, valDecoder, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A2(_elm_lang$core$Json_Decode$at, path, valDecoder),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A2(_elm_lang$core$Json_Decode$field, key, valDecoder),
			decoder);
	});

//import Result //

var _elm_lang$core$Native_Date = function() {

function fromString(str)
{
	var date = new Date(str);
	return isNaN(date.getTime())
		? _elm_lang$core$Result$Err('Unable to parse \'' + str + '\' as a date. Dates must be in the ISO 8601 format.')
		: _elm_lang$core$Result$Ok(date);
}

var dayTable = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var monthTable =
	['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
	 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];


return {
	fromString: fromString,
	year: function(d) { return d.getFullYear(); },
	month: function(d) { return { ctor: monthTable[d.getMonth()] }; },
	day: function(d) { return d.getDate(); },
	hour: function(d) { return d.getHours(); },
	minute: function(d) { return d.getMinutes(); },
	second: function(d) { return d.getSeconds(); },
	millisecond: function(d) { return d.getMilliseconds(); },
	toTime: function(d) { return d.getTime(); },
	fromTime: function(t) { return new Date(t); },
	dayOfWeek: function(d) { return { ctor: dayTable[d.getDay()] }; }
};

}();
var _elm_lang$core$Task$onError = _elm_lang$core$Native_Scheduler.onError;
var _elm_lang$core$Task$andThen = _elm_lang$core$Native_Scheduler.andThen;
var _elm_lang$core$Task$spawnCmd = F2(
	function (router, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Scheduler.spawn(
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Platform$sendToApp(router),
				_p1._0));
	});
var _elm_lang$core$Task$fail = _elm_lang$core$Native_Scheduler.fail;
var _elm_lang$core$Task$mapError = F2(
	function (convert, task) {
		return A2(
			_elm_lang$core$Task$onError,
			function (_p2) {
				return _elm_lang$core$Task$fail(
					convert(_p2));
			},
			task);
	});
var _elm_lang$core$Task$succeed = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return _elm_lang$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var _elm_lang$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return _elm_lang$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map3 = F4(
	function (func, taskA, taskB, taskC) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return _elm_lang$core$Task$succeed(
									A3(func, a, b, c));
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map4 = F5(
	function (func, taskA, taskB, taskC, taskD) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return _elm_lang$core$Task$succeed(
											A4(func, a, b, c, d));
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map5 = F6(
	function (func, taskA, taskB, taskC, taskD, taskE) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Task$andThen,
											function (e) {
												return _elm_lang$core$Task$succeed(
													A5(func, a, b, c, d, e));
											},
											taskE);
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$sequence = function (tasks) {
	var _p3 = tasks;
	if (_p3.ctor === '[]') {
		return _elm_lang$core$Task$succeed(
			{ctor: '[]'});
	} else {
		return A3(
			_elm_lang$core$Task$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p3._0,
			_elm_lang$core$Task$sequence(_p3._1));
	}
};
var _elm_lang$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			_elm_lang$core$Task$map,
			function (_p4) {
				return {ctor: '_Tuple0'};
			},
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Task$spawnCmd(router),
					commands)));
	});
var _elm_lang$core$Task$init = _elm_lang$core$Task$succeed(
	{ctor: '_Tuple0'});
var _elm_lang$core$Task$onSelfMsg = F3(
	function (_p7, _p6, _p5) {
		return _elm_lang$core$Task$succeed(
			{ctor: '_Tuple0'});
	});
var _elm_lang$core$Task$command = _elm_lang$core$Native_Platform.leaf('Task');
var _elm_lang$core$Task$Perform = function (a) {
	return {ctor: 'Perform', _0: a};
};
var _elm_lang$core$Task$perform = F2(
	function (toMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(_elm_lang$core$Task$map, toMessage, task)));
	});
var _elm_lang$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(
					_elm_lang$core$Task$onError,
					function (_p8) {
						return _elm_lang$core$Task$succeed(
							resultToMessage(
								_elm_lang$core$Result$Err(_p8)));
					},
					A2(
						_elm_lang$core$Task$andThen,
						function (_p9) {
							return _elm_lang$core$Task$succeed(
								resultToMessage(
									_elm_lang$core$Result$Ok(_p9)));
						},
						task))));
	});
var _elm_lang$core$Task$cmdMap = F2(
	function (tagger, _p10) {
		var _p11 = _p10;
		return _elm_lang$core$Task$Perform(
			A2(_elm_lang$core$Task$map, tagger, _p11._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Task'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Task$init, onEffects: _elm_lang$core$Task$onEffects, onSelfMsg: _elm_lang$core$Task$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Task$cmdMap};

//import Native.Scheduler //

var _elm_lang$core$Native_Time = function() {

var now = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
{
	callback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));
});

function setInterval_(interval, task)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var id = setInterval(function() {
			_elm_lang$core$Native_Scheduler.rawSpawn(task);
		}, interval);

		return function() { clearInterval(id); };
	});
}

return {
	now: now,
	setInterval_: F2(setInterval_)
};

}();
var _elm_lang$core$Time$setInterval = _elm_lang$core$Native_Time.setInterval_;
var _elm_lang$core$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		var _p0 = intervals;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Task$succeed(processes);
		} else {
			var _p1 = _p0._0;
			var spawnRest = function (id) {
				return A3(
					_elm_lang$core$Time$spawnHelp,
					router,
					_p0._1,
					A3(_elm_lang$core$Dict$insert, _p1, id, processes));
			};
			var spawnTimer = _elm_lang$core$Native_Scheduler.spawn(
				A2(
					_elm_lang$core$Time$setInterval,
					_p1,
					A2(_elm_lang$core$Platform$sendToSelf, router, _p1)));
			return A2(_elm_lang$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var _elm_lang$core$Time$addMySub = F2(
	function (_p2, state) {
		var _p3 = _p2;
		var _p6 = _p3._1;
		var _p5 = _p3._0;
		var _p4 = A2(_elm_lang$core$Dict$get, _p5, state);
		if (_p4.ctor === 'Nothing') {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{
					ctor: '::',
					_0: _p6,
					_1: {ctor: '[]'}
				},
				state);
		} else {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{ctor: '::', _0: _p6, _1: _p4._0},
				state);
		}
	});
var _elm_lang$core$Time$inMilliseconds = function (t) {
	return t;
};
var _elm_lang$core$Time$millisecond = 1;
var _elm_lang$core$Time$second = 1000 * _elm_lang$core$Time$millisecond;
var _elm_lang$core$Time$minute = 60 * _elm_lang$core$Time$second;
var _elm_lang$core$Time$hour = 60 * _elm_lang$core$Time$minute;
var _elm_lang$core$Time$inHours = function (t) {
	return t / _elm_lang$core$Time$hour;
};
var _elm_lang$core$Time$inMinutes = function (t) {
	return t / _elm_lang$core$Time$minute;
};
var _elm_lang$core$Time$inSeconds = function (t) {
	return t / _elm_lang$core$Time$second;
};
var _elm_lang$core$Time$now = _elm_lang$core$Native_Time.now;
var _elm_lang$core$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _p7 = A2(_elm_lang$core$Dict$get, interval, state.taggers);
		if (_p7.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var tellTaggers = function (time) {
				return _elm_lang$core$Task$sequence(
					A2(
						_elm_lang$core$List$map,
						function (tagger) {
							return A2(
								_elm_lang$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						_p7._0));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p8) {
					return _elm_lang$core$Task$succeed(state);
				},
				A2(_elm_lang$core$Task$andThen, tellTaggers, _elm_lang$core$Time$now));
		}
	});
var _elm_lang$core$Time$subscription = _elm_lang$core$Native_Platform.leaf('Time');
var _elm_lang$core$Time$State = F2(
	function (a, b) {
		return {taggers: a, processes: b};
	});
var _elm_lang$core$Time$init = _elm_lang$core$Task$succeed(
	A2(_elm_lang$core$Time$State, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty));
var _elm_lang$core$Time$onEffects = F3(
	function (router, subs, _p9) {
		var _p10 = _p9;
		var rightStep = F3(
			function (_p12, id, _p11) {
				var _p13 = _p11;
				return {
					ctor: '_Tuple3',
					_0: _p13._0,
					_1: _p13._1,
					_2: A2(
						_elm_lang$core$Task$andThen,
						function (_p14) {
							return _p13._2;
						},
						_elm_lang$core$Native_Scheduler.kill(id))
				};
			});
		var bothStep = F4(
			function (interval, taggers, id, _p15) {
				var _p16 = _p15;
				return {
					ctor: '_Tuple3',
					_0: _p16._0,
					_1: A3(_elm_lang$core$Dict$insert, interval, id, _p16._1),
					_2: _p16._2
				};
			});
		var leftStep = F3(
			function (interval, taggers, _p17) {
				var _p18 = _p17;
				return {
					ctor: '_Tuple3',
					_0: {ctor: '::', _0: interval, _1: _p18._0},
					_1: _p18._1,
					_2: _p18._2
				};
			});
		var newTaggers = A3(_elm_lang$core$List$foldl, _elm_lang$core$Time$addMySub, _elm_lang$core$Dict$empty, subs);
		var _p19 = A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			_p10.processes,
			{
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Dict$empty,
				_2: _elm_lang$core$Task$succeed(
					{ctor: '_Tuple0'})
			});
		var spawnList = _p19._0;
		var existingDict = _p19._1;
		var killTask = _p19._2;
		return A2(
			_elm_lang$core$Task$andThen,
			function (newProcesses) {
				return _elm_lang$core$Task$succeed(
					A2(_elm_lang$core$Time$State, newTaggers, newProcesses));
			},
			A2(
				_elm_lang$core$Task$andThen,
				function (_p20) {
					return A3(_elm_lang$core$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var _elm_lang$core$Time$Every = F2(
	function (a, b) {
		return {ctor: 'Every', _0: a, _1: b};
	});
var _elm_lang$core$Time$every = F2(
	function (interval, tagger) {
		return _elm_lang$core$Time$subscription(
			A2(_elm_lang$core$Time$Every, interval, tagger));
	});
var _elm_lang$core$Time$subMap = F2(
	function (f, _p21) {
		var _p22 = _p21;
		return A2(
			_elm_lang$core$Time$Every,
			_p22._0,
			function (_p23) {
				return f(
					_p22._1(_p23));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Time'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Time$init, onEffects: _elm_lang$core$Time$onEffects, onSelfMsg: _elm_lang$core$Time$onSelfMsg, tag: 'sub', subMap: _elm_lang$core$Time$subMap};

var _elm_lang$core$Date$millisecond = _elm_lang$core$Native_Date.millisecond;
var _elm_lang$core$Date$second = _elm_lang$core$Native_Date.second;
var _elm_lang$core$Date$minute = _elm_lang$core$Native_Date.minute;
var _elm_lang$core$Date$hour = _elm_lang$core$Native_Date.hour;
var _elm_lang$core$Date$dayOfWeek = _elm_lang$core$Native_Date.dayOfWeek;
var _elm_lang$core$Date$day = _elm_lang$core$Native_Date.day;
var _elm_lang$core$Date$month = _elm_lang$core$Native_Date.month;
var _elm_lang$core$Date$year = _elm_lang$core$Native_Date.year;
var _elm_lang$core$Date$fromTime = _elm_lang$core$Native_Date.fromTime;
var _elm_lang$core$Date$toTime = _elm_lang$core$Native_Date.toTime;
var _elm_lang$core$Date$fromString = _elm_lang$core$Native_Date.fromString;
var _elm_lang$core$Date$now = A2(_elm_lang$core$Task$map, _elm_lang$core$Date$fromTime, _elm_lang$core$Time$now);
var _elm_lang$core$Date$Date = {ctor: 'Date'};
var _elm_lang$core$Date$Sun = {ctor: 'Sun'};
var _elm_lang$core$Date$Sat = {ctor: 'Sat'};
var _elm_lang$core$Date$Fri = {ctor: 'Fri'};
var _elm_lang$core$Date$Thu = {ctor: 'Thu'};
var _elm_lang$core$Date$Wed = {ctor: 'Wed'};
var _elm_lang$core$Date$Tue = {ctor: 'Tue'};
var _elm_lang$core$Date$Mon = {ctor: 'Mon'};
var _elm_lang$core$Date$Dec = {ctor: 'Dec'};
var _elm_lang$core$Date$Nov = {ctor: 'Nov'};
var _elm_lang$core$Date$Oct = {ctor: 'Oct'};
var _elm_lang$core$Date$Sep = {ctor: 'Sep'};
var _elm_lang$core$Date$Aug = {ctor: 'Aug'};
var _elm_lang$core$Date$Jul = {ctor: 'Jul'};
var _elm_lang$core$Date$Jun = {ctor: 'Jun'};
var _elm_lang$core$Date$May = {ctor: 'May'};
var _elm_lang$core$Date$Apr = {ctor: 'Apr'};
var _elm_lang$core$Date$Mar = {ctor: 'Mar'};
var _elm_lang$core$Date$Feb = {ctor: 'Feb'};
var _elm_lang$core$Date$Jan = {ctor: 'Jan'};

var _rluiten$elm_date_extra$Date_Extra_TwelveHourClock$PM = {ctor: 'PM'};
var _rluiten$elm_date_extra$Date_Extra_TwelveHourClock$AM = {ctor: 'AM'};
var _rluiten$elm_date_extra$Date_Extra_TwelveHourClock$twelveHourPeriod = function (d) {
	return (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$Date$hour(d),
		12) < 0) ? _rluiten$elm_date_extra$Date_Extra_TwelveHourClock$AM : _rluiten$elm_date_extra$Date_Extra_TwelveHourClock$PM;
};

var _rluiten$elm_date_extra$Date_Extra_Config$Config = F2(
	function (a, b) {
		return {i18n: a, format: b};
	});

var _elm_tools$parser_primitives$Native_ParserPrimitives = function() {


// STRINGS

function isSubString(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var bigLength = bigString.length - offset;

	if (bigLength < smallLength)
	{
		return tuple3(-1, row, col);
	}

	for (var i = 0; i < smallLength; i++)
	{
		var char = smallString[i];

		if (char !== bigString[offset + i])
		{
			return tuple3(-1, row, col);
		}

		// if it is a two word character
		if ((bigString.charCodeAt(offset) & 0xF800) === 0xD800)
		{
			i++
			if (smallString[i] !== bigString[offset + i])
			{
				return tuple3(-1, row, col);
			}
			col++;
			continue;
		}

		// if it is a newline
		if (char === '\n')
		{
			row++;
			col = 1;
			continue;
		}

		// if it is a one word character
		col++
	}

	return tuple3(offset + smallLength, row, col);
}

function tuple3(a, b, c)
{
	return { ctor: '_Tuple3', _0: a, _1: b, _2: c };
}


// CHARS

var mkChar = _elm_lang$core$Native_Utils.chr;

function isSubChar(predicate, offset, string)
{
	if (offset >= string.length)
	{
		return -1;
	}

	if ((string.charCodeAt(offset) & 0xF800) === 0xD800)
	{
		return predicate(mkChar(string.substr(offset, 2)))
			? offset + 2
			: -1;
	}

	var char = string[offset];

	return predicate(mkChar(char))
		? ((char === '\n') ? -2 : (offset + 1))
		: -1;
}


// FIND STRING

function findSubString(before, smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);

	if (newOffset === -1)
	{
		return tuple3(-1, row, col);
	}

	var scanTarget = before ? newOffset	: newOffset + smallString.length;

	while (offset < scanTarget)
	{
		var char = bigString[offset];

		if (char === '\n')
		{
			offset++;
			row++;
			col = 1;
			continue;
		}

		if ((bigString.charCodeAt(offset) & 0xF800) === 0xD800)
		{
			offset += 2;
			col++;
			continue;
		}

		offset++;
		col++;
	}

	return tuple3(offset, row, col);
}


return {
	isSubString: F5(isSubString),
	isSubChar: F3(isSubChar),
	findSubString: F6(findSubString)
};

}();

var _elm_tools$parser_primitives$ParserPrimitives$findSubString = _elm_tools$parser_primitives$Native_ParserPrimitives.findSubString;
var _elm_tools$parser_primitives$ParserPrimitives$isSubChar = _elm_tools$parser_primitives$Native_ParserPrimitives.isSubChar;
var _elm_tools$parser_primitives$ParserPrimitives$isSubString = _elm_tools$parser_primitives$Native_ParserPrimitives.isSubString;

var _elm_tools$parser$Parser_Internal$isPlusOrMinus = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('+')) || _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('-'));
};
var _elm_tools$parser$Parser_Internal$isZero = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('0'));
};
var _elm_tools$parser$Parser_Internal$isE = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('e')) || _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('E'));
};
var _elm_tools$parser$Parser_Internal$isDot = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('.'));
};
var _elm_tools$parser$Parser_Internal$isBadIntEnd = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (_elm_lang$core$Char$isUpper($char) || (_elm_lang$core$Char$isLower($char) || _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('.'))));
};
var _elm_tools$parser$Parser_Internal$chomp = F3(
	function (isGood, offset, source) {
		chomp:
		while (true) {
			var newOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, isGood, offset, source);
			if (_elm_lang$core$Native_Utils.cmp(newOffset, 0) < 0) {
				return offset;
			} else {
				var _v0 = isGood,
					_v1 = newOffset,
					_v2 = source;
				isGood = _v0;
				offset = _v1;
				source = _v2;
				continue chomp;
			}
		}
	});
var _elm_tools$parser$Parser_Internal$chompDigits = F3(
	function (isValidDigit, offset, source) {
		var newOffset = A3(_elm_tools$parser$Parser_Internal$chomp, isValidDigit, offset, source);
		return _elm_lang$core$Native_Utils.eq(newOffset, offset) ? _elm_lang$core$Result$Err(newOffset) : ((!_elm_lang$core$Native_Utils.eq(
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser_Internal$isBadIntEnd, newOffset, source),
			-1)) ? _elm_lang$core$Result$Err(newOffset) : _elm_lang$core$Result$Ok(newOffset));
	});
var _elm_tools$parser$Parser_Internal$chompExp = F2(
	function (offset, source) {
		var eOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser_Internal$isE, offset, source);
		if (_elm_lang$core$Native_Utils.eq(eOffset, -1)) {
			return _elm_lang$core$Result$Ok(offset);
		} else {
			var opOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser_Internal$isPlusOrMinus, eOffset, source);
			var expOffset = _elm_lang$core$Native_Utils.eq(opOffset, -1) ? eOffset : opOffset;
			return (!_elm_lang$core$Native_Utils.eq(
				A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser_Internal$isZero, expOffset, source),
				-1)) ? _elm_lang$core$Result$Err(expOffset) : (_elm_lang$core$Native_Utils.eq(
				A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_lang$core$Char$isDigit, expOffset, source),
				-1) ? _elm_lang$core$Result$Err(expOffset) : A3(_elm_tools$parser$Parser_Internal$chompDigits, _elm_lang$core$Char$isDigit, expOffset, source));
		}
	});
var _elm_tools$parser$Parser_Internal$chompDotAndExp = F2(
	function (offset, source) {
		var dotOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser_Internal$isDot, offset, source);
		return _elm_lang$core$Native_Utils.eq(dotOffset, -1) ? A2(_elm_tools$parser$Parser_Internal$chompExp, offset, source) : A2(
			_elm_tools$parser$Parser_Internal$chompExp,
			A3(_elm_tools$parser$Parser_Internal$chomp, _elm_lang$core$Char$isDigit, dotOffset, source),
			source);
	});
var _elm_tools$parser$Parser_Internal$State = F6(
	function (a, b, c, d, e, f) {
		return {source: a, offset: b, indent: c, context: d, row: e, col: f};
	});
var _elm_tools$parser$Parser_Internal$Parser = function (a) {
	return {ctor: 'Parser', _0: a};
};
var _elm_tools$parser$Parser_Internal$Bad = F2(
	function (a, b) {
		return {ctor: 'Bad', _0: a, _1: b};
	});
var _elm_tools$parser$Parser_Internal$Good = F2(
	function (a, b) {
		return {ctor: 'Good', _0: a, _1: b};
	});

var _elm_tools$parser$Parser$changeContext = F2(
	function (newContext, _p0) {
		var _p1 = _p0;
		return {source: _p1.source, offset: _p1.offset, indent: _p1.indent, context: newContext, row: _p1.row, col: _p1.col};
	});
var _elm_tools$parser$Parser$sourceMap = F2(
	function (func, _p2) {
		var _p3 = _p2;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p4) {
				var _p5 = _p4;
				var _p6 = _p3._0(_p5);
				if (_p6.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p6._0, _p6._1);
				} else {
					var _p7 = _p6._1;
					var subString = A3(_elm_lang$core$String$slice, _p5.offset, _p7.offset, _p5.source);
					return A2(
						_elm_tools$parser$Parser_Internal$Good,
						A2(func, subString, _p6._0),
						_p7);
				}
			});
	});
var _elm_tools$parser$Parser$source = function (parser) {
	return A2(_elm_tools$parser$Parser$sourceMap, _elm_lang$core$Basics$always, parser);
};
var _elm_tools$parser$Parser$badFloatMsg = 'The `Parser.float` parser seems to have a bug.\nPlease report an SSCCE to <https://github.com/elm-tools/parser/issues>.';
var _elm_tools$parser$Parser$floatHelp = F3(
	function (offset, zeroOffset, source) {
		if (_elm_lang$core$Native_Utils.cmp(zeroOffset, 0) > -1) {
			return A2(_elm_tools$parser$Parser_Internal$chompDotAndExp, zeroOffset, source);
		} else {
			var dotOffset = A3(_elm_tools$parser$Parser_Internal$chomp, _elm_lang$core$Char$isDigit, offset, source);
			var result = A2(_elm_tools$parser$Parser_Internal$chompDotAndExp, dotOffset, source);
			var _p8 = result;
			if (_p8.ctor === 'Err') {
				return result;
			} else {
				var _p9 = _p8._0;
				return _elm_lang$core$Native_Utils.eq(_p9, offset) ? _elm_lang$core$Result$Err(_p9) : result;
			}
		}
	});
var _elm_tools$parser$Parser$badIntMsg = 'The `Parser.int` parser seems to have a bug.\nPlease report an SSCCE to <https://github.com/elm-tools/parser/issues>.';
var _elm_tools$parser$Parser$isX = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('x'));
};
var _elm_tools$parser$Parser$isO = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('o'));
};
var _elm_tools$parser$Parser$isZero = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('0'));
};
var _elm_tools$parser$Parser$intHelp = F3(
	function (offset, zeroOffset, source) {
		return _elm_lang$core$Native_Utils.eq(zeroOffset, -1) ? A3(_elm_tools$parser$Parser_Internal$chompDigits, _elm_lang$core$Char$isDigit, offset, source) : ((!_elm_lang$core$Native_Utils.eq(
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser$isX, zeroOffset, source),
			-1)) ? A3(_elm_tools$parser$Parser_Internal$chompDigits, _elm_lang$core$Char$isHexDigit, offset + 2, source) : (_elm_lang$core$Native_Utils.eq(
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser_Internal$isBadIntEnd, zeroOffset, source),
			-1) ? _elm_lang$core$Result$Ok(zeroOffset) : _elm_lang$core$Result$Err(zeroOffset)));
	});
var _elm_tools$parser$Parser$token = F2(
	function (makeProblem, str) {
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p10) {
				var _p11 = _p10;
				var _p13 = _p11.source;
				var _p12 = A5(_elm_tools$parser_primitives$ParserPrimitives$isSubString, str, _p11.offset, _p11.row, _p11.col, _p13);
				var newOffset = _p12._0;
				var newRow = _p12._1;
				var newCol = _p12._2;
				return _elm_lang$core$Native_Utils.eq(newOffset, -1) ? A2(
					_elm_tools$parser$Parser_Internal$Bad,
					makeProblem(str),
					_p11) : A2(
					_elm_tools$parser$Parser_Internal$Good,
					{ctor: '_Tuple0'},
					{source: _p13, offset: newOffset, indent: _p11.indent, context: _p11.context, row: newRow, col: newCol});
			});
	});
var _elm_tools$parser$Parser$delayedCommitMap = F3(
	function (func, _p15, _p14) {
		var _p16 = _p15;
		var _p17 = _p14;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p18 = _p16._0(state1);
				if (_p18.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p18._0, state1);
				} else {
					var _p22 = _p18._1;
					var _p19 = _p17._0(_p22);
					if (_p19.ctor === 'Good') {
						return A2(
							_elm_tools$parser$Parser_Internal$Good,
							A2(func, _p18._0, _p19._0),
							_p19._1);
					} else {
						var _p21 = _p19._0;
						var _p20 = _p19._1;
						return (_elm_lang$core$Native_Utils.eq(_p22.row, _p20.row) && _elm_lang$core$Native_Utils.eq(_p22.col, _p20.col)) ? A2(_elm_tools$parser$Parser_Internal$Bad, _p21, state1) : A2(_elm_tools$parser$Parser_Internal$Bad, _p21, _p20);
					}
				}
			});
	});
var _elm_tools$parser$Parser$delayedCommit = F2(
	function (filler, realStuff) {
		return A3(
			_elm_tools$parser$Parser$delayedCommitMap,
			F2(
				function (_p23, v) {
					return v;
				}),
			filler,
			realStuff);
	});
var _elm_tools$parser$Parser$lazy = function (thunk) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			var _p24 = thunk(
				{ctor: '_Tuple0'});
			var parse = _p24._0;
			return parse(state);
		});
};
var _elm_tools$parser$Parser$andThen = F2(
	function (callback, _p25) {
		var _p26 = _p25;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p27 = _p26._0(state1);
				if (_p27.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p27._0, _p27._1);
				} else {
					var _p28 = callback(_p27._0);
					var parseB = _p28._0;
					return parseB(_p27._1);
				}
			});
	});
var _elm_tools$parser$Parser$apply = F2(
	function (f, a) {
		return f(a);
	});
var _elm_tools$parser$Parser$map2 = F3(
	function (func, _p30, _p29) {
		var _p31 = _p30;
		var _p32 = _p29;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p33 = _p31._0(state1);
				if (_p33.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p33._0, _p33._1);
				} else {
					var _p34 = _p32._0(_p33._1);
					if (_p34.ctor === 'Bad') {
						return A2(_elm_tools$parser$Parser_Internal$Bad, _p34._0, _p34._1);
					} else {
						return A2(
							_elm_tools$parser$Parser_Internal$Good,
							A2(func, _p33._0, _p34._0),
							_p34._1);
					}
				}
			});
	});
var _elm_tools$parser$Parser_ops = _elm_tools$parser$Parser_ops || {};
_elm_tools$parser$Parser_ops['|='] = F2(
	function (parseFunc, parseArg) {
		return A3(_elm_tools$parser$Parser$map2, _elm_tools$parser$Parser$apply, parseFunc, parseArg);
	});
var _elm_tools$parser$Parser_ops = _elm_tools$parser$Parser_ops || {};
_elm_tools$parser$Parser_ops['|.'] = F2(
	function (keepParser, ignoreParser) {
		return A3(_elm_tools$parser$Parser$map2, _elm_lang$core$Basics$always, keepParser, ignoreParser);
	});
var _elm_tools$parser$Parser$map = F2(
	function (func, _p35) {
		var _p36 = _p35;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p37 = _p36._0(state1);
				if (_p37.ctor === 'Good') {
					return A2(
						_elm_tools$parser$Parser_Internal$Good,
						func(_p37._0),
						_p37._1);
				} else {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p37._0, _p37._1);
				}
			});
	});
var _elm_tools$parser$Parser$succeed = function (a) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			return A2(_elm_tools$parser$Parser_Internal$Good, a, state);
		});
};
var _elm_tools$parser$Parser$run = F2(
	function (_p38, source) {
		var _p39 = _p38;
		var initialState = {
			source: source,
			offset: 0,
			indent: 1,
			context: {ctor: '[]'},
			row: 1,
			col: 1
		};
		var _p40 = _p39._0(initialState);
		if (_p40.ctor === 'Good') {
			return _elm_lang$core$Result$Ok(_p40._0);
		} else {
			return _elm_lang$core$Result$Err(
				{row: _p40._1.row, col: _p40._1.col, source: source, problem: _p40._0, context: _p40._1.context});
		}
	});
var _elm_tools$parser$Parser$Error = F5(
	function (a, b, c, d, e) {
		return {row: a, col: b, source: c, problem: d, context: e};
	});
var _elm_tools$parser$Parser$Context = F3(
	function (a, b, c) {
		return {row: a, col: b, description: c};
	});
var _elm_tools$parser$Parser$inContext = F2(
	function (ctx, _p41) {
		var _p42 = _p41;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p43) {
				var _p44 = _p43;
				var _p46 = _p44.context;
				var state1 = A2(
					_elm_tools$parser$Parser$changeContext,
					{
						ctor: '::',
						_0: A3(_elm_tools$parser$Parser$Context, _p44.row, _p44.col, ctx),
						_1: _p46
					},
					_p44);
				var _p45 = _p42._0(state1);
				if (_p45.ctor === 'Good') {
					return A2(
						_elm_tools$parser$Parser_Internal$Good,
						_p45._0,
						A2(_elm_tools$parser$Parser$changeContext, _p46, _p45._1));
				} else {
					return _p45;
				}
			});
	});
var _elm_tools$parser$Parser$Fail = function (a) {
	return {ctor: 'Fail', _0: a};
};
var _elm_tools$parser$Parser$fail = function (message) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			return A2(
				_elm_tools$parser$Parser_Internal$Bad,
				_elm_tools$parser$Parser$Fail(message),
				state);
		});
};
var _elm_tools$parser$Parser$ExpectingClosing = function (a) {
	return {ctor: 'ExpectingClosing', _0: a};
};
var _elm_tools$parser$Parser$ignoreUntil = function (str) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (_p47) {
			var _p48 = _p47;
			var _p50 = _p48.source;
			var _p49 = A6(_elm_tools$parser_primitives$ParserPrimitives$findSubString, false, str, _p48.offset, _p48.row, _p48.col, _p50);
			var newOffset = _p49._0;
			var newRow = _p49._1;
			var newCol = _p49._2;
			return _elm_lang$core$Native_Utils.eq(newOffset, -1) ? A2(
				_elm_tools$parser$Parser_Internal$Bad,
				_elm_tools$parser$Parser$ExpectingClosing(str),
				_p48) : A2(
				_elm_tools$parser$Parser_Internal$Good,
				{ctor: '_Tuple0'},
				{source: _p50, offset: newOffset, indent: _p48.indent, context: _p48.context, row: newRow, col: newCol});
		});
};
var _elm_tools$parser$Parser$ExpectingVariable = {ctor: 'ExpectingVariable'};
var _elm_tools$parser$Parser$ExpectingKeyword = function (a) {
	return {ctor: 'ExpectingKeyword', _0: a};
};
var _elm_tools$parser$Parser$keyword = function (str) {
	return A2(_elm_tools$parser$Parser$token, _elm_tools$parser$Parser$ExpectingKeyword, str);
};
var _elm_tools$parser$Parser$ExpectingSymbol = function (a) {
	return {ctor: 'ExpectingSymbol', _0: a};
};
var _elm_tools$parser$Parser$symbol = function (str) {
	return A2(_elm_tools$parser$Parser$token, _elm_tools$parser$Parser$ExpectingSymbol, str);
};
var _elm_tools$parser$Parser$ExpectingEnd = {ctor: 'ExpectingEnd'};
var _elm_tools$parser$Parser$end = _elm_tools$parser$Parser_Internal$Parser(
	function (state) {
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(state.source),
			state.offset) ? A2(
			_elm_tools$parser$Parser_Internal$Good,
			{ctor: '_Tuple0'},
			state) : A2(_elm_tools$parser$Parser_Internal$Bad, _elm_tools$parser$Parser$ExpectingEnd, state);
	});
var _elm_tools$parser$Parser$BadRepeat = {ctor: 'BadRepeat'};
var _elm_tools$parser$Parser$repeatExactly = F4(
	function (n, parse, revList, state1) {
		repeatExactly:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					_elm_lang$core$List$reverse(revList),
					state1);
			} else {
				var _p51 = parse(state1);
				if (_p51.ctor === 'Good') {
					var _p52 = _p51._1;
					if (_elm_lang$core$Native_Utils.eq(state1.row, _p52.row) && _elm_lang$core$Native_Utils.eq(state1.col, _p52.col)) {
						return A2(_elm_tools$parser$Parser_Internal$Bad, _elm_tools$parser$Parser$BadRepeat, _p52);
					} else {
						var _v25 = n - 1,
							_v26 = parse,
							_v27 = {ctor: '::', _0: _p51._0, _1: revList},
							_v28 = _p52;
						n = _v25;
						parse = _v26;
						revList = _v27;
						state1 = _v28;
						continue repeatExactly;
					}
				} else {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p51._0, _p51._1);
				}
			}
		}
	});
var _elm_tools$parser$Parser$repeatAtLeast = F4(
	function (n, parse, revList, state1) {
		repeatAtLeast:
		while (true) {
			var _p53 = parse(state1);
			if (_p53.ctor === 'Good') {
				var _p54 = _p53._1;
				if (_elm_lang$core$Native_Utils.eq(state1.row, _p54.row) && _elm_lang$core$Native_Utils.eq(state1.col, _p54.col)) {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _elm_tools$parser$Parser$BadRepeat, _p54);
				} else {
					var _v30 = n - 1,
						_v31 = parse,
						_v32 = {ctor: '::', _0: _p53._0, _1: revList},
						_v33 = _p54;
					n = _v30;
					parse = _v31;
					revList = _v32;
					state1 = _v33;
					continue repeatAtLeast;
				}
			} else {
				var _p55 = _p53._1;
				return (_elm_lang$core$Native_Utils.eq(state1.row, _p55.row) && (_elm_lang$core$Native_Utils.eq(state1.col, _p55.col) && (_elm_lang$core$Native_Utils.cmp(n, 0) < 1))) ? A2(
					_elm_tools$parser$Parser_Internal$Good,
					_elm_lang$core$List$reverse(revList),
					state1) : A2(_elm_tools$parser$Parser_Internal$Bad, _p53._0, _p55);
			}
		}
	});
var _elm_tools$parser$Parser$repeat = F2(
	function (count, _p56) {
		var _p57 = _p56;
		var _p59 = _p57._0;
		var _p58 = count;
		if (_p58.ctor === 'Exactly') {
			return _elm_tools$parser$Parser_Internal$Parser(
				function (state) {
					return A4(
						_elm_tools$parser$Parser$repeatExactly,
						_p58._0,
						_p59,
						{ctor: '[]'},
						state);
				});
		} else {
			return _elm_tools$parser$Parser_Internal$Parser(
				function (state) {
					return A4(
						_elm_tools$parser$Parser$repeatAtLeast,
						_p58._0,
						_p59,
						{ctor: '[]'},
						state);
				});
		}
	});
var _elm_tools$parser$Parser$ignoreExactly = F8(
	function (n, predicate, source, offset, indent, context, row, col) {
		ignoreExactly:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					{ctor: '_Tuple0'},
					{source: source, offset: offset, indent: indent, context: context, row: row, col: col});
			} else {
				var newOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, predicate, offset, source);
				if (_elm_lang$core$Native_Utils.eq(newOffset, -1)) {
					return A2(
						_elm_tools$parser$Parser_Internal$Bad,
						_elm_tools$parser$Parser$BadRepeat,
						{source: source, offset: offset, indent: indent, context: context, row: row, col: col});
				} else {
					if (_elm_lang$core$Native_Utils.eq(newOffset, -2)) {
						var _v36 = n - 1,
							_v37 = predicate,
							_v38 = source,
							_v39 = offset + 1,
							_v40 = indent,
							_v41 = context,
							_v42 = row + 1,
							_v43 = 1;
						n = _v36;
						predicate = _v37;
						source = _v38;
						offset = _v39;
						indent = _v40;
						context = _v41;
						row = _v42;
						col = _v43;
						continue ignoreExactly;
					} else {
						var _v44 = n - 1,
							_v45 = predicate,
							_v46 = source,
							_v47 = newOffset,
							_v48 = indent,
							_v49 = context,
							_v50 = row,
							_v51 = col + 1;
						n = _v44;
						predicate = _v45;
						source = _v46;
						offset = _v47;
						indent = _v48;
						context = _v49;
						row = _v50;
						col = _v51;
						continue ignoreExactly;
					}
				}
			}
		}
	});
var _elm_tools$parser$Parser$ignoreAtLeast = F8(
	function (n, predicate, source, offset, indent, context, row, col) {
		ignoreAtLeast:
		while (true) {
			var newOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, predicate, offset, source);
			if (_elm_lang$core$Native_Utils.eq(newOffset, -1)) {
				var state = {source: source, offset: offset, indent: indent, context: context, row: row, col: col};
				return (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) ? A2(
					_elm_tools$parser$Parser_Internal$Good,
					{ctor: '_Tuple0'},
					state) : A2(_elm_tools$parser$Parser_Internal$Bad, _elm_tools$parser$Parser$BadRepeat, state);
			} else {
				if (_elm_lang$core$Native_Utils.eq(newOffset, -2)) {
					var _v52 = n - 1,
						_v53 = predicate,
						_v54 = source,
						_v55 = offset + 1,
						_v56 = indent,
						_v57 = context,
						_v58 = row + 1,
						_v59 = 1;
					n = _v52;
					predicate = _v53;
					source = _v54;
					offset = _v55;
					indent = _v56;
					context = _v57;
					row = _v58;
					col = _v59;
					continue ignoreAtLeast;
				} else {
					var _v60 = n - 1,
						_v61 = predicate,
						_v62 = source,
						_v63 = newOffset,
						_v64 = indent,
						_v65 = context,
						_v66 = row,
						_v67 = col + 1;
					n = _v60;
					predicate = _v61;
					source = _v62;
					offset = _v63;
					indent = _v64;
					context = _v65;
					row = _v66;
					col = _v67;
					continue ignoreAtLeast;
				}
			}
		}
	});
var _elm_tools$parser$Parser$ignore = F2(
	function (count, predicate) {
		var _p60 = count;
		if (_p60.ctor === 'Exactly') {
			return _elm_tools$parser$Parser_Internal$Parser(
				function (_p61) {
					var _p62 = _p61;
					return A8(_elm_tools$parser$Parser$ignoreExactly, _p60._0, predicate, _p62.source, _p62.offset, _p62.indent, _p62.context, _p62.row, _p62.col);
				});
		} else {
			return _elm_tools$parser$Parser_Internal$Parser(
				function (_p63) {
					var _p64 = _p63;
					return A8(_elm_tools$parser$Parser$ignoreAtLeast, _p60._0, predicate, _p64.source, _p64.offset, _p64.indent, _p64.context, _p64.row, _p64.col);
				});
		}
	});
var _elm_tools$parser$Parser$keep = F2(
	function (count, predicate) {
		return _elm_tools$parser$Parser$source(
			A2(_elm_tools$parser$Parser$ignore, count, predicate));
	});
var _elm_tools$parser$Parser$BadFloat = {ctor: 'BadFloat'};
var _elm_tools$parser$Parser$float = _elm_tools$parser$Parser_Internal$Parser(
	function (_p65) {
		var _p66 = _p65;
		var _p77 = _p66.source;
		var _p76 = _p66.row;
		var _p75 = _p66.offset;
		var _p74 = _p66.indent;
		var _p73 = _p66.context;
		var _p72 = _p66.col;
		var _p67 = A3(
			_elm_tools$parser$Parser$floatHelp,
			_p75,
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser$isZero, _p75, _p77),
			_p77);
		if (_p67.ctor === 'Err') {
			var _p68 = _p67._0;
			return A2(
				_elm_tools$parser$Parser_Internal$Bad,
				_elm_tools$parser$Parser$BadFloat,
				{source: _p77, offset: _p68, indent: _p74, context: _p73, row: _p76, col: _p72 + (_p68 - _p75)});
		} else {
			var _p71 = _p67._0;
			var _p69 = _elm_lang$core$String$toFloat(
				A3(_elm_lang$core$String$slice, _p75, _p71, _p77));
			if (_p69.ctor === 'Err') {
				return _elm_lang$core$Native_Utils.crashCase(
					'Parser',
					{
						start: {line: 733, column: 9},
						end: {line: 745, column: 16}
					},
					_p69)(_elm_tools$parser$Parser$badFloatMsg);
			} else {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					_p69._0,
					{source: _p77, offset: _p71, indent: _p74, context: _p73, row: _p76, col: _p72 + (_p71 - _p75)});
			}
		}
	});
var _elm_tools$parser$Parser$BadInt = {ctor: 'BadInt'};
var _elm_tools$parser$Parser$int = _elm_tools$parser$Parser_Internal$Parser(
	function (_p78) {
		var _p79 = _p78;
		var _p90 = _p79.source;
		var _p89 = _p79.row;
		var _p88 = _p79.offset;
		var _p87 = _p79.indent;
		var _p86 = _p79.context;
		var _p85 = _p79.col;
		var _p80 = A3(
			_elm_tools$parser$Parser$intHelp,
			_p88,
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser$isZero, _p88, _p90),
			_p90);
		if (_p80.ctor === 'Err') {
			var _p81 = _p80._0;
			return A2(
				_elm_tools$parser$Parser_Internal$Bad,
				_elm_tools$parser$Parser$BadInt,
				{source: _p90, offset: _p81, indent: _p87, context: _p86, row: _p89, col: _p85 + (_p81 - _p88)});
		} else {
			var _p84 = _p80._0;
			var _p82 = _elm_lang$core$String$toInt(
				A3(_elm_lang$core$String$slice, _p88, _p84, _p90));
			if (_p82.ctor === 'Err') {
				return _elm_lang$core$Native_Utils.crashCase(
					'Parser',
					{
						start: {line: 638, column: 9},
						end: {line: 650, column: 16}
					},
					_p82)(_elm_tools$parser$Parser$badIntMsg);
			} else {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					_p82._0,
					{source: _p90, offset: _p84, indent: _p87, context: _p86, row: _p89, col: _p85 + (_p84 - _p88)});
			}
		}
	});
var _elm_tools$parser$Parser$BadOneOf = function (a) {
	return {ctor: 'BadOneOf', _0: a};
};
var _elm_tools$parser$Parser$oneOfHelp = F3(
	function (state, problems, parsers) {
		oneOfHelp:
		while (true) {
			var _p91 = parsers;
			if (_p91.ctor === '[]') {
				return A2(
					_elm_tools$parser$Parser_Internal$Bad,
					_elm_tools$parser$Parser$BadOneOf(
						_elm_lang$core$List$reverse(problems)),
					state);
			} else {
				var _p92 = _p91._0._0(state);
				if (_p92.ctor === 'Good') {
					return _p92;
				} else {
					if (_elm_lang$core$Native_Utils.eq(state.row, _p92._1.row) && _elm_lang$core$Native_Utils.eq(state.col, _p92._1.col)) {
						var _v79 = state,
							_v80 = {ctor: '::', _0: _p92._0, _1: problems},
							_v81 = _p91._1;
						state = _v79;
						problems = _v80;
						parsers = _v81;
						continue oneOfHelp;
					} else {
						return _p92;
					}
				}
			}
		}
	});
var _elm_tools$parser$Parser$oneOf = function (parsers) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			return A3(
				_elm_tools$parser$Parser$oneOfHelp,
				state,
				{ctor: '[]'},
				parsers);
		});
};
var _elm_tools$parser$Parser$Exactly = function (a) {
	return {ctor: 'Exactly', _0: a};
};
var _elm_tools$parser$Parser$AtLeast = function (a) {
	return {ctor: 'AtLeast', _0: a};
};
var _elm_tools$parser$Parser$zeroOrMore = _elm_tools$parser$Parser$AtLeast(0);
var _elm_tools$parser$Parser$oneOrMore = _elm_tools$parser$Parser$AtLeast(1);

var _abadi199$dateparser$Error$DateError = function (a) {
	return {ctor: 'DateError', _0: a};
};
var _abadi199$dateparser$Error$ParsingError = function (a) {
	return {ctor: 'ParsingError', _0: a};
};
var _abadi199$dateparser$Error$PatternError = function (a) {
	return {ctor: 'PatternError', _0: a};
};

var _rluiten$elm_date_extra$Date_Extra_Internal2$prevMonth = function (month) {
	var _p0 = month;
	switch (_p0.ctor) {
		case 'Jan':
			return _elm_lang$core$Date$Dec;
		case 'Feb':
			return _elm_lang$core$Date$Jan;
		case 'Mar':
			return _elm_lang$core$Date$Feb;
		case 'Apr':
			return _elm_lang$core$Date$Mar;
		case 'May':
			return _elm_lang$core$Date$Apr;
		case 'Jun':
			return _elm_lang$core$Date$May;
		case 'Jul':
			return _elm_lang$core$Date$Jun;
		case 'Aug':
			return _elm_lang$core$Date$Jul;
		case 'Sep':
			return _elm_lang$core$Date$Aug;
		case 'Oct':
			return _elm_lang$core$Date$Sep;
		case 'Nov':
			return _elm_lang$core$Date$Oct;
		default:
			return _elm_lang$core$Date$Nov;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$nextMonth = function (month) {
	var _p1 = month;
	switch (_p1.ctor) {
		case 'Jan':
			return _elm_lang$core$Date$Feb;
		case 'Feb':
			return _elm_lang$core$Date$Mar;
		case 'Mar':
			return _elm_lang$core$Date$Apr;
		case 'Apr':
			return _elm_lang$core$Date$May;
		case 'May':
			return _elm_lang$core$Date$Jun;
		case 'Jun':
			return _elm_lang$core$Date$Jul;
		case 'Jul':
			return _elm_lang$core$Date$Aug;
		case 'Aug':
			return _elm_lang$core$Date$Sep;
		case 'Sep':
			return _elm_lang$core$Date$Oct;
		case 'Oct':
			return _elm_lang$core$Date$Nov;
		case 'Nov':
			return _elm_lang$core$Date$Dec;
		default:
			return _elm_lang$core$Date$Jan;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$intToMonth = function (month) {
	return (_elm_lang$core$Native_Utils.cmp(month, 1) < 1) ? _elm_lang$core$Date$Jan : (_elm_lang$core$Native_Utils.eq(month, 2) ? _elm_lang$core$Date$Feb : (_elm_lang$core$Native_Utils.eq(month, 3) ? _elm_lang$core$Date$Mar : (_elm_lang$core$Native_Utils.eq(month, 4) ? _elm_lang$core$Date$Apr : (_elm_lang$core$Native_Utils.eq(month, 5) ? _elm_lang$core$Date$May : (_elm_lang$core$Native_Utils.eq(month, 6) ? _elm_lang$core$Date$Jun : (_elm_lang$core$Native_Utils.eq(month, 7) ? _elm_lang$core$Date$Jul : (_elm_lang$core$Native_Utils.eq(month, 8) ? _elm_lang$core$Date$Aug : (_elm_lang$core$Native_Utils.eq(month, 9) ? _elm_lang$core$Date$Sep : (_elm_lang$core$Native_Utils.eq(month, 10) ? _elm_lang$core$Date$Oct : (_elm_lang$core$Native_Utils.eq(month, 11) ? _elm_lang$core$Date$Nov : _elm_lang$core$Date$Dec))))))))));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$monthToInt = function (month) {
	var _p2 = month;
	switch (_p2.ctor) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYear = function (year) {
	return (_elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], year, 4),
		0) && (!_elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], year, 100),
		0))) || _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], year, 400),
		0);
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYearDate = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYear(
		_elm_lang$core$Date$year(date));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$yearToDayLength = function (year) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYear(year) ? 366 : 365;
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonth = F2(
	function (year, month) {
		var _p3 = month;
		switch (_p3.ctor) {
			case 'Jan':
				return 31;
			case 'Feb':
				return _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYear(year) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonthDate = function (date) {
	return A2(
		_rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonth,
		_elm_lang$core$Date$year(date),
		_elm_lang$core$Date$month(date));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$monthList = {
	ctor: '::',
	_0: _elm_lang$core$Date$Jan,
	_1: {
		ctor: '::',
		_0: _elm_lang$core$Date$Feb,
		_1: {
			ctor: '::',
			_0: _elm_lang$core$Date$Mar,
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Date$Apr,
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Date$May,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Date$Jun,
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Date$Jul,
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Date$Aug,
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Date$Sep,
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Date$Oct,
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Date$Nov,
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Date$Dec,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$toTime = function (_p4) {
	return _elm_lang$core$Basics$floor(
		_elm_lang$core$Date$toTime(_p4));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime = function (_p5) {
	return _elm_lang$core$Date$fromTime(
		_elm_lang$core$Basics$toFloat(_p5));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$prevDay = function (day) {
	var _p6 = day;
	switch (_p6.ctor) {
		case 'Mon':
			return _elm_lang$core$Date$Sun;
		case 'Tue':
			return _elm_lang$core$Date$Mon;
		case 'Wed':
			return _elm_lang$core$Date$Tue;
		case 'Thu':
			return _elm_lang$core$Date$Wed;
		case 'Fri':
			return _elm_lang$core$Date$Thu;
		case 'Sat':
			return _elm_lang$core$Date$Fri;
		default:
			return _elm_lang$core$Date$Sat;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$nextDay = function (day) {
	var _p7 = day;
	switch (_p7.ctor) {
		case 'Mon':
			return _elm_lang$core$Date$Tue;
		case 'Tue':
			return _elm_lang$core$Date$Wed;
		case 'Wed':
			return _elm_lang$core$Date$Thu;
		case 'Thu':
			return _elm_lang$core$Date$Fri;
		case 'Fri':
			return _elm_lang$core$Date$Sat;
		case 'Sat':
			return _elm_lang$core$Date$Sun;
		default:
			return _elm_lang$core$Date$Mon;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$isoDayOfWeek = function (day) {
	var _p8 = day;
	switch (_p8.ctor) {
		case 'Mon':
			return 1;
		case 'Tue':
			return 2;
		case 'Wed':
			return 3;
		case 'Thu':
			return 4;
		case 'Fri':
			return 5;
		case 'Sat':
			return 6;
		default:
			return 7;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond = _elm_lang$core$Basics$floor(_elm_lang$core$Time$millisecond);
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond * 1000;
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond * 60;
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute * 60;
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour * 24;
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAWeek = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay * 7;
var _rluiten$elm_date_extra$Date_Extra_Internal2$lastOfMonthTicks = function (date) {
	var dateTicks = _rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date);
	var day = _elm_lang$core$Date$day(date);
	var month = _elm_lang$core$Date$month(date);
	var year = _elm_lang$core$Date$year(date);
	var daysInMonthVal = A2(_rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonth, year, month);
	var addDays = daysInMonthVal - day;
	return dateTicks + (addDays * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay);
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$firstOfNextMonthDate = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
		_rluiten$elm_date_extra$Date_Extra_Internal2$lastOfMonthTicks(date) + _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay);
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$daysInNextMonth = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonthDate(
		_rluiten$elm_date_extra$Date_Extra_Internal2$firstOfNextMonthDate(date));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$firstOfMonthTicks = function (date) {
	var dateTicks = _rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date);
	var day = _elm_lang$core$Date$day(date);
	return dateTicks + ((1 - day) * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay);
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$lastOfPrevMonthDate = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
		_rluiten$elm_date_extra$Date_Extra_Internal2$firstOfMonthTicks(date) - _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay);
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$daysInPrevMonth = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonthDate(
		_rluiten$elm_date_extra$Date_Extra_Internal2$lastOfPrevMonthDate(date));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$epochDateStr = '1970-01-01T00:00:00Z';

var _rluiten$elm_date_extra$Date_Extra_Period$diff = F2(
	function (date1, date2) {
		var millisecondDiff = _elm_lang$core$Date$millisecond(date1) - _elm_lang$core$Date$millisecond(date2);
		var secondDiff = _elm_lang$core$Date$second(date1) - _elm_lang$core$Date$second(date2);
		var minuteDiff = _elm_lang$core$Date$minute(date1) - _elm_lang$core$Date$minute(date2);
		var hourDiff = _elm_lang$core$Date$hour(date1) - _elm_lang$core$Date$hour(date2);
		var ticksDiff = _rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date1) - _rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date2);
		var ticksDayDiff = (((ticksDiff - (hourDiff * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour)) - (minuteDiff * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute)) - (secondDiff * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond)) - (millisecondDiff * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond);
		var onlyDaysDiff = (ticksDayDiff / _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay) | 0;
		var _p0 = function () {
			if (_elm_lang$core$Native_Utils.cmp(onlyDaysDiff, 0) < 0) {
				var absDayDiff = _elm_lang$core$Basics$abs(onlyDaysDiff);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Basics$negate((absDayDiff / 7) | 0),
					_1: _elm_lang$core$Basics$negate(
						A2(_elm_lang$core$Basics_ops['%'], absDayDiff, 7))
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: (onlyDaysDiff / 7) | 0,
					_1: A2(_elm_lang$core$Basics_ops['%'], onlyDaysDiff, 7)
				};
			}
		}();
		var weekDiff = _p0._0;
		var dayDiff = _p0._1;
		return {week: weekDiff, day: dayDiff, hour: hourDiff, minute: minuteDiff, second: secondDiff, millisecond: millisecondDiff};
	});
var _rluiten$elm_date_extra$Date_Extra_Period$addTimeUnit = F3(
	function (unit, addend, date) {
		return _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
			A2(
				F2(
					function (x, y) {
						return x + y;
					}),
				addend * unit,
				_rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date)));
	});
var _rluiten$elm_date_extra$Date_Extra_Period$toTicks = function (period) {
	var _p1 = period;
	switch (_p1.ctor) {
		case 'Millisecond':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond;
		case 'Second':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond;
		case 'Minute':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute;
		case 'Hour':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour;
		case 'Day':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay;
		case 'Week':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAWeek;
		default:
			var _p2 = _p1._0;
			return (((((_rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond * _p2.millisecond) + (_rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond * _p2.second)) + (_rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute * _p2.minute)) + (_rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour * _p2.hour)) + (_rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay * _p2.day)) + (_rluiten$elm_date_extra$Date_Extra_Internal2$ticksAWeek * _p2.week);
	}
};
var _rluiten$elm_date_extra$Date_Extra_Period$add = function (period) {
	return _rluiten$elm_date_extra$Date_Extra_Period$addTimeUnit(
		_rluiten$elm_date_extra$Date_Extra_Period$toTicks(period));
};
var _rluiten$elm_date_extra$Date_Extra_Period$zeroDelta = {week: 0, day: 0, hour: 0, minute: 0, second: 0, millisecond: 0};
var _rluiten$elm_date_extra$Date_Extra_Period$DeltaRecord = F6(
	function (a, b, c, d, e, f) {
		return {week: a, day: b, hour: c, minute: d, second: e, millisecond: f};
	});
var _rluiten$elm_date_extra$Date_Extra_Period$Delta = function (a) {
	return {ctor: 'Delta', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Period$Week = {ctor: 'Week'};
var _rluiten$elm_date_extra$Date_Extra_Period$Day = {ctor: 'Day'};
var _rluiten$elm_date_extra$Date_Extra_Period$Hour = {ctor: 'Hour'};
var _rluiten$elm_date_extra$Date_Extra_Period$Minute = {ctor: 'Minute'};
var _rluiten$elm_date_extra$Date_Extra_Period$Second = {ctor: 'Second'};
var _rluiten$elm_date_extra$Date_Extra_Period$Millisecond = {ctor: 'Millisecond'};

var _rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil = F3(
	function (year, month, day) {
		var doy = (((((153 * (month + ((_elm_lang$core$Native_Utils.cmp(month, 2) > 0) ? -3 : 9))) + 2) / 5) | 0) + day) - 1;
		var y = year - ((_elm_lang$core$Native_Utils.cmp(month, 2) < 1) ? 1 : 0);
		var era = (((_elm_lang$core$Native_Utils.cmp(y, 0) > -1) ? y : (y - 399)) / 400) | 0;
		var yoe = y - (era * 400);
		var doe = (((yoe * 365) + ((yoe / 4) | 0)) - ((yoe / 100) | 0)) + doy;
		return ((era * 146097) + doe) - 719468;
	});
var _rluiten$elm_date_extra$Date_Extra_Internal$ticksFromFields = F7(
	function (year, month, day, hour, minute, second, millisecond) {
		var monthInt = _rluiten$elm_date_extra$Date_Extra_Internal2$monthToInt(month);
		var clampYear = (_elm_lang$core$Native_Utils.cmp(year, 0) < 0) ? 0 : year;
		var clampDay = A3(
			_elm_lang$core$Basics$clamp,
			1,
			A2(_rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonth, clampYear, month),
			day);
		var dayCount = A3(_rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil, clampYear, monthInt, clampDay);
		return _rluiten$elm_date_extra$Date_Extra_Period$toTicks(
			_rluiten$elm_date_extra$Date_Extra_Period$Delta(
				{
					millisecond: A3(_elm_lang$core$Basics$clamp, 0, 999, millisecond),
					second: A3(_elm_lang$core$Basics$clamp, 0, 59, second),
					minute: A3(_elm_lang$core$Basics$clamp, 0, 59, minute),
					hour: A3(_elm_lang$core$Basics$clamp, 0, 23, hour),
					day: dayCount,
					week: 0
				}));
	});
var _rluiten$elm_date_extra$Date_Extra_Internal$ticksFromDateFields = function (date) {
	return A7(
		_rluiten$elm_date_extra$Date_Extra_Internal$ticksFromFields,
		_elm_lang$core$Date$year(date),
		_elm_lang$core$Date$month(date),
		_elm_lang$core$Date$day(date),
		_elm_lang$core$Date$hour(date),
		_elm_lang$core$Date$minute(date),
		_elm_lang$core$Date$second(date),
		_elm_lang$core$Date$millisecond(date));
};
var _rluiten$elm_date_extra$Date_Extra_Internal$getTimezoneOffset = function (date) {
	var v1Ticks = _rluiten$elm_date_extra$Date_Extra_Internal$ticksFromDateFields(date);
	var dateTicks = _elm_lang$core$Basics$floor(
		_elm_lang$core$Date$toTime(date));
	return ((dateTicks - v1Ticks) / _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute) | 0;
};
var _rluiten$elm_date_extra$Date_Extra_Internal$hackDateAsOffset = F2(
	function (offsetMinutes, date) {
		return _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
			A2(
				F2(
					function (x, y) {
						return x + y;
					}),
				offsetMinutes * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute,
				_rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date)));
	});
var _rluiten$elm_date_extra$Date_Extra_Internal$hackDateAsUtc = function (date) {
	var offset = _rluiten$elm_date_extra$Date_Extra_Internal$getTimezoneOffset(date);
	var oHours = (offset / _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour) | 0;
	var oMinutes = ((offset - (oHours * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour)) / _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute) | 0;
	return A2(_rluiten$elm_date_extra$Date_Extra_Internal$hackDateAsOffset, offset, date);
};

var _rluiten$elm_date_extra$Date_Extra_Core$compensateZoneOffset = F2(
	function (date1, date2) {
		return A3(
			_rluiten$elm_date_extra$Date_Extra_Period$add,
			_rluiten$elm_date_extra$Date_Extra_Period$Minute,
			_rluiten$elm_date_extra$Date_Extra_Internal$getTimezoneOffset(date2) - _rluiten$elm_date_extra$Date_Extra_Internal$getTimezoneOffset(date1),
			date2);
	});
var _rluiten$elm_date_extra$Date_Extra_Core$lastOfMonthDate = function (date) {
	return A2(
		_rluiten$elm_date_extra$Date_Extra_Core$compensateZoneOffset,
		date,
		_rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
			_rluiten$elm_date_extra$Date_Extra_Internal2$lastOfMonthTicks(date)));
};
var _rluiten$elm_date_extra$Date_Extra_Core$toFirstOfMonth = function (date) {
	return A2(
		_rluiten$elm_date_extra$Date_Extra_Core$compensateZoneOffset,
		date,
		_rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
			_rluiten$elm_date_extra$Date_Extra_Internal2$firstOfMonthTicks(date)));
};
var _rluiten$elm_date_extra$Date_Extra_Core$lastOfPrevMonthDate = function (date) {
	return A2(
		_rluiten$elm_date_extra$Date_Extra_Core$compensateZoneOffset,
		date,
		_rluiten$elm_date_extra$Date_Extra_Internal2$lastOfPrevMonthDate(date));
};
var _rluiten$elm_date_extra$Date_Extra_Core$firstOfNextMonthDate = function (date) {
	return A2(
		_rluiten$elm_date_extra$Date_Extra_Core$compensateZoneOffset,
		date,
		_rluiten$elm_date_extra$Date_Extra_Internal2$firstOfNextMonthDate(date));
};
var _rluiten$elm_date_extra$Date_Extra_Core$yearToDayLength = _rluiten$elm_date_extra$Date_Extra_Internal2$yearToDayLength;
var _rluiten$elm_date_extra$Date_Extra_Core$toTime = _rluiten$elm_date_extra$Date_Extra_Internal2$toTime;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksAWeek = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAWeek;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksASecond = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksAMinute = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksAMillisecond = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksADay = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksAnHour = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour;
var _rluiten$elm_date_extra$Date_Extra_Core$prevMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$prevMonth;
var _rluiten$elm_date_extra$Date_Extra_Core$prevDay = _rluiten$elm_date_extra$Date_Extra_Internal2$prevDay;
var _rluiten$elm_date_extra$Date_Extra_Core$nextMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$nextMonth;
var _rluiten$elm_date_extra$Date_Extra_Core$nextDay = _rluiten$elm_date_extra$Date_Extra_Internal2$nextDay;
var _rluiten$elm_date_extra$Date_Extra_Core$monthToInt = _rluiten$elm_date_extra$Date_Extra_Internal2$monthToInt;
var _rluiten$elm_date_extra$Date_Extra_Core$monthList = _rluiten$elm_date_extra$Date_Extra_Internal2$monthList;
var _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek = _rluiten$elm_date_extra$Date_Extra_Internal2$isoDayOfWeek;
var _rluiten$elm_date_extra$Date_Extra_Core$daysBackToStartOfWeek = F2(
	function (dateDay, startOfWeekDay) {
		var startOfWeekDayIndex = _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(startOfWeekDay);
		var dateDayIndex = _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(dateDay);
		return (_elm_lang$core$Native_Utils.cmp(dateDayIndex, startOfWeekDayIndex) < 0) ? ((7 + dateDayIndex) - startOfWeekDayIndex) : (dateDayIndex - startOfWeekDayIndex);
	});
var _rluiten$elm_date_extra$Date_Extra_Core$isLeapYearDate = _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYearDate;
var _rluiten$elm_date_extra$Date_Extra_Core$isLeapYear = _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYear;
var _rluiten$elm_date_extra$Date_Extra_Core$intToMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$intToMonth;
var _rluiten$elm_date_extra$Date_Extra_Core$fromTime = _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime;
var _rluiten$elm_date_extra$Date_Extra_Core$epochDateStr = _rluiten$elm_date_extra$Date_Extra_Internal2$epochDateStr;
var _rluiten$elm_date_extra$Date_Extra_Core$daysInMonthDate = _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonthDate;
var _rluiten$elm_date_extra$Date_Extra_Core$daysInPrevMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$daysInPrevMonth;
var _rluiten$elm_date_extra$Date_Extra_Core$daysInNextMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$daysInNextMonth;
var _rluiten$elm_date_extra$Date_Extra_Core$daysInMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonth;

var _rluiten$elm_date_extra$Date_Extra_Create$epochDate = _elm_lang$core$Date$fromTime(0);
var _rluiten$elm_date_extra$Date_Extra_Create$epochTimezoneOffset = function () {
	var inMinutes = (_elm_lang$core$Date$hour(_rluiten$elm_date_extra$Date_Extra_Create$epochDate) * 60) + _elm_lang$core$Date$minute(_rluiten$elm_date_extra$Date_Extra_Create$epochDate);
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Date$year(_rluiten$elm_date_extra$Date_Extra_Create$epochDate),
		1969) ? (0 - (inMinutes - (24 * 60))) : (0 - inMinutes);
}();
var _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset = _rluiten$elm_date_extra$Date_Extra_Internal$getTimezoneOffset;
var _rluiten$elm_date_extra$Date_Extra_Create$adjustedTicksToDate = function (ticks) {
	var date = A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Millisecond, ticks + (_rluiten$elm_date_extra$Date_Extra_Create$epochTimezoneOffset * _rluiten$elm_date_extra$Date_Extra_Core$ticksAMinute), _rluiten$elm_date_extra$Date_Extra_Create$epochDate);
	var dateOffset = _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(date);
	return _elm_lang$core$Native_Utils.eq(dateOffset, _rluiten$elm_date_extra$Date_Extra_Create$epochTimezoneOffset) ? date : A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Minute, dateOffset - _rluiten$elm_date_extra$Date_Extra_Create$epochTimezoneOffset, date);
};
var _rluiten$elm_date_extra$Date_Extra_Create$dateFromFields = F7(
	function (year, month, day, hour, minute, second, millisecond) {
		return _rluiten$elm_date_extra$Date_Extra_Create$adjustedTicksToDate(
			A7(_rluiten$elm_date_extra$Date_Extra_Internal$ticksFromFields, year, month, day, hour, minute, second, millisecond));
	});
var _rluiten$elm_date_extra$Date_Extra_Create$timeFromFields = A3(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, 1970, _elm_lang$core$Date$Jan, 1);

var _abadi199$dateparser$InternalDate_Type$emptyDate = {date: 1, month: 1, year: 1900, hour: 0, minute: 0, second: 0, millisecond: 0, ampm: _elm_lang$core$Maybe$Nothing, timeZoneOffset: 0};
var _abadi199$dateparser$InternalDate_Type$InternalDate = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {date: a, month: b, year: c, hour: d, minute: e, second: f, millisecond: g, ampm: h, timeZoneOffset: i};
	});
var _abadi199$dateparser$InternalDate_Type$PM = {ctor: 'PM'};
var _abadi199$dateparser$InternalDate_Type$AM = {ctor: 'AM'};

var _abadi199$dateparser$Pattern$isNotSymbolOrSpace = function ($char) {
	return (!_elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('%'))) && (!_elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr(' ')));
};
var _abadi199$dateparser$Pattern$Other = function (a) {
	return {ctor: 'Other', _0: a};
};
var _abadi199$dateparser$Pattern$other = function () {
	var toPattern = function (str) {
		return _elm_lang$core$Native_Utils.eq(str, '') ? _elm_tools$parser$Parser$fail('empty character') : _elm_tools$parser$Parser$succeed(
			_abadi199$dateparser$Pattern$Other(str));
	};
	return A2(
		_elm_tools$parser$Parser$andThen,
		toPattern,
		A2(
			_elm_tools$parser$Parser$sourceMap,
			_elm_lang$core$Basics$always,
			A2(_elm_tools$parser$Parser$ignore, _elm_tools$parser$Parser$zeroOrMore, _abadi199$dateparser$Pattern$isNotSymbolOrSpace)));
}();
var _abadi199$dateparser$Pattern$Whitespace = {ctor: 'Whitespace'};
var _abadi199$dateparser$Pattern$TimeZoneOffsetColon = {ctor: 'TimeZoneOffsetColon'};
var _abadi199$dateparser$Pattern$TimeZoneOffset = {ctor: 'TimeZoneOffset'};
var _abadi199$dateparser$Pattern$Millisecond = {ctor: 'Millisecond'};
var _abadi199$dateparser$Pattern$SecondZeroPadded = {ctor: 'SecondZeroPadded'};
var _abadi199$dateparser$Pattern$MinuteZeroPadded = {ctor: 'MinuteZeroPadded'};
var _abadi199$dateparser$Pattern$Ampm = {ctor: 'Ampm'};
var _abadi199$dateparser$Pattern$AMPM = {ctor: 'AMPM'};
var _abadi199$dateparser$Pattern$Hour12 = {ctor: 'Hour12'};
var _abadi199$dateparser$Pattern$Hour12SpacePadded = {ctor: 'Hour12SpacePadded'};
var _abadi199$dateparser$Pattern$Hour12ZeroPadded = {ctor: 'Hour12ZeroPadded'};
var _abadi199$dateparser$Pattern$Hour24 = {ctor: 'Hour24'};
var _abadi199$dateparser$Pattern$Hour24SpacePadded = {ctor: 'Hour24SpacePadded'};
var _abadi199$dateparser$Pattern$Hour24ZeroPadded = {ctor: 'Hour24ZeroPadded'};
var _abadi199$dateparser$Pattern$DayOfWeekUpperAbbrvName = {ctor: 'DayOfWeekUpperAbbrvName'};
var _abadi199$dateparser$Pattern$DayOfWeekAbbrvName = {ctor: 'DayOfWeekAbbrvName'};
var _abadi199$dateparser$Pattern$DayOfWeekUpperFullName = {ctor: 'DayOfWeekUpperFullName'};
var _abadi199$dateparser$Pattern$DayOfWeekFullName = {ctor: 'DayOfWeekFullName'};
var _abadi199$dateparser$Pattern$DateSpacePaddedSuffix = {ctor: 'DateSpacePaddedSuffix'};
var _abadi199$dateparser$Pattern$DateSuffix = {ctor: 'DateSuffix'};
var _abadi199$dateparser$Pattern$Date = {ctor: 'Date'};
var _abadi199$dateparser$Pattern$DateSpacePadded = {ctor: 'DateSpacePadded'};
var _abadi199$dateparser$Pattern$DateZeroPadded = {ctor: 'DateZeroPadded'};
var _abadi199$dateparser$Pattern$MonthUpperAbbrvName = {ctor: 'MonthUpperAbbrvName'};
var _abadi199$dateparser$Pattern$MonthAbbrvName = {ctor: 'MonthAbbrvName'};
var _abadi199$dateparser$Pattern$MonthUpperFullName = {ctor: 'MonthUpperFullName'};
var _abadi199$dateparser$Pattern$MonthFullName = {ctor: 'MonthFullName'};
var _abadi199$dateparser$Pattern$Month = {ctor: 'Month'};
var _abadi199$dateparser$Pattern$MonthSpacePadded = {ctor: 'MonthSpacePadded'};
var _abadi199$dateparser$Pattern$MonthZeroPadded = {ctor: 'MonthZeroPadded'};
var _abadi199$dateparser$Pattern$Year = {ctor: 'Year'};
var _abadi199$dateparser$Pattern$nextPattern = A2(
	_elm_tools$parser$Parser$inContext,
	'pattern',
	A2(
		_elm_tools$parser$Parser$delayedCommit,
		_elm_tools$parser$Parser$symbol('%'),
		_elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser$andThen,
					_elm_lang$core$Basics$always(
						_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$Year)),
					_elm_tools$parser$Parser$symbol('Y')),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser$andThen,
						_elm_lang$core$Basics$always(
							_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$MonthZeroPadded)),
						_elm_tools$parser$Parser$symbol('m')),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_tools$parser$Parser$andThen,
							_elm_lang$core$Basics$always(
								_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$MonthSpacePadded)),
							_elm_tools$parser$Parser$symbol('_m')),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_tools$parser$Parser$andThen,
								_elm_lang$core$Basics$always(
									_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$Month)),
								_elm_tools$parser$Parser$symbol('-m')),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_tools$parser$Parser$andThen,
									_elm_lang$core$Basics$always(
										_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$MonthFullName)),
									_elm_tools$parser$Parser$symbol('B')),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_tools$parser$Parser$andThen,
										_elm_lang$core$Basics$always(
											_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$MonthUpperFullName)),
										_elm_tools$parser$Parser$symbol('^B')),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_tools$parser$Parser$andThen,
											_elm_lang$core$Basics$always(
												_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$MonthAbbrvName)),
											_elm_tools$parser$Parser$symbol('b')),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_tools$parser$Parser$andThen,
												_elm_lang$core$Basics$always(
													_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$MonthUpperAbbrvName)),
												_elm_tools$parser$Parser$symbol('^b')),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_tools$parser$Parser$andThen,
													_elm_lang$core$Basics$always(
														_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$DateZeroPadded)),
													_elm_tools$parser$Parser$symbol('d')),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_tools$parser$Parser$andThen,
														_elm_lang$core$Basics$always(
															_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$Date)),
														_elm_tools$parser$Parser$symbol('-d')),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_tools$parser$Parser$andThen,
															_elm_lang$core$Basics$always(
																_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$DateSuffix)),
															_elm_tools$parser$Parser$symbol('-@d')),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_tools$parser$Parser$andThen,
																_elm_lang$core$Basics$always(
																	_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$DateSpacePadded)),
																_elm_tools$parser$Parser$symbol('e')),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_tools$parser$Parser$andThen,
																	_elm_lang$core$Basics$always(
																		_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$DateSpacePaddedSuffix)),
																	_elm_tools$parser$Parser$symbol('@e')),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_tools$parser$Parser$andThen,
																		_elm_lang$core$Basics$always(
																			_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$DayOfWeekFullName)),
																		_elm_tools$parser$Parser$symbol('A')),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_tools$parser$Parser$andThen,
																			_elm_lang$core$Basics$always(
																				_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$DayOfWeekUpperFullName)),
																			_elm_tools$parser$Parser$symbol('^A')),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_tools$parser$Parser$andThen,
																				_elm_lang$core$Basics$always(
																					_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$DayOfWeekAbbrvName)),
																				_elm_tools$parser$Parser$symbol('a')),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_tools$parser$Parser$andThen,
																					_elm_lang$core$Basics$always(
																						_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$DayOfWeekUpperAbbrvName)),
																					_elm_tools$parser$Parser$symbol('^a')),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_tools$parser$Parser$andThen,
																						_elm_lang$core$Basics$always(
																							_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$Hour24ZeroPadded)),
																						_elm_tools$parser$Parser$symbol('H')),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_tools$parser$Parser$andThen,
																							_elm_lang$core$Basics$always(
																								_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$Hour24)),
																							_elm_tools$parser$Parser$symbol('-H')),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_tools$parser$Parser$andThen,
																								_elm_lang$core$Basics$always(
																									_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$Hour24SpacePadded)),
																								_elm_tools$parser$Parser$symbol('k')),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_tools$parser$Parser$andThen,
																									_elm_lang$core$Basics$always(
																										_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$Hour12ZeroPadded)),
																									_elm_tools$parser$Parser$symbol('I')),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_tools$parser$Parser$andThen,
																										_elm_lang$core$Basics$always(
																											_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$Hour12)),
																										_elm_tools$parser$Parser$symbol('-I')),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_tools$parser$Parser$andThen,
																											_elm_lang$core$Basics$always(
																												_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$Hour12SpacePadded)),
																											_elm_tools$parser$Parser$symbol('l')),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_elm_tools$parser$Parser$andThen,
																												_elm_lang$core$Basics$always(
																													_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$AMPM)),
																												_elm_tools$parser$Parser$symbol('p')),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_elm_tools$parser$Parser$andThen,
																													_elm_lang$core$Basics$always(
																														_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$Ampm)),
																													_elm_tools$parser$Parser$symbol('P')),
																												_1: {
																													ctor: '::',
																													_0: A2(
																														_elm_tools$parser$Parser$andThen,
																														_elm_lang$core$Basics$always(
																															_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$MinuteZeroPadded)),
																														_elm_tools$parser$Parser$symbol('M')),
																													_1: {
																														ctor: '::',
																														_0: A2(
																															_elm_tools$parser$Parser$andThen,
																															_elm_lang$core$Basics$always(
																																_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$SecondZeroPadded)),
																															_elm_tools$parser$Parser$symbol('S')),
																														_1: {
																															ctor: '::',
																															_0: A2(
																																_elm_tools$parser$Parser$andThen,
																																_elm_lang$core$Basics$always(
																																	_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$Millisecond)),
																																_elm_tools$parser$Parser$symbol('L')),
																															_1: {
																																ctor: '::',
																																_0: A2(
																																	_elm_tools$parser$Parser$andThen,
																																	_elm_lang$core$Basics$always(
																																		_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$TimeZoneOffset)),
																																	_elm_tools$parser$Parser$symbol('z')),
																																_1: {
																																	ctor: '::',
																																	_0: A2(
																																		_elm_tools$parser$Parser$andThen,
																																		_elm_lang$core$Basics$always(
																																			_elm_tools$parser$Parser$succeed(_abadi199$dateparser$Pattern$TimeZoneOffsetColon)),
																																		_elm_tools$parser$Parser$symbol(':z')),
																																	_1: {
																																		ctor: '::',
																																		_0: A2(
																																			_elm_tools$parser$Parser$andThen,
																																			_elm_lang$core$Basics$always(
																																				_elm_tools$parser$Parser$succeed(
																																					_abadi199$dateparser$Pattern$Other('%'))),
																																			_elm_tools$parser$Parser$symbol('%')),
																																		_1: {ctor: '[]'}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			})));
var _abadi199$dateparser$Pattern$patternListHelper = function (patterns) {
	return _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_tools$parser$Parser$andThen,
				function (pattern) {
					return _abadi199$dateparser$Pattern$patternListHelper(
						{ctor: '::', _0: pattern, _1: patterns});
				},
				_abadi199$dateparser$Pattern$nextPattern),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser$andThen,
					function (_p0) {
						return _abadi199$dateparser$Pattern$patternListHelper(
							{ctor: '::', _0: _abadi199$dateparser$Pattern$Whitespace, _1: patterns});
					},
					A2(
						_elm_tools$parser$Parser$repeat,
						_elm_tools$parser$Parser$oneOrMore,
						_elm_tools$parser$Parser$symbol(' '))),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser$andThen,
						function (pattern) {
							return _abadi199$dateparser$Pattern$patternListHelper(
								{ctor: '::', _0: pattern, _1: patterns});
						},
						_abadi199$dateparser$Pattern$other),
					_1: {
						ctor: '::',
						_0: _elm_tools$parser$Parser$succeed(
							_elm_lang$core$List$reverse(patterns)),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _abadi199$dateparser$Pattern$patternList = A2(
	_elm_tools$parser$Parser$inContext,
	'patternList',
	A2(
		_elm_tools$parser$Parser_ops['|='],
		_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
		_abadi199$dateparser$Pattern$patternListHelper(
			{ctor: '[]'})));
var _abadi199$dateparser$Pattern$parse = function (pattern) {
	return A2(
		_elm_lang$core$Result$mapError,
		function (_p1) {
			return _abadi199$dateparser$Error$PatternError(
				_elm_lang$core$Basics$toString(_p1));
		},
		A2(_elm_tools$parser$Parser$run, _abadi199$dateparser$Pattern$patternList, pattern));
};

var _abadi199$dateparser$Utilities$monthFromInt = function (month) {
	var _p0 = month;
	switch (_p0) {
		case 1:
			return _elm_lang$core$Result$Ok(_elm_lang$core$Date$Jan);
		case 2:
			return _elm_lang$core$Result$Ok(_elm_lang$core$Date$Feb);
		case 3:
			return _elm_lang$core$Result$Ok(_elm_lang$core$Date$Mar);
		case 4:
			return _elm_lang$core$Result$Ok(_elm_lang$core$Date$Apr);
		case 5:
			return _elm_lang$core$Result$Ok(_elm_lang$core$Date$May);
		case 6:
			return _elm_lang$core$Result$Ok(_elm_lang$core$Date$Jun);
		case 7:
			return _elm_lang$core$Result$Ok(_elm_lang$core$Date$Jul);
		case 8:
			return _elm_lang$core$Result$Ok(_elm_lang$core$Date$Aug);
		case 9:
			return _elm_lang$core$Result$Ok(_elm_lang$core$Date$Sep);
		case 10:
			return _elm_lang$core$Result$Ok(_elm_lang$core$Date$Oct);
		case 11:
			return _elm_lang$core$Result$Ok(_elm_lang$core$Date$Nov);
		case 12:
			return _elm_lang$core$Result$Ok(_elm_lang$core$Date$Dec);
		default:
			return _elm_lang$core$Result$Err(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Invalid month: ',
					_elm_lang$core$Basics$toString(month)));
	}
};
var _abadi199$dateparser$Utilities$monthToInt = function (month) {
	var _p1 = month;
	switch (_p1.ctor) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var _abadi199$dateparser$Utilities$toUpper = function (upper) {
	return upper ? _elm_lang$core$String$toUpper : _elm_lang$core$Basics$identity;
};

var _abadi199$dateparser$InternalDate_Parser$other = F2(
	function (symbol, internalDate) {
		return A2(
			_elm_tools$parser$Parser$andThen,
			function (_p0) {
				return _elm_tools$parser$Parser$succeed(internalDate);
			},
			A2(
				_elm_tools$parser$Parser$inContext,
				'Other',
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
					_elm_tools$parser$Parser$symbol(symbol))));
	});
var _abadi199$dateparser$InternalDate_Parser$whitespace = function (internalDate) {
	return A2(
		_elm_tools$parser$Parser$andThen,
		function (_p1) {
			return _elm_tools$parser$Parser$succeed(internalDate);
		},
		A2(
			_elm_tools$parser$Parser$inContext,
			'Whitespace',
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
				A2(
					_elm_tools$parser$Parser$repeat,
					_elm_tools$parser$Parser$oneOrMore,
					_elm_tools$parser$Parser$symbol(' ')))));
};
var _abadi199$dateparser$InternalDate_Parser$timeZoneOffsetColon = function (internalDate) {
	return _elm_lang$core$Native_Utils.crash(
		'InternalDate.Parser',
		{
			start: {line: 432, column: 5},
			end: {line: 432, column: 16}
		})('timeZoneOffsetColon');
};
var _abadi199$dateparser$InternalDate_Parser$paddedInts = function (numbers) {
	var pad = function (number) {
		return (_elm_lang$core$Native_Utils.cmp(number, 10) < 0) ? A2(
			_elm_lang$core$Basics_ops['++'],
			'0',
			_elm_lang$core$Basics$toString(number)) : _elm_lang$core$Basics$toString(number);
	};
	var parser = function (number) {
		return A2(
			_elm_tools$parser$Parser$andThen,
			_elm_lang$core$Basics$always(
				_elm_tools$parser$Parser$succeed(number)),
			_elm_tools$parser$Parser$symbol(
				pad(number)));
	};
	return _elm_tools$parser$Parser$oneOf(
		A2(_elm_lang$core$List$map, parser, numbers));
};
var _abadi199$dateparser$InternalDate_Parser$paddedHour = _abadi199$dateparser$InternalDate_Parser$paddedInts(
	A2(_elm_lang$core$List$range, 0, 12));
var _abadi199$dateparser$InternalDate_Parser$paddedMinute = _abadi199$dateparser$InternalDate_Parser$paddedInts(
	A2(_elm_lang$core$List$range, 0, 59));
var _abadi199$dateparser$InternalDate_Parser$timeZoneOffset = F2(
	function (useColon, internalDate) {
		var updateInternalDate = F2(
			function (sign, _p2) {
				var _p3 = _p2;
				return _elm_tools$parser$Parser$succeed(
					_elm_lang$core$Native_Utils.update(
						internalDate,
						{timeZoneOffset: sign * ((_p3._0 * 60) + _p3._1)}));
			});
		var parser = useColon ? A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					_elm_tools$parser$Parser$succeed(
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							})),
					_abadi199$dateparser$InternalDate_Parser$paddedHour),
				_elm_tools$parser$Parser$symbol(':')),
			_abadi199$dateparser$InternalDate_Parser$paddedMinute) : A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				_elm_tools$parser$Parser$succeed(
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						})),
				_abadi199$dateparser$InternalDate_Parser$paddedHour),
			_abadi199$dateparser$InternalDate_Parser$paddedMinute);
		return _elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser$andThen,
					updateInternalDate(-1),
					A2(
						_elm_tools$parser$Parser$delayedCommit,
						_elm_tools$parser$Parser$symbol('+'),
						parser)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser$andThen,
						updateInternalDate(1),
						A2(
							_elm_tools$parser$Parser$delayedCommit,
							_elm_tools$parser$Parser$symbol('-'),
							parser)),
					_1: {ctor: '[]'}
				}
			});
	});
var _abadi199$dateparser$InternalDate_Parser$millisecond = function (internalDate) {
	var firstDigit = function (ms) {
		return (_elm_lang$core$Native_Utils.cmp(ms, 1000) < 0) ? _elm_tools$parser$Parser$succeed(
			_elm_lang$core$Native_Utils.update(
				internalDate,
				{millisecond: ms})) : _elm_tools$parser$Parser$fail('not millisecond');
	};
	var secondDigit = function (ms) {
		return (_elm_lang$core$Native_Utils.cmp(ms, 100) < 0) ? _elm_tools$parser$Parser$succeed(
			_elm_lang$core$Native_Utils.update(
				internalDate,
				{millisecond: ms})) : _elm_tools$parser$Parser$fail('not millisecond');
	};
	var thirdDigit = function (ms) {
		return (_elm_lang$core$Native_Utils.cmp(ms, 10) < 0) ? _elm_tools$parser$Parser$succeed(
			_elm_lang$core$Native_Utils.update(
				internalDate,
				{millisecond: ms})) : _elm_tools$parser$Parser$fail('not millisecond');
	};
	return _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_tools$parser$Parser$andThen,
				thirdDigit,
				A2(
					_elm_tools$parser$Parser$delayedCommit,
					_elm_tools$parser$Parser$symbol('00'),
					_elm_tools$parser$Parser$int)),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser$andThen,
					secondDigit,
					A2(
						_elm_tools$parser$Parser$delayedCommit,
						_elm_tools$parser$Parser$symbol('0'),
						_elm_tools$parser$Parser$int)),
				_1: {
					ctor: '::',
					_0: A2(_elm_tools$parser$Parser$andThen, firstDigit, _elm_tools$parser$Parser$int),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _abadi199$dateparser$InternalDate_Parser$paddedInt = F3(
	function (pad, f, number) {
		var numberStr = _elm_lang$core$Basics$toString(number);
		var paddedNumber = _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(numberStr),
			1) ? A2(_elm_lang$core$Basics_ops['++'], pad, numberStr) : numberStr;
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(numberStr),
			2) > 0) ? _elm_tools$parser$Parser$fail('Number is more than 2 digit') : A2(
			_elm_tools$parser$Parser$andThen,
			_elm_lang$core$Basics$always(
				_elm_tools$parser$Parser$succeed(
					f(number))),
			_elm_tools$parser$Parser$symbol(paddedNumber));
	});
var _abadi199$dateparser$InternalDate_Parser$number = F2(
	function (f, number) {
		return A2(
			_elm_tools$parser$Parser$andThen,
			_elm_lang$core$Basics$always(
				_elm_tools$parser$Parser$succeed(
					f(number))),
			_elm_tools$parser$Parser$symbol(
				_elm_lang$core$Basics$toString(number)));
	});
var _abadi199$dateparser$InternalDate_Parser$dateSuffix = F3(
	function (usePadding, config, internalDate) {
		var parser = function (date) {
			return A2(
				_elm_tools$parser$Parser$andThen,
				function (_p4) {
					return _elm_tools$parser$Parser$succeed(
						_elm_lang$core$Native_Utils.update(
							internalDate,
							{date: date}));
				},
				_elm_tools$parser$Parser$symbol(
					A2(config.i18n.dayOfMonthWithSuffix, usePadding, date)));
		};
		return _elm_tools$parser$Parser$oneOf(
			A2(
				_elm_lang$core$List$map,
				parser,
				A2(_elm_lang$core$List$range, 1, 31)));
	});
var _abadi199$dateparser$InternalDate_Parser$datePadded = F2(
	function (pad, internalDate) {
		return A2(
			_elm_tools$parser$Parser$inContext,
			'DateZeroPadded',
			_elm_tools$parser$Parser$oneOf(
				A2(
					_elm_lang$core$List$map,
					A2(
						_abadi199$dateparser$InternalDate_Parser$paddedInt,
						pad,
						function (number) {
							return _elm_lang$core$Native_Utils.update(
								internalDate,
								{date: number});
						}),
					A2(_elm_lang$core$List$range, 1, 31))));
	});
var _abadi199$dateparser$InternalDate_Parser$date = function (internalDate) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'date',
		A2(
			_elm_tools$parser$Parser$andThen,
			function (number) {
				return (_elm_lang$core$Native_Utils.cmp(number, 31) < 1) ? _elm_tools$parser$Parser$succeed(
					_elm_lang$core$Native_Utils.update(
						internalDate,
						{date: number})) : _elm_tools$parser$Parser$fail('not a valid date');
			},
			_elm_tools$parser$Parser$int));
};
var _abadi199$dateparser$InternalDate_Parser$dateSpacePadded = _abadi199$dateparser$InternalDate_Parser$datePadded(' ');
var _abadi199$dateparser$InternalDate_Parser$dateZeroPadded = _abadi199$dateparser$InternalDate_Parser$datePadded('0');
var _abadi199$dateparser$InternalDate_Parser$dayNameParser = F3(
	function (config, internalDate, day) {
		var getDayName = config.isFullName ? config.dateConfig.i18n.dayName : config.dateConfig.i18n.dayShort;
		return A2(
			_elm_tools$parser$Parser$andThen,
			_elm_lang$core$Basics$always(
				_elm_tools$parser$Parser$succeed(internalDate)),
			_elm_tools$parser$Parser$symbol(
				A2(
					_abadi199$dateparser$Utilities$toUpper,
					config.isUpper,
					getDayName(day))));
	});
var _abadi199$dateparser$InternalDate_Parser$dayOfWeek = F2(
	function (config, internalDate) {
		return A2(
			_elm_tools$parser$Parser$inContext,
			'DayOfWeek',
			_elm_tools$parser$Parser$oneOf(
				A2(
					_elm_lang$core$List$map,
					A2(_abadi199$dateparser$InternalDate_Parser$dayNameParser, config, internalDate),
					{
						ctor: '::',
						_0: _elm_lang$core$Date$Sun,
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Date$Mon,
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Date$Tue,
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Date$Wed,
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Date$Thu,
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Date$Fri,
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Date$Sat,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					})));
	});
var _abadi199$dateparser$InternalDate_Parser$monthNameParser = F3(
	function (config, internalDate, month) {
		var getMonthName = config.isFullName ? config.dateConfig.i18n.monthName : config.dateConfig.i18n.monthShort;
		return A2(
			_elm_tools$parser$Parser$andThen,
			_elm_lang$core$Basics$always(
				_elm_tools$parser$Parser$succeed(
					_elm_lang$core$Native_Utils.update(
						internalDate,
						{
							month: _abadi199$dateparser$Utilities$monthToInt(month)
						}))),
			_elm_tools$parser$Parser$symbol(
				A2(
					_abadi199$dateparser$Utilities$toUpper,
					config.isUpper,
					getMonthName(month))));
	});
var _abadi199$dateparser$InternalDate_Parser$monthName = F2(
	function (config, internalDate) {
		return A2(
			_elm_tools$parser$Parser$inContext,
			'MonthName',
			_elm_tools$parser$Parser$oneOf(
				A2(
					_elm_lang$core$List$map,
					A2(_abadi199$dateparser$InternalDate_Parser$monthNameParser, config, internalDate),
					{
						ctor: '::',
						_0: _elm_lang$core$Date$Jan,
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Date$Feb,
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Date$Mar,
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Date$Apr,
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Date$May,
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Date$Jun,
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Date$Jul,
												_1: {
													ctor: '::',
													_0: _elm_lang$core$Date$Aug,
													_1: {
														ctor: '::',
														_0: _elm_lang$core$Date$Sep,
														_1: {
															ctor: '::',
															_0: _elm_lang$core$Date$Oct,
															_1: {
																ctor: '::',
																_0: _elm_lang$core$Date$Nov,
																_1: {
																	ctor: '::',
																	_0: _elm_lang$core$Date$Dec,
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					})));
	});
var _abadi199$dateparser$InternalDate_Parser$monthPadded = F2(
	function (pad, internalDate) {
		return _elm_tools$parser$Parser$oneOf(
			A2(
				_elm_lang$core$List$map,
				A2(
					_abadi199$dateparser$InternalDate_Parser$paddedInt,
					pad,
					function (number) {
						return _elm_lang$core$Native_Utils.update(
							internalDate,
							{month: number});
					}),
				A2(_elm_lang$core$List$range, 1, 12)));
	});
var _abadi199$dateparser$InternalDate_Parser$month = function (internalDate) {
	return _elm_tools$parser$Parser$oneOf(
		A2(
			_elm_lang$core$List$map,
			_abadi199$dateparser$InternalDate_Parser$number(
				function ($int) {
					return _elm_lang$core$Native_Utils.update(
						internalDate,
						{month: $int});
				}),
			A2(_elm_lang$core$List$range, 1, 12)));
};
var _abadi199$dateparser$InternalDate_Parser$monthSpacePadded = function (_p5) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'MonthSpacePadded',
		A2(_abadi199$dateparser$InternalDate_Parser$monthPadded, ' ', _p5));
};
var _abadi199$dateparser$InternalDate_Parser$monthZeroPadded = function (_p6) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'MonthZeroPadded',
		A2(_abadi199$dateparser$InternalDate_Parser$monthPadded, '0', _p6));
};
var _abadi199$dateparser$InternalDate_Parser$hour24Padded = F2(
	function (pad, internalDate) {
		return _elm_tools$parser$Parser$oneOf(
			A2(
				_elm_lang$core$List$map,
				A2(
					_abadi199$dateparser$InternalDate_Parser$paddedInt,
					pad,
					function (number) {
						return _elm_lang$core$Native_Utils.update(
							internalDate,
							{hour: number});
					}),
				A2(_elm_lang$core$List$range, 0, 23)));
	});
var _abadi199$dateparser$InternalDate_Parser$hour24 = function (internalDate) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'Hour24',
		A2(
			_elm_tools$parser$Parser$andThen,
			function (hour) {
				return (_elm_lang$core$Native_Utils.cmp(hour, 25) < 0) ? _elm_tools$parser$Parser$succeed(
					_elm_lang$core$Native_Utils.update(
						internalDate,
						{hour: hour})) : _elm_tools$parser$Parser$fail('not a valid 24 hour');
			},
			_elm_tools$parser$Parser$int));
};
var _abadi199$dateparser$InternalDate_Parser$hour24SpacePadded = function (_p7) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'Hour24SpacePadded',
		A2(_abadi199$dateparser$InternalDate_Parser$hour24Padded, ' ', _p7));
};
var _abadi199$dateparser$InternalDate_Parser$hour24ZeroPadded = function (_p8) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'Hour24ZeroPadded',
		A2(_abadi199$dateparser$InternalDate_Parser$hour24Padded, '0', _p8));
};
var _abadi199$dateparser$InternalDate_Parser$hour12Padded = F2(
	function (pad, internalDate) {
		return _elm_tools$parser$Parser$oneOf(
			A2(
				_elm_lang$core$List$map,
				A2(
					_abadi199$dateparser$InternalDate_Parser$paddedInt,
					pad,
					function (number) {
						return _elm_lang$core$Native_Utils.update(
							internalDate,
							{hour: number});
					}),
				A2(_elm_lang$core$List$range, 1, 12)));
	});
var _abadi199$dateparser$InternalDate_Parser$hour12SpacePadded = function (_p9) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'Hour12SpacePadded',
		A2(_abadi199$dateparser$InternalDate_Parser$hour12Padded, ' ', _p9));
};
var _abadi199$dateparser$InternalDate_Parser$hour12ZeroPadded = function (_p10) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'Hour12ZeroPadded',
		A2(_abadi199$dateparser$InternalDate_Parser$hour12Padded, '0', _p10));
};
var _abadi199$dateparser$InternalDate_Parser$hour12 = function (internalDate) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'Hour12',
		A2(
			_elm_tools$parser$Parser$andThen,
			function (hour) {
				return (_elm_lang$core$Native_Utils.cmp(hour, 13) < 0) ? _elm_tools$parser$Parser$succeed(
					_elm_lang$core$Native_Utils.update(
						internalDate,
						{hour: hour})) : _elm_tools$parser$Parser$fail('not a valid 12 hour');
			},
			_elm_tools$parser$Parser$int));
};
var _abadi199$dateparser$InternalDate_Parser$minutePadded = F2(
	function (pad, internalDate) {
		return _elm_tools$parser$Parser$oneOf(
			A2(
				_elm_lang$core$List$map,
				A2(
					_abadi199$dateparser$InternalDate_Parser$paddedInt,
					pad,
					function (number) {
						return _elm_lang$core$Native_Utils.update(
							internalDate,
							{minute: number});
					}),
				A2(_elm_lang$core$List$range, 0, 59)));
	});
var _abadi199$dateparser$InternalDate_Parser$minuteZeroPadded = function (_p11) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'MinuteZeroPadded',
		A2(_abadi199$dateparser$InternalDate_Parser$minutePadded, '0', _p11));
};
var _abadi199$dateparser$InternalDate_Parser$secondPadded = F2(
	function (pad, internalDate) {
		return _elm_tools$parser$Parser$oneOf(
			A2(
				_elm_lang$core$List$map,
				A2(
					_abadi199$dateparser$InternalDate_Parser$paddedInt,
					pad,
					function (number) {
						return _elm_lang$core$Native_Utils.update(
							internalDate,
							{second: number});
					}),
				A2(_elm_lang$core$List$range, 0, 59)));
	});
var _abadi199$dateparser$InternalDate_Parser$secondZeroPadded = function (_p12) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'SecondZeroPadded',
		A2(_abadi199$dateparser$InternalDate_Parser$secondPadded, '0', _p12));
};
var _abadi199$dateparser$InternalDate_Parser$year = function (internalDate) {
	return A2(
		_elm_tools$parser$Parser$andThen,
		function (year) {
			return _elm_tools$parser$Parser$succeed(
				_elm_lang$core$Native_Utils.update(
					internalDate,
					{year: year}));
		},
		A2(
			_elm_tools$parser$Parser$inContext,
			'Year',
			A2(
				_elm_tools$parser$Parser_ops['|='],
				_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
				_elm_tools$parser$Parser$int)));
};
var _abadi199$dateparser$InternalDate_Parser$ampm = function (internalDate) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'ampm',
		_elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser$andThen,
					function (_p13) {
						return _elm_tools$parser$Parser$succeed(
							_elm_lang$core$Native_Utils.update(
								internalDate,
								{
									ampm: _elm_lang$core$Maybe$Just(_abadi199$dateparser$InternalDate_Type$AM)
								}));
					},
					_elm_tools$parser$Parser$symbol('am')),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser$andThen,
						function (_p14) {
							return _elm_tools$parser$Parser$succeed(
								_elm_lang$core$Native_Utils.update(
									internalDate,
									{
										ampm: _elm_lang$core$Maybe$Just(_abadi199$dateparser$InternalDate_Type$PM)
									}));
						},
						_elm_tools$parser$Parser$symbol('pm')),
					_1: {ctor: '[]'}
				}
			}));
};
var _abadi199$dateparser$InternalDate_Parser$aMPM = function (internalDate) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'AMPM',
		_elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser$andThen,
					function (_p15) {
						return _elm_tools$parser$Parser$succeed(
							_elm_lang$core$Native_Utils.update(
								internalDate,
								{
									ampm: _elm_lang$core$Maybe$Just(_abadi199$dateparser$InternalDate_Type$AM)
								}));
					},
					_elm_tools$parser$Parser$symbol('AM')),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser$andThen,
						function (_p16) {
							return _elm_tools$parser$Parser$succeed(
								_elm_lang$core$Native_Utils.update(
									internalDate,
									{
										ampm: _elm_lang$core$Maybe$Just(_abadi199$dateparser$InternalDate_Type$PM)
									}));
						},
						_elm_tools$parser$Parser$symbol('PM')),
					_1: {ctor: '[]'}
				}
			}));
};
var _abadi199$dateparser$InternalDate_Parser$fromPattern = F2(
	function (config, pattern) {
		var _p17 = pattern;
		switch (_p17.ctor) {
			case 'Year':
				return _abadi199$dateparser$InternalDate_Parser$year;
			case 'MonthZeroPadded':
				return _abadi199$dateparser$InternalDate_Parser$monthZeroPadded;
			case 'MonthSpacePadded':
				return _abadi199$dateparser$InternalDate_Parser$monthSpacePadded;
			case 'Month':
				return _abadi199$dateparser$InternalDate_Parser$month;
			case 'MonthFullName':
				return _abadi199$dateparser$InternalDate_Parser$monthName(
					{isFullName: true, isUpper: false, dateConfig: config});
			case 'MonthUpperFullName':
				return _abadi199$dateparser$InternalDate_Parser$monthName(
					{isFullName: true, isUpper: true, dateConfig: config});
			case 'MonthAbbrvName':
				return _abadi199$dateparser$InternalDate_Parser$monthName(
					{isFullName: false, isUpper: false, dateConfig: config});
			case 'MonthUpperAbbrvName':
				return _abadi199$dateparser$InternalDate_Parser$monthName(
					{isFullName: false, isUpper: true, dateConfig: config});
			case 'DateZeroPadded':
				return _abadi199$dateparser$InternalDate_Parser$dateZeroPadded;
			case 'DateSpacePadded':
				return _abadi199$dateparser$InternalDate_Parser$dateSpacePadded;
			case 'Date':
				return _abadi199$dateparser$InternalDate_Parser$date;
			case 'DateSuffix':
				return A2(_abadi199$dateparser$InternalDate_Parser$dateSuffix, false, config);
			case 'DateSpacePaddedSuffix':
				return A2(_abadi199$dateparser$InternalDate_Parser$dateSuffix, true, config);
			case 'DayOfWeekFullName':
				return _abadi199$dateparser$InternalDate_Parser$dayOfWeek(
					{isFullName: true, isUpper: false, dateConfig: config});
			case 'DayOfWeekUpperFullName':
				return _abadi199$dateparser$InternalDate_Parser$dayOfWeek(
					{isFullName: true, isUpper: true, dateConfig: config});
			case 'DayOfWeekAbbrvName':
				return _abadi199$dateparser$InternalDate_Parser$dayOfWeek(
					{isFullName: false, isUpper: false, dateConfig: config});
			case 'DayOfWeekUpperAbbrvName':
				return _abadi199$dateparser$InternalDate_Parser$dayOfWeek(
					{isFullName: false, isUpper: true, dateConfig: config});
			case 'Hour24ZeroPadded':
				return _abadi199$dateparser$InternalDate_Parser$hour24ZeroPadded;
			case 'Hour24SpacePadded':
				return _abadi199$dateparser$InternalDate_Parser$hour24SpacePadded;
			case 'Hour24':
				return _abadi199$dateparser$InternalDate_Parser$hour24;
			case 'Hour12ZeroPadded':
				return _abadi199$dateparser$InternalDate_Parser$hour12ZeroPadded;
			case 'Hour12SpacePadded':
				return _abadi199$dateparser$InternalDate_Parser$hour12SpacePadded;
			case 'Hour12':
				return _abadi199$dateparser$InternalDate_Parser$hour12;
			case 'AMPM':
				return _abadi199$dateparser$InternalDate_Parser$aMPM;
			case 'Ampm':
				return _abadi199$dateparser$InternalDate_Parser$ampm;
			case 'MinuteZeroPadded':
				return _abadi199$dateparser$InternalDate_Parser$minuteZeroPadded;
			case 'SecondZeroPadded':
				return _abadi199$dateparser$InternalDate_Parser$secondZeroPadded;
			case 'Millisecond':
				return _abadi199$dateparser$InternalDate_Parser$millisecond;
			case 'TimeZoneOffset':
				return _abadi199$dateparser$InternalDate_Parser$timeZoneOffset(false);
			case 'TimeZoneOffsetColon':
				return _abadi199$dateparser$InternalDate_Parser$timeZoneOffset(true);
			case 'Whitespace':
				return _abadi199$dateparser$InternalDate_Parser$whitespace;
			default:
				return _abadi199$dateparser$InternalDate_Parser$other(_p17._0);
		}
	});
var _abadi199$dateparser$InternalDate_Parser$ParserConfig = F3(
	function (a, b, c) {
		return {isUpper: a, isFullName: b, dateConfig: c};
	});

var _abadi199$dateparser$InternalDate$toHour = F2(
	function (ampm, hour) {
		var _p0 = {ctor: '_Tuple2', _0: ampm, _1: hour};
		if (_p0._0.ctor === 'AM') {
			if (_p0._1 === 12) {
				return 0;
			} else {
				return hour;
			}
		} else {
			if (_p0._1 === 12) {
				return 12;
			} else {
				return hour + 12;
			}
		}
	});
var _abadi199$dateparser$InternalDate$toHour24 = function (internalDate) {
	var hour = internalDate.hour;
	var _p1 = internalDate.ampm;
	if (_p1.ctor === 'Nothing') {
		return _elm_lang$core$Result$Ok(hour);
	} else {
		return ((_elm_lang$core$Native_Utils.cmp(hour, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(hour, 12) < 1)) ? _elm_lang$core$Result$Ok(
			A2(_abadi199$dateparser$InternalDate$toHour, _p1._0, hour)) : _elm_lang$core$Result$Err('Invalid hour');
	}
};
var _abadi199$dateparser$InternalDate$toDate = function (internalDate) {
	var hourResult = _abadi199$dateparser$InternalDate$toHour24(internalDate);
	var monthResult = _abadi199$dateparser$Utilities$monthFromInt(internalDate.month);
	return A2(
		_elm_lang$core$Result$mapError,
		_abadi199$dateparser$Error$DateError,
		A3(
			_elm_lang$core$Result$map2,
			F2(
				function (month, hour) {
					return A7(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, internalDate.year, month, internalDate.date, hour, internalDate.minute, internalDate.second, internalDate.millisecond);
				}),
			monthResult,
			hourResult));
};
var _abadi199$dateparser$InternalDate$parse = F3(
	function (str, config, patterns) {
		var parser = A3(
			_elm_lang$core$List$foldl,
			F2(
				function (a, b) {
					return A2(_elm_tools$parser$Parser$andThen, a, b);
				}),
			_elm_tools$parser$Parser$succeed(_abadi199$dateparser$InternalDate_Type$emptyDate),
			A2(
				_elm_lang$core$List$map,
				_abadi199$dateparser$InternalDate_Parser$fromPattern(config),
				patterns));
		return A2(
			_elm_lang$core$Result$mapError,
			_abadi199$dateparser$Error$ParsingError,
			A2(_elm_tools$parser$Parser$run, parser, str));
	});

var _abadi199$dateparser$DateParser$parse = F3(
	function (config, pattern, date) {
		return A2(
			_elm_lang$core$Result$andThen,
			_abadi199$dateparser$InternalDate$toDate,
			A2(
				_elm_lang$core$Result$andThen,
				A2(_abadi199$dateparser$InternalDate$parse, date, config),
				_abadi199$dateparser$Pattern$parse(pattern)));
	});

var _abadi199$datetimepicker$DateTimePicker_ClockUtils$minutes = _elm_lang$core$Dict$fromList(
	A2(
		_elm_lang$core$List$map,
		function (minute) {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Basics$toString(minute),
				_1: (_elm_lang$core$Basics$pi * _elm_lang$core$Basics$toFloat(
					60 - A2(_elm_lang$core$Basics_ops['%'], 45 + minute, 60))) / 30
			};
		},
		A2(_elm_lang$core$List$range, 0, 59)));
var _abadi199$datetimepicker$DateTimePicker_ClockUtils$minutesPerFive = _elm_lang$core$Dict$fromList(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: '5', _1: (_elm_lang$core$Basics$pi * 2) / 6},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: '10', _1: (_elm_lang$core$Basics$pi * 1) / 6},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: '15', _1: _elm_lang$core$Basics$pi * 2},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: '20', _1: (_elm_lang$core$Basics$pi * 11) / 6},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: '25', _1: (_elm_lang$core$Basics$pi * 10) / 6},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '30', _1: (_elm_lang$core$Basics$pi * 9) / 6},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '35', _1: (_elm_lang$core$Basics$pi * 8) / 6},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '40', _1: (_elm_lang$core$Basics$pi * 7) / 6},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '45', _1: _elm_lang$core$Basics$pi},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '50', _1: (_elm_lang$core$Basics$pi * 5) / 6},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '55', _1: (_elm_lang$core$Basics$pi * 4) / 6},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '0', _1: _elm_lang$core$Basics$pi / 2},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$datetimepicker$DateTimePicker_ClockUtils$hours = _elm_lang$core$Dict$fromList(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: '1', _1: (_elm_lang$core$Basics$pi * 2) / 6},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: '2', _1: (_elm_lang$core$Basics$pi * 1) / 6},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: '3', _1: _elm_lang$core$Basics$pi * 2},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: '4', _1: (_elm_lang$core$Basics$pi * 11) / 6},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: '5', _1: (_elm_lang$core$Basics$pi * 10) / 6},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '6', _1: (_elm_lang$core$Basics$pi * 9) / 6},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '7', _1: (_elm_lang$core$Basics$pi * 8) / 6},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '8', _1: (_elm_lang$core$Basics$pi * 7) / 6},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '9', _1: _elm_lang$core$Basics$pi},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '10', _1: (_elm_lang$core$Basics$pi * 5) / 6},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '11', _1: (_elm_lang$core$Basics$pi * 4) / 6},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '12', _1: _elm_lang$core$Basics$pi / 2},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$datetimepicker$DateTimePicker_ClockUtils$minuteToAngle = function (minute) {
	return A2(
		_elm_lang$core$Dict$get,
		_elm_lang$core$Basics$toString(minute),
		_abadi199$datetimepicker$DateTimePicker_ClockUtils$minutes);
};
var _abadi199$datetimepicker$DateTimePicker_ClockUtils$hourToAngle = function (hour) {
	return A2(
		_elm_lang$core$Dict$get,
		_elm_lang$core$Basics$toString(hour),
		_abadi199$datetimepicker$DateTimePicker_ClockUtils$hours);
};

var _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayOfMonthWithSuffix = F2(
	function (pad, day) {
		var value = function () {
			var _p0 = day;
			switch (_p0) {
				case 1:
					return '1st';
				case 21:
					return '21st';
				case 2:
					return '2nd';
				case 22:
					return '22nd';
				case 3:
					return '3rd';
				case 23:
					return '23rd';
				case 31:
					return '31st';
				default:
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(day),
						'th');
			}
		}();
		return pad ? A3(
			_elm_lang$core$String$padLeft,
			4,
			_elm_lang$core$Native_Utils.chr(' '),
			value) : value;
	});
var _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$monthName = function (month) {
	var _p1 = month;
	switch (_p1.ctor) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$monthShort = function (month) {
	var _p2 = month;
	switch (_p2.ctor) {
		case 'Jan':
			return 'Jan';
		case 'Feb':
			return 'Feb';
		case 'Mar':
			return 'Mar';
		case 'Apr':
			return 'Apr';
		case 'May':
			return 'May';
		case 'Jun':
			return 'Jun';
		case 'Jul':
			return 'Jul';
		case 'Aug':
			return 'Aug';
		case 'Sep':
			return 'Sep';
		case 'Oct':
			return 'Oct';
		case 'Nov':
			return 'Nov';
		default:
			return 'Dec';
	}
};
var _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayName = function (day) {
	var _p3 = day;
	switch (_p3.ctor) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayShort = function (day) {
	var _p4 = day;
	switch (_p4.ctor) {
		case 'Mon':
			return 'Mon';
		case 'Tue':
			return 'Tue';
		case 'Wed':
			return 'Wed';
		case 'Thu':
			return 'Thu';
		case 'Fri':
			return 'Fri';
		case 'Sat':
			return 'Sat';
		default:
			return 'Sun';
	}
};

var _rluiten$elm_date_extra$Date_Extra_I18n_I_default$twelveHourPeriod = function (period) {
	var _p0 = period;
	if (_p0.ctor === 'AM') {
		return 'AM';
	} else {
		return 'PM';
	}
};

var _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config = {
	i18n: {dayShort: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayShort, dayName: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayName, monthShort: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$monthShort, monthName: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$monthName, dayOfMonthWithSuffix: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayOfMonthWithSuffix, twelveHourPeriod: _rluiten$elm_date_extra$Date_Extra_I18n_I_default$twelveHourPeriod},
	format: {date: '%-m/%-d/%Y', longDate: '%A, %B %d, %Y', time: '%-H:%M %p', longTime: '%-H:%M:%S %p', dateTime: '%-m/%-d/%Y %-I:%M %p', firstDayOfWeek: _elm_lang$core$Date$Sun}
};

var _rluiten$elm_date_extra$Date_Extra_Compare$is3 = F4(
	function (comp, date1, date2, date3) {
		var time3 = _rluiten$elm_date_extra$Date_Extra_Core$toTime(date3);
		var time2 = _rluiten$elm_date_extra$Date_Extra_Core$toTime(date2);
		var highBound = A2(_elm_lang$core$Basics$max, time2, time3);
		var lowBound = A2(_elm_lang$core$Basics$min, time2, time3);
		var time1 = _rluiten$elm_date_extra$Date_Extra_Core$toTime(date1);
		var _p0 = comp;
		switch (_p0.ctor) {
			case 'Between':
				return (_elm_lang$core$Native_Utils.cmp(time1, lowBound) > 0) && (_elm_lang$core$Native_Utils.cmp(time1, highBound) < 0);
			case 'BetweenOpenStart':
				return (_elm_lang$core$Native_Utils.cmp(time1, lowBound) > -1) && (_elm_lang$core$Native_Utils.cmp(time1, highBound) < 0);
			case 'BetweenOpenEnd':
				return (_elm_lang$core$Native_Utils.cmp(time1, lowBound) > 0) && (_elm_lang$core$Native_Utils.cmp(time1, highBound) < 1);
			default:
				return (_elm_lang$core$Native_Utils.cmp(time1, lowBound) > -1) && (_elm_lang$core$Native_Utils.cmp(time1, highBound) < 1);
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Compare$is = F3(
	function (comp, date1, date2) {
		var time2 = _rluiten$elm_date_extra$Date_Extra_Core$toTime(date2);
		var time1 = _rluiten$elm_date_extra$Date_Extra_Core$toTime(date1);
		var _p1 = comp;
		switch (_p1.ctor) {
			case 'Before':
				return _elm_lang$core$Native_Utils.cmp(time1, time2) < 0;
			case 'After':
				return _elm_lang$core$Native_Utils.cmp(time1, time2) > 0;
			case 'Same':
				return _elm_lang$core$Native_Utils.eq(time1, time2);
			case 'SameOrBefore':
				return _elm_lang$core$Native_Utils.cmp(time1, time2) < 1;
			default:
				return _elm_lang$core$Native_Utils.cmp(time1, time2) > -1;
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Compare$SameOrBefore = {ctor: 'SameOrBefore'};
var _rluiten$elm_date_extra$Date_Extra_Compare$SameOrAfter = {ctor: 'SameOrAfter'};
var _rluiten$elm_date_extra$Date_Extra_Compare$Same = {ctor: 'Same'};
var _rluiten$elm_date_extra$Date_Extra_Compare$Before = {ctor: 'Before'};
var _rluiten$elm_date_extra$Date_Extra_Compare$After = {ctor: 'After'};
var _rluiten$elm_date_extra$Date_Extra_Compare$BetweenOpen = {ctor: 'BetweenOpen'};
var _rluiten$elm_date_extra$Date_Extra_Compare$BetweenOpenEnd = {ctor: 'BetweenOpenEnd'};
var _rluiten$elm_date_extra$Date_Extra_Compare$BetweenOpenStart = {ctor: 'BetweenOpenStart'};
var _rluiten$elm_date_extra$Date_Extra_Compare$Between = {ctor: 'Between'};

var _rluiten$elm_date_extra$Date_Extra_Duration$positiveDiffDays = F3(
	function (date1, date2, multiplier) {
		var date2DaysFromCivil = A3(
			_rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil,
			_elm_lang$core$Date$year(date2),
			_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
				_elm_lang$core$Date$month(date2)),
			_elm_lang$core$Date$day(date2));
		var date1DaysFromCivil = A3(
			_rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil,
			_elm_lang$core$Date$year(date1),
			_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
				_elm_lang$core$Date$month(date1)),
			_elm_lang$core$Date$day(date1));
		return (date1DaysFromCivil - date2DaysFromCivil) * multiplier;
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$diffDays = F2(
	function (date1, date2) {
		return A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$After, date1, date2) ? A3(_rluiten$elm_date_extra$Date_Extra_Duration$positiveDiffDays, date1, date2, 1) : A3(_rluiten$elm_date_extra$Date_Extra_Duration$positiveDiffDays, date2, date1, -1);
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$positiveDiff = F3(
	function (date1, date2, multiplier) {
		var propogateCarry = F3(
			function (current, carry, maxVal) {
				var adjusted = current + carry;
				return (_elm_lang$core$Native_Utils.cmp(adjusted, 0) < 0) ? {ctor: '_Tuple2', _0: maxVal + adjusted, _1: -1} : {ctor: '_Tuple2', _0: adjusted, _1: 0};
			});
		var accumulatedDiff = F4(
			function (acc, v1, v2, maxV2) {
				return (_elm_lang$core$Native_Utils.cmp(v1, v2) < 0) ? {ctor: '_Tuple2', _0: acc - 1, _1: (maxV2 + v1) - v2} : {ctor: '_Tuple2', _0: acc, _1: v1 - v2};
			});
		var msec2 = _elm_lang$core$Date$millisecond(date2);
		var msec1 = _elm_lang$core$Date$millisecond(date1);
		var second2 = _elm_lang$core$Date$second(date2);
		var second1 = _elm_lang$core$Date$second(date1);
		var minute2 = _elm_lang$core$Date$minute(date2);
		var minute1 = _elm_lang$core$Date$minute(date1);
		var hour2 = _elm_lang$core$Date$hour(date2);
		var hour1 = _elm_lang$core$Date$hour(date1);
		var day2 = _elm_lang$core$Date$day(date2);
		var day1 = _elm_lang$core$Date$day(date1);
		var month2Mon = _elm_lang$core$Date$month(date2);
		var month2 = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt(month2Mon);
		var month1Mon = _elm_lang$core$Date$month(date1);
		var month1 = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt(month1Mon);
		var year2 = _elm_lang$core$Date$year(date2);
		var daysInDate2Month = A2(_rluiten$elm_date_extra$Date_Extra_Core$daysInMonth, year2, month2Mon);
		var year1 = _elm_lang$core$Date$year(date1);
		var daysInDate1Month = A2(_rluiten$elm_date_extra$Date_Extra_Core$daysInMonth, year1, month1Mon);
		var _p0 = A4(accumulatedDiff, year1 - year2, month1, month2, 12);
		var yearDiff = _p0._0;
		var monthDiffA = _p0._1;
		var _p1 = A4(accumulatedDiff, monthDiffA, day1, day2, daysInDate2Month);
		var monthDiff = _p1._0;
		var dayDiffA = _p1._1;
		var _p2 = A4(accumulatedDiff, dayDiffA, hour1, hour2, 24);
		var dayDiff = _p2._0;
		var hourDiffA = _p2._1;
		var _p3 = A4(accumulatedDiff, hourDiffA, minute1, minute2, 60);
		var hourDiff = _p3._0;
		var minuteDiffA = _p3._1;
		var _p4 = A4(accumulatedDiff, minuteDiffA, second1, second2, 60);
		var minuteDiff = _p4._0;
		var secondDiffA = _p4._1;
		var _p5 = A4(accumulatedDiff, secondDiffA, msec1, msec2, 1000);
		var secondDiff = _p5._0;
		var msecDiff = _p5._1;
		var _p6 = A3(propogateCarry, msecDiff, 0, 1000);
		var msecX = _p6._0;
		var secondCarry = _p6._1;
		var _p7 = A3(propogateCarry, secondDiff, secondCarry, 60);
		var secondX = _p7._0;
		var minuteCarry = _p7._1;
		var _p8 = A3(propogateCarry, minuteDiff, minuteCarry, 60);
		var minuteX = _p8._0;
		var hourCarry = _p8._1;
		var _p9 = A3(propogateCarry, hourDiff, hourCarry, 60);
		var hourX = _p9._0;
		var dayCarry = _p9._1;
		var _p10 = A3(propogateCarry, dayDiff, dayCarry, daysInDate1Month);
		var dayX = _p10._0;
		var monthCarry = _p10._1;
		var _p11 = A3(propogateCarry, monthDiff, monthCarry, 12);
		var monthX = _p11._0;
		var yearCarry = _p11._1;
		var _p12 = A3(propogateCarry, yearDiff, yearCarry, 0);
		var yearX = _p12._0;
		return {year: yearX * multiplier, month: monthX * multiplier, day: dayX * multiplier, hour: hourX * multiplier, minute: minuteX * multiplier, second: secondX * multiplier, millisecond: msecX * multiplier};
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$diff = F2(
	function (date1, date2) {
		return A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$After, date1, date2) ? A3(_rluiten$elm_date_extra$Date_Extra_Duration$positiveDiff, date1, date2, 1) : A3(_rluiten$elm_date_extra$Date_Extra_Duration$positiveDiff, date2, date1, -1);
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$addMonth = F2(
	function (monthCount, date) {
		var day = _elm_lang$core$Date$day(date);
		var monthInt = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
			_elm_lang$core$Date$month(date));
		var newMonthInt = monthInt + monthCount;
		var targetMonthInt = A2(_elm_lang$core$Basics_ops['%'], newMonthInt, 12);
		var yearOffset = ((_elm_lang$core$Native_Utils.cmp(newMonthInt, 0) < 0) && (!_elm_lang$core$Native_Utils.eq(targetMonthInt, 0))) ? (((newMonthInt / 12) | 0) - 1) : ((newMonthInt / 12) | 0);
		var year = _elm_lang$core$Date$year(date);
		var inputCivil = A3(_rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil, year, monthInt, day);
		var newYear = year + yearOffset;
		var newDay = A2(
			_elm_lang$core$Basics$min,
			A2(
				_rluiten$elm_date_extra$Date_Extra_Core$daysInMonth,
				newYear,
				_rluiten$elm_date_extra$Date_Extra_Core$intToMonth(newMonthInt)),
			day);
		var newCivil = A3(_rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil, newYear, targetMonthInt, newDay);
		var daysDifferent = newCivil - inputCivil;
		return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Day, daysDifferent, date);
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$addYear = F2(
	function (yearCount, date) {
		return A2(_rluiten$elm_date_extra$Date_Extra_Duration$addMonth, 12 * yearCount, date);
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$daylightOffsetCompensate = F2(
	function (dateBefore, dateAfter) {
		var offsetAfter = _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(dateAfter);
		var offsetBefore = _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(dateBefore);
		if (!_elm_lang$core$Native_Utils.eq(offsetBefore, offsetAfter)) {
			var adjustedDate = A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Millisecond, (offsetAfter - offsetBefore) * _rluiten$elm_date_extra$Date_Extra_Core$ticksAMinute, dateAfter);
			var adjustedOffset = _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(adjustedDate);
			return (!_elm_lang$core$Native_Utils.eq(adjustedOffset, offsetAfter)) ? dateAfter : adjustedDate;
		} else {
			return dateAfter;
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$requireDaylightCompensateInAdd = function (duration) {
	var _p13 = duration;
	switch (_p13.ctor) {
		case 'Millisecond':
			return false;
		case 'Second':
			return false;
		case 'Minute':
			return false;
		case 'Hour':
			return false;
		case 'Day':
			return true;
		case 'Week':
			return true;
		case 'Month':
			return true;
		case 'Year':
			return true;
		default:
			var _p14 = _p13._0;
			return (!_elm_lang$core$Native_Utils.eq(_p14.day, 0)) || ((!_elm_lang$core$Native_Utils.eq(_p14.month, 0)) || (!_elm_lang$core$Native_Utils.eq(_p14.year, 0)));
	}
};
var _rluiten$elm_date_extra$Date_Extra_Duration$zeroDelta = {year: 0, month: 0, day: 0, hour: 0, minute: 0, second: 0, millisecond: 0};
var _rluiten$elm_date_extra$Date_Extra_Duration$DeltaRecord = F7(
	function (a, b, c, d, e, f, g) {
		return {year: a, month: b, day: c, hour: d, minute: e, second: f, millisecond: g};
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$Delta = function (a) {
	return {ctor: 'Delta', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Duration$Year = {ctor: 'Year'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Month = {ctor: 'Month'};
var _rluiten$elm_date_extra$Date_Extra_Duration$doAdd = F3(
	function (duration, addend, date) {
		var _p15 = duration;
		switch (_p15.ctor) {
			case 'Millisecond':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Millisecond, addend, date);
			case 'Second':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Second, addend, date);
			case 'Minute':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Minute, addend, date);
			case 'Hour':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Hour, addend, date);
			case 'Day':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Day, addend, date);
			case 'Week':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Week, addend, date);
			case 'Month':
				return A2(_rluiten$elm_date_extra$Date_Extra_Duration$addMonth, addend, date);
			case 'Year':
				return A2(_rluiten$elm_date_extra$Date_Extra_Duration$addYear, addend, date);
			default:
				var _p16 = _p15._0;
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Period$add,
					_rluiten$elm_date_extra$Date_Extra_Period$Delta(
						{week: 0, day: _p16.day, hour: _p16.hour, minute: _p16.minute, second: _p16.second, millisecond: _p16.millisecond}),
					addend,
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$doAdd,
						_rluiten$elm_date_extra$Date_Extra_Duration$Month,
						_p16.month,
						A3(_rluiten$elm_date_extra$Date_Extra_Duration$doAdd, _rluiten$elm_date_extra$Date_Extra_Duration$Year, _p16.year, date)));
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$add = F3(
	function (duration, addend, date) {
		var outputDate = A3(_rluiten$elm_date_extra$Date_Extra_Duration$doAdd, duration, addend, date);
		return _rluiten$elm_date_extra$Date_Extra_Duration$requireDaylightCompensateInAdd(duration) ? A2(_rluiten$elm_date_extra$Date_Extra_Duration$daylightOffsetCompensate, date, outputDate) : outputDate;
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$Week = {ctor: 'Week'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Day = {ctor: 'Day'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Hour = {ctor: 'Hour'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Minute = {ctor: 'Minute'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Second = {ctor: 'Second'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Millisecond = {ctor: 'Millisecond'};

var _rluiten$elm_date_extra$Date_Extra_Field$dayOfWeekToDate = F3(
	function (newDayOfWeek, startOfWeekDay, date) {
		var targetIsoDay = _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(newDayOfWeek);
		var dayOfWeek = _elm_lang$core$Date$dayOfWeek(date);
		var daysToStartOfWeek = A2(_rluiten$elm_date_extra$Date_Extra_Core$daysBackToStartOfWeek, dayOfWeek, startOfWeekDay);
		var isoDay = _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(dayOfWeek);
		var dayDiff = targetIsoDay - isoDay;
		var adjustedDiff = (_elm_lang$core$Native_Utils.cmp(daysToStartOfWeek + dayDiff, 0) < 0) ? (dayDiff + 7) : dayDiff;
		return A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Day, adjustedDiff, date);
	});
var _rluiten$elm_date_extra$Date_Extra_Field$monthToDate = F2(
	function (month, date) {
		var monthInt = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
			_elm_lang$core$Date$month(date));
		var targetMonthInt = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt(month);
		return A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Month, targetMonthInt - monthInt, date);
	});
var _rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp = F2(
	function (field, date) {
		var _p0 = field;
		switch (_p0.ctor) {
			case 'Millisecond':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Millisecond,
					A3(_elm_lang$core$Basics$clamp, 0, 999, _p0._0) - _elm_lang$core$Date$millisecond(date),
					date);
			case 'Second':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Second,
					A3(_elm_lang$core$Basics$clamp, 0, 59, _p0._0) - _elm_lang$core$Date$second(date),
					date);
			case 'Minute':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Minute,
					A3(_elm_lang$core$Basics$clamp, 0, 59, _p0._0) - _elm_lang$core$Date$minute(date),
					date);
			case 'Hour':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Hour,
					A3(_elm_lang$core$Basics$clamp, 0, 23, _p0._0) - _elm_lang$core$Date$hour(date),
					date);
			case 'DayOfWeek':
				return A3(_rluiten$elm_date_extra$Date_Extra_Field$dayOfWeekToDate, _p0._0._0, _p0._0._1, date);
			case 'DayOfMonth':
				var maxDays = _rluiten$elm_date_extra$Date_Extra_Core$daysInMonthDate(date);
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Day,
					A3(_elm_lang$core$Basics$clamp, 1, maxDays, _p0._0) - _elm_lang$core$Date$day(date),
					date);
			case 'Month':
				return A2(_rluiten$elm_date_extra$Date_Extra_Field$monthToDate, _p0._0, date);
			default:
				var _p1 = _p0._0;
				var minYear = (_elm_lang$core$Native_Utils.cmp(_p1, 0) < 0) ? 0 : _p1;
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Year,
					minYear - _elm_lang$core$Date$year(date),
					date);
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Field$fieldToDate = F2(
	function (field, date) {
		var _p2 = field;
		switch (_p2.ctor) {
			case 'Millisecond':
				var _p3 = _p2._0;
				return ((_elm_lang$core$Native_Utils.cmp(_p3, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(_p3, 999) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Millisecond,
						_p3 - _elm_lang$core$Date$millisecond(date),
						date));
			case 'Second':
				var _p4 = _p2._0;
				return ((_elm_lang$core$Native_Utils.cmp(_p4, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(_p4, 59) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Second,
						_p4 - _elm_lang$core$Date$second(date),
						date));
			case 'Minute':
				var _p5 = _p2._0;
				return ((_elm_lang$core$Native_Utils.cmp(_p5, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(_p5, 59) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Minute,
						_p5 - _elm_lang$core$Date$minute(date),
						date));
			case 'Hour':
				var _p6 = _p2._0;
				return ((_elm_lang$core$Native_Utils.cmp(_p6, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(_p6, 23) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Hour,
						_p6 - _elm_lang$core$Date$hour(date),
						date));
			case 'DayOfWeek':
				return _elm_lang$core$Maybe$Just(
					A3(_rluiten$elm_date_extra$Date_Extra_Field$dayOfWeekToDate, _p2._0._0, _p2._0._1, date));
			case 'DayOfMonth':
				var _p7 = _p2._0;
				var maxDays = _rluiten$elm_date_extra$Date_Extra_Core$daysInMonthDate(date);
				return ((_elm_lang$core$Native_Utils.cmp(_p7, 1) < 0) || (_elm_lang$core$Native_Utils.cmp(_p7, maxDays) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Day,
						_p7 - _elm_lang$core$Date$day(date),
						date));
			case 'Month':
				return _elm_lang$core$Maybe$Just(
					A2(_rluiten$elm_date_extra$Date_Extra_Field$monthToDate, _p2._0, date));
			default:
				var _p8 = _p2._0;
				return (_elm_lang$core$Native_Utils.cmp(_p8, 0) < 0) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Year,
						_p8 - _elm_lang$core$Date$year(date),
						date));
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Field$Year = function (a) {
	return {ctor: 'Year', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$Month = function (a) {
	return {ctor: 'Month', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$DayOfMonth = function (a) {
	return {ctor: 'DayOfMonth', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$DayOfWeek = function (a) {
	return {ctor: 'DayOfWeek', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$Hour = function (a) {
	return {ctor: 'Hour', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$Minute = function (a) {
	return {ctor: 'Minute', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$Second = function (a) {
	return {ctor: 'Second', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$Millisecond = function (a) {
	return {ctor: 'Millisecond', _0: a};
};

var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Year = {ctor: 'Year'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Month = {ctor: 'Month'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Day = {ctor: 'Day'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Hour = {ctor: 'Hour'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Minute = {ctor: 'Minute'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Second = {ctor: 'Second'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime = F2(
	function (unit, date) {
		var _p0 = unit;
		switch (_p0.ctor) {
			case 'Millisecond':
				return date;
			case 'Second':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Millisecond(0),
					date);
			case 'Minute':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Second(0),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Second, date));
			case 'Hour':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Minute(0),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Minute, date));
			case 'Day':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Hour(0),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Hour, date));
			case 'Month':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$DayOfMonth(1),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Day, date));
			default:
				return _rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTimeYear(date);
		}
	});
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTimeYear = function (date) {
	var startMonthDate = A2(
		_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
		_rluiten$elm_date_extra$Date_Extra_Field$DayOfMonth(1),
		date);
	var startYearDate = A2(
		_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
		_rluiten$elm_date_extra$Date_Extra_Field$Month(_elm_lang$core$Date$Jan),
		startMonthDate);
	var monthTicks = _rluiten$elm_date_extra$Date_Extra_Core$toTime(startMonthDate) - _rluiten$elm_date_extra$Date_Extra_Core$toTime(startYearDate);
	var updatedDate = _rluiten$elm_date_extra$Date_Extra_Core$fromTime(
		_rluiten$elm_date_extra$Date_Extra_Core$toTime(date) - monthTicks);
	return A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Month, updatedDate);
};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$endOfTime = F2(
	function (unit, date) {
		var _p1 = unit;
		switch (_p1.ctor) {
			case 'Millisecond':
				return date;
			case 'Second':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Millisecond(999),
					date);
			case 'Minute':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Second(59),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$endOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Second, date));
			case 'Hour':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Minute(59),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$endOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Minute, date));
			case 'Day':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Hour(23),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$endOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Hour, date));
			case 'Month':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$DayOfMonth(31),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$endOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Day, date));
			default:
				var extraYear = A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Year, 1, date);
				var startYear = A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Year, extraYear);
				return A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Millisecond, -1, startYear);
		}
	});
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Millisecond = {ctor: 'Millisecond'};

//import Maybe, Native.List //

var _elm_lang$core$Native_Regex = function() {

function escape(str)
{
	return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
function caseInsensitive(re)
{
	return new RegExp(re.source, 'gi');
}
function regex(raw)
{
	return new RegExp(raw, 'g');
}

function contains(re, string)
{
	return string.match(re) !== null;
}

function find(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex === re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		out.push({
			match: result[0],
			submatches: _elm_lang$core$Native_List.fromArray(subs),
			index: result.index,
			number: number
		});
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

function replace(n, re, replacer, string)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		return replacer({
			match: match,
			submatches: _elm_lang$core$Native_List.fromArray(submatches),
			index: arguments[arguments.length - 2],
			number: count
		});
	}
	return string.replace(re, jsReplacer);
}

function split(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	if (n === Infinity)
	{
		return _elm_lang$core$Native_List.fromArray(str.split(re));
	}
	var string = str;
	var result;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		if (!(result = re.exec(string))) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

return {
	regex: regex,
	caseInsensitive: caseInsensitive,
	escape: escape,

	contains: F2(contains),
	find: F3(find),
	replace: F4(replace),
	split: F3(split)
};

}();

var _elm_lang$core$Regex$split = _elm_lang$core$Native_Regex.split;
var _elm_lang$core$Regex$replace = _elm_lang$core$Native_Regex.replace;
var _elm_lang$core$Regex$find = _elm_lang$core$Native_Regex.find;
var _elm_lang$core$Regex$contains = _elm_lang$core$Native_Regex.contains;
var _elm_lang$core$Regex$caseInsensitive = _elm_lang$core$Native_Regex.caseInsensitive;
var _elm_lang$core$Regex$regex = _elm_lang$core$Native_Regex.regex;
var _elm_lang$core$Regex$escape = _elm_lang$core$Native_Regex.escape;
var _elm_lang$core$Regex$Match = F4(
	function (a, b, c, d) {
		return {match: a, submatches: b, index: c, number: d};
	});
var _elm_lang$core$Regex$Regex = {ctor: 'Regex'};
var _elm_lang$core$Regex$AtMost = function (a) {
	return {ctor: 'AtMost', _0: a};
};
var _elm_lang$core$Regex$All = {ctor: 'All'};

var _rluiten$elm_date_extra$Date_Extra_Utils$unsafeFromString = function (dateStr) {
	var _p0 = _elm_lang$core$Date$fromString(dateStr);
	if (_p0.ctor === 'Ok') {
		return _p0._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Date.Extra.Utils',
			{
				start: {line: 146, column: 5},
				end: {line: 151, column: 43}
			},
			_p0)('unsafeFromString');
	}
};
var _rluiten$elm_date_extra$Date_Extra_Utils$isoDayofWeekMonday = _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(_elm_lang$core$Date$Mon);
var _rluiten$elm_date_extra$Date_Extra_Utils$isoWeekOne = function (year) {
	var dateJan4 = A7(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, year, _elm_lang$core$Date$Jan, 4, 0, 0, 0, 0);
	return A3(
		_rluiten$elm_date_extra$Date_Extra_Duration$add,
		_rluiten$elm_date_extra$Date_Extra_Duration$Day,
		_rluiten$elm_date_extra$Date_Extra_Utils$isoDayofWeekMonday - _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(
			_elm_lang$core$Date$dayOfWeek(dateJan4)),
		dateJan4);
};
var _rluiten$elm_date_extra$Date_Extra_Utils$getYearIsoWeekDate = function (date) {
	var inputYear = _elm_lang$core$Date$year(date);
	var maxIsoWeekDateInYear = A7(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, inputYear, _elm_lang$core$Date$Dec, 29, 0, 0, 0, 0);
	if (A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$SameOrAfter, date, maxIsoWeekDateInYear)) {
		var nextYearIsoWeek1Date = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeekOne(inputYear + 1);
		return A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$Before, date, nextYearIsoWeek1Date) ? {
			ctor: '_Tuple2',
			_0: inputYear,
			_1: _rluiten$elm_date_extra$Date_Extra_Utils$isoWeekOne(inputYear)
		} : {ctor: '_Tuple2', _0: inputYear + 1, _1: nextYearIsoWeek1Date};
	} else {
		var thisYearIsoWeek1Date = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeekOne(inputYear);
		return A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$Before, date, thisYearIsoWeek1Date) ? {
			ctor: '_Tuple2',
			_0: inputYear - 1,
			_1: _rluiten$elm_date_extra$Date_Extra_Utils$isoWeekOne(inputYear - 1)
		} : {ctor: '_Tuple2', _0: inputYear, _1: thisYearIsoWeek1Date};
	}
};
var _rluiten$elm_date_extra$Date_Extra_Utils$isoWeek = function (date) {
	var _p2 = _rluiten$elm_date_extra$Date_Extra_Utils$getYearIsoWeekDate(date);
	var year = _p2._0;
	var isoWeek1Date = _p2._1;
	var daysSinceIsoWeek1 = A2(_rluiten$elm_date_extra$Date_Extra_Duration$diffDays, date, isoWeek1Date);
	return {
		ctor: '_Tuple3',
		_0: year,
		_1: ((daysSinceIsoWeek1 / 7) | 0) + 1,
		_2: _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(
			_elm_lang$core$Date$dayOfWeek(date))
	};
};
var _rluiten$elm_date_extra$Date_Extra_Utils$dayList_ = F3(
	function (dayCount, date, list) {
		dayList_:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(dayCount, 0)) {
				return list;
			} else {
				if (_elm_lang$core$Native_Utils.cmp(dayCount, 0) > 0) {
					var _v1 = dayCount - 1,
						_v2 = A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Day, 1, date),
						_v3 = {ctor: '::', _0: date, _1: list};
					dayCount = _v1;
					date = _v2;
					list = _v3;
					continue dayList_;
				} else {
					var _v4 = dayCount + 1,
						_v5 = A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Day, -1, date),
						_v6 = {ctor: '::', _0: date, _1: list};
					dayCount = _v4;
					date = _v5;
					list = _v6;
					continue dayList_;
				}
			}
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Utils$dayList = F2(
	function (dayCount, startDate) {
		return _elm_lang$core$List$reverse(
			A3(
				_rluiten$elm_date_extra$Date_Extra_Utils$dayList_,
				dayCount,
				startDate,
				{ctor: '[]'}));
	});

var _rluiten$elm_date_extra$Date_Extra_Format$toHourMin = function (offsetMinutes) {
	return {
		ctor: '_Tuple2',
		_0: (offsetMinutes / 60) | 0,
		_1: A2(_elm_lang$core$Basics_ops['%'], offsetMinutes, 60)
	};
};
var _rluiten$elm_date_extra$Date_Extra_Format$padWithN = F2(
	function (n, c) {
		return function (_p0) {
			return A3(
				_elm_lang$core$String$padLeft,
				n,
				c,
				_elm_lang$core$Basics$toString(_p0));
		};
	});
var _rluiten$elm_date_extra$Date_Extra_Format$padWith = function (c) {
	return function (_p1) {
		return A3(
			_elm_lang$core$String$padLeft,
			2,
			c,
			_elm_lang$core$Basics$toString(_p1));
	};
};
var _rluiten$elm_date_extra$Date_Extra_Format$hourMod12 = function (h) {
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], h, 12),
		0) ? 12 : A2(_elm_lang$core$Basics_ops['%'], h, 12);
};
var _rluiten$elm_date_extra$Date_Extra_Format$formatOffsetStr = F2(
	function (betweenHoursMinutes, offset) {
		var _p2 = _rluiten$elm_date_extra$Date_Extra_Format$toHourMin(
			_elm_lang$core$Basics$abs(offset));
		var hour = _p2._0;
		var minute = _p2._1;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			(_elm_lang$core$Native_Utils.cmp(offset, 0) < 1) ? '+' : '-',
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					hour),
				A2(
					_elm_lang$core$Basics_ops['++'],
					betweenHoursMinutes,
					A2(
						_rluiten$elm_date_extra$Date_Extra_Format$padWith,
						_elm_lang$core$Native_Utils.chr('0'),
						minute))));
	});
var _rluiten$elm_date_extra$Date_Extra_Format$collapse = function (m) {
	return A2(_elm_lang$core$Maybe$andThen, _elm_lang$core$Basics$identity, m);
};
var _rluiten$elm_date_extra$Date_Extra_Format$formatToken = F4(
	function (config, offset, d, m) {
		var symbol = A2(
			_elm_lang$core$Maybe$withDefault,
			' ',
			_rluiten$elm_date_extra$Date_Extra_Format$collapse(
				_elm_lang$core$List$head(m.submatches)));
		var _p3 = symbol;
		switch (_p3) {
			case 'Y':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Format$padWithN,
					4,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$year(d));
			case 'y':
				return A2(
					_elm_lang$core$String$right,
					2,
					A3(
						_rluiten$elm_date_extra$Date_Extra_Format$padWithN,
						2,
						_elm_lang$core$Native_Utils.chr('0'),
						_elm_lang$core$Date$year(d)));
			case 'm':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
						_elm_lang$core$Date$month(d)));
			case '_m':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr(' '),
					_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
						_elm_lang$core$Date$month(d)));
			case '-m':
				return _elm_lang$core$Basics$toString(
					_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
						_elm_lang$core$Date$month(d)));
			case 'B':
				return config.i18n.monthName(
					_elm_lang$core$Date$month(d));
			case '^B':
				return _elm_lang$core$String$toUpper(
					config.i18n.monthName(
						_elm_lang$core$Date$month(d)));
			case 'b':
				return config.i18n.monthShort(
					_elm_lang$core$Date$month(d));
			case '^b':
				return _elm_lang$core$String$toUpper(
					config.i18n.monthShort(
						_elm_lang$core$Date$month(d)));
			case 'd':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$day(d));
			case '-d':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$day(d));
			case '-@d':
				return A2(
					config.i18n.dayOfMonthWithSuffix,
					false,
					_elm_lang$core$Date$day(d));
			case 'e':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr(' '),
					_elm_lang$core$Date$day(d));
			case '@e':
				return A2(
					config.i18n.dayOfMonthWithSuffix,
					true,
					_elm_lang$core$Date$day(d));
			case 'A':
				return config.i18n.dayName(
					_elm_lang$core$Date$dayOfWeek(d));
			case '^A':
				return _elm_lang$core$String$toUpper(
					config.i18n.dayName(
						_elm_lang$core$Date$dayOfWeek(d)));
			case 'a':
				return config.i18n.dayShort(
					_elm_lang$core$Date$dayOfWeek(d));
			case '^a':
				return _elm_lang$core$String$toUpper(
					config.i18n.dayShort(
						_elm_lang$core$Date$dayOfWeek(d)));
			case 'H':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$hour(d));
			case '-H':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$hour(d));
			case 'k':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr(' '),
					_elm_lang$core$Date$hour(d));
			case 'I':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_rluiten$elm_date_extra$Date_Extra_Format$hourMod12(
						_elm_lang$core$Date$hour(d)));
			case '-I':
				return _elm_lang$core$Basics$toString(
					_rluiten$elm_date_extra$Date_Extra_Format$hourMod12(
						_elm_lang$core$Date$hour(d)));
			case 'l':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr(' '),
					_rluiten$elm_date_extra$Date_Extra_Format$hourMod12(
						_elm_lang$core$Date$hour(d)));
			case 'p':
				return _elm_lang$core$String$toUpper(
					config.i18n.twelveHourPeriod(
						_rluiten$elm_date_extra$Date_Extra_TwelveHourClock$twelveHourPeriod(d)));
			case 'P':
				return config.i18n.twelveHourPeriod(
					_rluiten$elm_date_extra$Date_Extra_TwelveHourClock$twelveHourPeriod(d));
			case 'M':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$minute(d));
			case 'S':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$second(d));
			case 'L':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Format$padWithN,
					3,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$millisecond(d));
			case '%':
				return symbol;
			case 'z':
				return A2(_rluiten$elm_date_extra$Date_Extra_Format$formatOffsetStr, '', offset);
			case ':z':
				return A2(_rluiten$elm_date_extra$Date_Extra_Format$formatOffsetStr, ':', offset);
			case 'G':
				var _p4 = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeek(d);
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Format$padWithN,
					3,
					_elm_lang$core$Native_Utils.chr('0'),
					_p4._0);
			case 'V':
				var _p5 = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeek(d);
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_p5._1);
			case '-V':
				var _p6 = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeek(d);
				return _elm_lang$core$Basics$toString(_p6._1);
			case 'u':
				var _p7 = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeek(d);
				return _elm_lang$core$Basics$toString(_p7._2);
			default:
				return '';
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Format$formatRegex = _elm_lang$core$Regex$regex('%(y|Y|m|_m|-m|B|^B|b|^b|d|-d|-@d|e|@e|A|^A|a|^a|H|-H|k|I|-I|l|p|P|M|S|%|L|z|:z|G|V|-V|u)');
var _rluiten$elm_date_extra$Date_Extra_Format$formatOffset = F4(
	function (config, targetOffset, formatStr, date) {
		var dateOffset = _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(date);
		var hackOffset = dateOffset - targetOffset;
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_rluiten$elm_date_extra$Date_Extra_Format$formatRegex,
			A3(
				_rluiten$elm_date_extra$Date_Extra_Format$formatToken,
				config,
				targetOffset,
				A2(_rluiten$elm_date_extra$Date_Extra_Internal$hackDateAsOffset, hackOffset, date)),
			formatStr);
	});
var _rluiten$elm_date_extra$Date_Extra_Format$format = F3(
	function (config, formatStr, date) {
		return A4(
			_rluiten$elm_date_extra$Date_Extra_Format$formatOffset,
			config,
			_rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(date),
			formatStr,
			date);
	});
var _rluiten$elm_date_extra$Date_Extra_Format$formatUtc = F3(
	function (config, formatStr, date) {
		return A4(_rluiten$elm_date_extra$Date_Extra_Format$formatOffset, config, 0, formatStr, date);
	});
var _rluiten$elm_date_extra$Date_Extra_Format$isoDateString = function (date) {
	var day = _elm_lang$core$Date$day(date);
	var month = _elm_lang$core$Date$month(date);
	var year = _elm_lang$core$Date$year(date);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		A3(
			_elm_lang$core$String$padLeft,
			4,
			_elm_lang$core$Native_Utils.chr('0'),
			_elm_lang$core$Basics$toString(year)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'-',
			A2(
				_elm_lang$core$Basics_ops['++'],
				A3(
					_elm_lang$core$String$padLeft,
					2,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Basics$toString(
						_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(month))),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'-',
					A3(
						_elm_lang$core$String$padLeft,
						2,
						_elm_lang$core$Native_Utils.chr('0'),
						_elm_lang$core$Basics$toString(day))))));
};
var _rluiten$elm_date_extra$Date_Extra_Format$utcIsoDateString = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Format$isoDateString(
		_rluiten$elm_date_extra$Date_Extra_Internal$hackDateAsUtc(date));
};
var _rluiten$elm_date_extra$Date_Extra_Format$yearInt = function (year) {
	return A3(
		_elm_lang$core$String$padLeft,
		4,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(year));
};
var _rluiten$elm_date_extra$Date_Extra_Format$year = function (date) {
	return A3(
		_elm_lang$core$String$padLeft,
		4,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(
			_elm_lang$core$Date$year(date)));
};
var _rluiten$elm_date_extra$Date_Extra_Format$monthMonth = function (month) {
	return A3(
		_elm_lang$core$String$padLeft,
		2,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(
			_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(month)));
};
var _rluiten$elm_date_extra$Date_Extra_Format$month = function (date) {
	return A3(
		_elm_lang$core$String$padLeft,
		2,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(
			_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
				_elm_lang$core$Date$month(date))));
};
var _rluiten$elm_date_extra$Date_Extra_Format$isoTimeFormat = '%H:%M:%S';
var _rluiten$elm_date_extra$Date_Extra_Format$isoDateFormat = '%Y-%m-%d';
var _rluiten$elm_date_extra$Date_Extra_Format$isoMsecOffsetFormat = '%Y-%m-%dT%H:%M:%S.%L%:z';
var _rluiten$elm_date_extra$Date_Extra_Format$isoString = A2(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _rluiten$elm_date_extra$Date_Extra_Format$isoMsecOffsetFormat);
var _rluiten$elm_date_extra$Date_Extra_Format$isoOffsetFormat = '%Y-%m-%dT%H:%M:%S%z';
var _rluiten$elm_date_extra$Date_Extra_Format$isoMsecFormat = '%Y-%m-%dT%H:%M:%S.%L';
var _rluiten$elm_date_extra$Date_Extra_Format$isoStringNoOffset = A2(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _rluiten$elm_date_extra$Date_Extra_Format$isoMsecFormat);
var _rluiten$elm_date_extra$Date_Extra_Format$utcIsoString = function (date) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		A3(_rluiten$elm_date_extra$Date_Extra_Format$formatUtc, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _rluiten$elm_date_extra$Date_Extra_Format$isoMsecFormat, date),
		'Z');
};
var _rluiten$elm_date_extra$Date_Extra_Format$isoFormat = '%Y-%m-%dT%H:%M:%S';

var _abadi199$datetimepicker$DateTimePicker_Formatter$timePattern = '%I:%M %p';
var _abadi199$datetimepicker$DateTimePicker_Formatter$timeFormatter = A2(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _abadi199$datetimepicker$DateTimePicker_Formatter$timePattern);
var _abadi199$datetimepicker$DateTimePicker_Formatter$dateTimePattern = '%m/%d/%Y %I:%M %p';
var _abadi199$datetimepicker$DateTimePicker_Formatter$dateTimeFormatter = A2(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _abadi199$datetimepicker$DateTimePicker_Formatter$dateTimePattern);
var _abadi199$datetimepicker$DateTimePicker_Formatter$footerPattern = '%A, %B %d, %Y';
var _abadi199$datetimepicker$DateTimePicker_Formatter$footerFormatter = A2(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _abadi199$datetimepicker$DateTimePicker_Formatter$footerPattern);
var _abadi199$datetimepicker$DateTimePicker_Formatter$datePattern = '%m/%d/%Y';
var _abadi199$datetimepicker$DateTimePicker_Formatter$dateFormatter = A2(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _abadi199$datetimepicker$DateTimePicker_Formatter$datePattern);
var _abadi199$datetimepicker$DateTimePicker_Formatter$titlePattern = '%B %Y';
var _abadi199$datetimepicker$DateTimePicker_Formatter$titleFormatter = A2(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _abadi199$datetimepicker$DateTimePicker_Formatter$titlePattern);

var _abadi199$datetimepicker$DateTimePicker_Internal$Time = F3(
	function (a, b, c) {
		return {hour: a, minute: b, amPm: c};
	});
var _abadi199$datetimepicker$DateTimePicker_Internal$InternalState = function (a) {
	return {ctor: 'InternalState', _0: a};
};
var _abadi199$datetimepicker$DateTimePicker_Internal$AMPMIndicator = {ctor: 'AMPMIndicator'};
var _abadi199$datetimepicker$DateTimePicker_Internal$MinuteIndicator = {ctor: 'MinuteIndicator'};
var _abadi199$datetimepicker$DateTimePicker_Internal$HourIndicator = {ctor: 'HourIndicator'};
var _abadi199$datetimepicker$DateTimePicker_Internal$initialState = _abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
	{
		inputFocused: false,
		forceClose: false,
		event: '',
		today: _elm_lang$core$Maybe$Nothing,
		titleDate: _elm_lang$core$Maybe$Nothing,
		date: _elm_lang$core$Maybe$Nothing,
		time: A3(_abadi199$datetimepicker$DateTimePicker_Internal$Time, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing),
		hourPickerStart: 1,
		minutePickerStart: 0,
		currentAngle: _elm_lang$core$Maybe$Nothing,
		activeTimeIndicator: _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$HourIndicator)
	});
var _abadi199$datetimepicker$DateTimePicker_Internal$initialStateWithToday = function (today) {
	return _abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
		{
			inputFocused: false,
			forceClose: false,
			event: '',
			today: _elm_lang$core$Maybe$Just(today),
			titleDate: _elm_lang$core$Maybe$Just(
				_rluiten$elm_date_extra$Date_Extra_Core$toFirstOfMonth(today)),
			date: _elm_lang$core$Maybe$Nothing,
			time: A3(_abadi199$datetimepicker$DateTimePicker_Internal$Time, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing),
			hourPickerStart: 1,
			minutePickerStart: 0,
			currentAngle: _elm_lang$core$Maybe$Nothing,
			activeTimeIndicator: _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$HourIndicator)
		});
};

var _elm_lang$virtual_dom$VirtualDom_Debug$wrap;
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;

var _elm_lang$virtual_dom$Native_VirtualDom = function() {

var STYLE_KEY = 'STYLE';
var EVENT_KEY = 'EVENT';
var ATTR_KEY = 'ATTR';
var ATTR_NS_KEY = 'ATTR_NS';

var localDoc = typeof document !== 'undefined' ? document : {};


////////////  VIRTUAL DOM NODES  ////////////


function text(string)
{
	return {
		type: 'text',
		text: string
	};
}


function node(tag)
{
	return F2(function(factList, kidList) {
		return nodeHelp(tag, factList, kidList);
	});
}


function nodeHelp(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function keyedNode(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid._1.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'keyed-node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function custom(factList, model, impl)
{
	var facts = organizeFacts(factList).facts;

	return {
		type: 'custom',
		facts: facts,
		model: model,
		impl: impl
	};
}


function map(tagger, node)
{
	return {
		type: 'tagger',
		tagger: tagger,
		node: node,
		descendantsCount: 1 + (node.descendantsCount || 0)
	};
}


function thunk(func, args, thunk)
{
	return {
		type: 'thunk',
		func: func,
		args: args,
		thunk: thunk,
		node: undefined
	};
}

function lazy(fn, a)
{
	return thunk(fn, [a], function() {
		return fn(a);
	});
}

function lazy2(fn, a, b)
{
	return thunk(fn, [a,b], function() {
		return A2(fn, a, b);
	});
}

function lazy3(fn, a, b, c)
{
	return thunk(fn, [a,b,c], function() {
		return A3(fn, a, b, c);
	});
}



// FACTS


function organizeFacts(factList)
{
	var namespace, facts = {};

	while (factList.ctor !== '[]')
	{
		var entry = factList._0;
		var key = entry.key;

		if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY)
		{
			var subFacts = facts[key] || {};
			subFacts[entry.realKey] = entry.value;
			facts[key] = subFacts;
		}
		else if (key === STYLE_KEY)
		{
			var styles = facts[key] || {};
			var styleList = entry.value;
			while (styleList.ctor !== '[]')
			{
				var style = styleList._0;
				styles[style._0] = style._1;
				styleList = styleList._1;
			}
			facts[key] = styles;
		}
		else if (key === 'namespace')
		{
			namespace = entry.value;
		}
		else if (key === 'className')
		{
			var classes = facts[key];
			facts[key] = typeof classes === 'undefined'
				? entry.value
				: classes + ' ' + entry.value;
		}
 		else
		{
			facts[key] = entry.value;
		}
		factList = factList._1;
	}

	return {
		facts: facts,
		namespace: namespace
	};
}



////////////  PROPERTIES AND ATTRIBUTES  ////////////


function style(value)
{
	return {
		key: STYLE_KEY,
		value: value
	};
}


function property(key, value)
{
	return {
		key: key,
		value: value
	};
}


function attribute(key, value)
{
	return {
		key: ATTR_KEY,
		realKey: key,
		value: value
	};
}


function attributeNS(namespace, key, value)
{
	return {
		key: ATTR_NS_KEY,
		realKey: key,
		value: {
			value: value,
			namespace: namespace
		}
	};
}


function on(name, options, decoder)
{
	return {
		key: EVENT_KEY,
		realKey: name,
		value: {
			options: options,
			decoder: decoder
		}
	};
}


function equalEvents(a, b)
{
	if (a.options !== b.options)
	{
		if (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault)
		{
			return false;
		}
	}
	return _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
}


function mapProperty(func, property)
{
	if (property.key !== EVENT_KEY)
	{
		return property;
	}
	return on(
		property.realKey,
		property.value.options,
		A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder)
	);
}


////////////  RENDER  ////////////


function render(vNode, eventNode)
{
	switch (vNode.type)
	{
		case 'thunk':
			if (!vNode.node)
			{
				vNode.node = vNode.thunk();
			}
			return render(vNode.node, eventNode);

		case 'tagger':
			var subNode = vNode.node;
			var tagger = vNode.tagger;

			while (subNode.type === 'tagger')
			{
				typeof tagger !== 'object'
					? tagger = [tagger, subNode.tagger]
					: tagger.push(subNode.tagger);

				subNode = subNode.node;
			}

			var subEventRoot = { tagger: tagger, parent: eventNode };
			var domNode = render(subNode, subEventRoot);
			domNode.elm_event_node_ref = subEventRoot;
			return domNode;

		case 'text':
			return localDoc.createTextNode(vNode.text);

		case 'node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i], eventNode));
			}

			return domNode;

		case 'keyed-node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i]._1, eventNode));
			}

			return domNode;

		case 'custom':
			var domNode = vNode.impl.render(vNode.model);
			applyFacts(domNode, eventNode, vNode.facts);
			return domNode;
	}
}



////////////  APPLY FACTS  ////////////


function applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		switch (key)
		{
			case STYLE_KEY:
				applyStyles(domNode, value);
				break;

			case EVENT_KEY:
				applyEvents(domNode, eventNode, value);
				break;

			case ATTR_KEY:
				applyAttrs(domNode, value);
				break;

			case ATTR_NS_KEY:
				applyAttrsNS(domNode, value);
				break;

			case 'value':
				if (domNode[key] !== value)
				{
					domNode[key] = value;
				}
				break;

			default:
				domNode[key] = value;
				break;
		}
	}
}

function applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}

function applyEvents(domNode, eventNode, events)
{
	var allHandlers = domNode.elm_handlers || {};

	for (var key in events)
	{
		var handler = allHandlers[key];
		var value = events[key];

		if (typeof value === 'undefined')
		{
			domNode.removeEventListener(key, handler);
			allHandlers[key] = undefined;
		}
		else if (typeof handler === 'undefined')
		{
			var handler = makeEventHandler(eventNode, value);
			domNode.addEventListener(key, handler);
			allHandlers[key] = handler;
		}
		else
		{
			handler.info = value;
		}
	}

	domNode.elm_handlers = allHandlers;
}

function makeEventHandler(eventNode, info)
{
	function eventHandler(event)
	{
		var info = eventHandler.info;

		var value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);

		if (value.ctor === 'Ok')
		{
			var options = info.options;
			if (options.stopPropagation)
			{
				event.stopPropagation();
			}
			if (options.preventDefault)
			{
				event.preventDefault();
			}

			var message = value._0;

			var currentEventNode = eventNode;
			while (currentEventNode)
			{
				var tagger = currentEventNode.tagger;
				if (typeof tagger === 'function')
				{
					message = tagger(message);
				}
				else
				{
					for (var i = tagger.length; i--; )
					{
						message = tagger[i](message);
					}
				}
				currentEventNode = currentEventNode.parent;
			}
		}
	};

	eventHandler.info = info;

	return eventHandler;
}

function applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		if (typeof value === 'undefined')
		{
			domNode.removeAttribute(key);
		}
		else
		{
			domNode.setAttribute(key, value);
		}
	}
}

function applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.namespace;
		var value = pair.value;

		if (typeof value === 'undefined')
		{
			domNode.removeAttributeNS(namespace, key);
		}
		else
		{
			domNode.setAttributeNS(namespace, key, value);
		}
	}
}



////////////  DIFF  ////////////


function diff(a, b)
{
	var patches = [];
	diffHelp(a, b, patches, 0);
	return patches;
}


function makePatch(type, index, data)
{
	return {
		index: index,
		type: type,
		data: data,
		domNode: undefined,
		eventNode: undefined
	};
}


function diffHelp(a, b, patches, index)
{
	if (a === b)
	{
		return;
	}

	var aType = a.type;
	var bType = b.type;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (aType !== bType)
	{
		patches.push(makePatch('p-redraw', index, b));
		return;
	}

	// Now we know that both nodes are the same type.
	switch (bType)
	{
		case 'thunk':
			var aArgs = a.args;
			var bArgs = b.args;
			var i = aArgs.length;
			var same = a.func === b.func && i === bArgs.length;
			while (same && i--)
			{
				same = aArgs[i] === bArgs[i];
			}
			if (same)
			{
				b.node = a.node;
				return;
			}
			b.node = b.thunk();
			var subPatches = [];
			diffHelp(a.node, b.node, subPatches, 0);
			if (subPatches.length > 0)
			{
				patches.push(makePatch('p-thunk', index, subPatches));
			}
			return;

		case 'tagger':
			// gather nested taggers
			var aTaggers = a.tagger;
			var bTaggers = b.tagger;
			var nesting = false;

			var aSubNode = a.node;
			while (aSubNode.type === 'tagger')
			{
				nesting = true;

				typeof aTaggers !== 'object'
					? aTaggers = [aTaggers, aSubNode.tagger]
					: aTaggers.push(aSubNode.tagger);

				aSubNode = aSubNode.node;
			}

			var bSubNode = b.node;
			while (bSubNode.type === 'tagger')
			{
				nesting = true;

				typeof bTaggers !== 'object'
					? bTaggers = [bTaggers, bSubNode.tagger]
					: bTaggers.push(bSubNode.tagger);

				bSubNode = bSubNode.node;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && aTaggers.length !== bTaggers.length)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers)
			{
				patches.push(makePatch('p-tagger', index, bTaggers));
			}

			// diff everything below the taggers
			diffHelp(aSubNode, bSubNode, patches, index + 1);
			return;

		case 'text':
			if (a.text !== b.text)
			{
				patches.push(makePatch('p-text', index, b.text));
				return;
			}

			return;

		case 'node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffChildren(a, b, patches, index);
			return;

		case 'keyed-node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffKeyedChildren(a, b, patches, index);
			return;

		case 'custom':
			if (a.impl !== b.impl)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);
			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			var patch = b.impl.diff(a,b);
			if (patch)
			{
				patches.push(makePatch('p-custom', index, patch));
				return;
			}

			return;
	}
}


// assumes the incoming arrays are the same length
function pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function diffFacts(a, b, category)
{
	var diff;

	// look for changes and removals
	for (var aKey in a)
	{
		if (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY)
		{
			var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[aKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(aKey in b))
		{
			diff = diff || {};
			diff[aKey] =
				(typeof category === 'undefined')
					? (typeof a[aKey] === 'string' ? '' : null)
					:
				(category === STYLE_KEY)
					? ''
					:
				(category === EVENT_KEY || category === ATTR_KEY)
					? undefined
					:
				{ namespace: a[aKey].namespace, value: undefined };

			continue;
		}

		var aValue = a[aKey];
		var bValue = b[aKey];

		// reference equal, so don't worry about it
		if (aValue === bValue && aKey !== 'value'
			|| category === EVENT_KEY && equalEvents(aValue, bValue))
		{
			continue;
		}

		diff = diff || {};
		diff[aKey] = bValue;
	}

	// add new stuff
	for (var bKey in b)
	{
		if (!(bKey in a))
		{
			diff = diff || {};
			diff[bKey] = b[bKey];
		}
	}

	return diff;
}


function diffChildren(aParent, bParent, patches, rootIndex)
{
	var aChildren = aParent.children;
	var bChildren = bParent.children;

	var aLen = aChildren.length;
	var bLen = bChildren.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (aLen > bLen)
	{
		patches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));
	}
	else if (aLen < bLen)
	{
		patches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	var index = rootIndex;
	var minLen = aLen < bLen ? aLen : bLen;
	for (var i = 0; i < minLen; i++)
	{
		index++;
		var aChild = aChildren[i];
		diffHelp(aChild, bChildren[i], patches, index);
		index += aChild.descendantsCount || 0;
	}
}



////////////  KEYED DIFF  ////////////


function diffKeyedChildren(aParent, bParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var aChildren = aParent.children;
	var bChildren = bParent.children;
	var aLen = aChildren.length;
	var bLen = bChildren.length;
	var aIndex = 0;
	var bIndex = 0;

	var index = rootIndex;

	while (aIndex < aLen && bIndex < bLen)
	{
		var a = aChildren[aIndex];
		var b = bChildren[bIndex];

		var aKey = a._0;
		var bKey = b._0;
		var aNode = a._1;
		var bNode = b._1;

		// check if keys match

		if (aKey === bKey)
		{
			index++;
			diffHelp(aNode, bNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex++;
			bIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var aLookAhead = aIndex + 1 < aLen;
		var bLookAhead = bIndex + 1 < bLen;

		if (aLookAhead)
		{
			var aNext = aChildren[aIndex + 1];
			var aNextKey = aNext._0;
			var aNextNode = aNext._1;
			var oldMatch = bKey === aNextKey;
		}

		if (bLookAhead)
		{
			var bNext = bChildren[bIndex + 1];
			var bNextKey = bNext._0;
			var bNextNode = bNext._1;
			var newMatch = aKey === bNextKey;
		}


		// swap a and b
		if (aLookAhead && bLookAhead && newMatch && oldMatch)
		{
			index++;
			diffHelp(aNode, bNextNode, localPatches, index);
			insertNode(changes, localPatches, aKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			removeNode(changes, localPatches, aKey, aNextNode, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		// insert b
		if (bLookAhead && newMatch)
		{
			index++;
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			diffHelp(aNode, bNextNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex += 1;
			bIndex += 2;
			continue;
		}

		// remove a
		if (aLookAhead && oldMatch)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 1;
			continue;
		}

		// remove a, insert b
		if (aLookAhead && bLookAhead && aNextKey === bNextKey)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNextNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (aIndex < aLen)
	{
		index++;
		var a = aChildren[aIndex];
		var aNode = a._1;
		removeNode(changes, localPatches, a._0, aNode, index);
		index += aNode.descendantsCount || 0;
		aIndex++;
	}

	var endInserts;
	while (bIndex < bLen)
	{
		endInserts = endInserts || [];
		var b = bChildren[bIndex];
		insertNode(changes, localPatches, b._0, b._1, undefined, endInserts);
		bIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined')
	{
		patches.push(makePatch('p-reorder', rootIndex, {
			patches: localPatches,
			inserts: inserts,
			endInserts: endInserts
		}));
	}
}



////////////  CHANGES FROM KEYED DIFF  ////////////


var POSTFIX = '_elmW6BL';


function insertNode(changes, localPatches, key, vnode, bIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		entry = {
			tag: 'insert',
			vnode: vnode,
			index: bIndex,
			data: undefined
		};

		inserts.push({ index: bIndex, entry: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.tag === 'remove')
	{
		inserts.push({ index: bIndex, entry: entry });

		entry.tag = 'move';
		var subPatches = [];
		diffHelp(entry.vnode, vnode, subPatches, entry.index);
		entry.index = bIndex;
		entry.data.data = {
			patches: subPatches,
			entry: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	insertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);
}


function removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		var patch = makePatch('p-remove', index, undefined);
		localPatches.push(patch);

		changes[key] = {
			tag: 'remove',
			vnode: vnode,
			index: index,
			data: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.tag === 'insert')
	{
		entry.tag = 'move';
		var subPatches = [];
		diffHelp(vnode, entry.vnode, subPatches, index);

		var patch = makePatch('p-remove', index, {
			patches: subPatches,
			entry: entry
		});
		localPatches.push(patch);

		return;
	}

	// this key has already been removed or moved, a duplicate!
	removeNode(changes, localPatches, key + POSTFIX, vnode, index);
}



////////////  ADD DOM NODES  ////////////
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function addDomNodes(domNode, vNode, patches, eventNode)
{
	addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.index;

	while (index === low)
	{
		var patchType = patch.type;

		if (patchType === 'p-thunk')
		{
			addDomNodes(domNode, vNode.node, patch.data, eventNode);
		}
		else if (patchType === 'p-reorder')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var subPatches = patch.data.patches;
			if (subPatches.length > 0)
			{
				addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 'p-remove')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var data = patch.data;
			if (typeof data !== 'undefined')
			{
				data.entry.data = domNode;
				var subPatches = data.patches;
				if (subPatches.length > 0)
				{
					addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.index) > high)
		{
			return i;
		}
	}

	switch (vNode.type)
	{
		case 'tagger':
			var subNode = vNode.node;

			while (subNode.type === "tagger")
			{
				subNode = subNode.node;
			}

			return addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);

		case 'node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j];
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'keyed-node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j]._1;
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'text':
		case 'thunk':
			throw new Error('should never traverse `text` or `thunk` nodes like this');
	}
}



////////////  APPLY PATCHES  ////////////


function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return applyPatchesHelp(rootDomNode, patches);
}

function applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.domNode
		var newNode = applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function applyPatch(domNode, patch)
{
	switch (patch.type)
	{
		case 'p-redraw':
			return applyPatchRedraw(domNode, patch.data, patch.eventNode);

		case 'p-facts':
			applyFacts(domNode, patch.eventNode, patch.data);
			return domNode;

		case 'p-text':
			domNode.replaceData(0, domNode.length, patch.data);
			return domNode;

		case 'p-thunk':
			return applyPatchesHelp(domNode, patch.data);

		case 'p-tagger':
			if (typeof domNode.elm_event_node_ref !== 'undefined')
			{
				domNode.elm_event_node_ref.tagger = patch.data;
			}
			else
			{
				domNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };
			}
			return domNode;

		case 'p-remove-last':
			var i = patch.data;
			while (i--)
			{
				domNode.removeChild(domNode.lastChild);
			}
			return domNode;

		case 'p-append':
			var newNodes = patch.data;
			for (var i = 0; i < newNodes.length; i++)
			{
				domNode.appendChild(render(newNodes[i], patch.eventNode));
			}
			return domNode;

		case 'p-remove':
			var data = patch.data;
			if (typeof data === 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.entry;
			if (typeof entry.index !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.data = applyPatchesHelp(domNode, data.patches);
			return domNode;

		case 'p-reorder':
			return applyPatchReorder(domNode, patch);

		case 'p-custom':
			var impl = patch.data;
			return impl.applyPatch(domNode, impl.data);

		default:
			throw new Error('Ran into an unknown patch!');
	}
}


function applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = render(vNode, eventNode);

	if (typeof newNode.elm_event_node_ref === 'undefined')
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function applyPatchReorder(domNode, patch)
{
	var data = patch.data;

	// remove end inserts
	var frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);

	// removals
	domNode = applyPatchesHelp(domNode, data.patches);

	// inserts
	var inserts = data.inserts;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.entry;
		var node = entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode);
		domNode.insertBefore(node, domNode.childNodes[insert.index]);
	}

	// add end inserts
	if (typeof frag !== 'undefined')
	{
		domNode.appendChild(frag);
	}

	return domNode;
}


function applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (typeof endInserts === 'undefined')
	{
		return;
	}

	var frag = localDoc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.entry;
		frag.appendChild(entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode)
		);
	}
	return frag;
}


// PROGRAMS

var program = makeProgram(checkNoFlags);
var programWithFlags = makeProgram(checkYesFlags);

function makeProgram(flagChecker)
{
	return F2(function(debugWrap, impl)
	{
		return function(flagDecoder)
		{
			return function(object, moduleName, debugMetadata)
			{
				var checker = flagChecker(flagDecoder, moduleName);
				if (typeof debugMetadata === 'undefined')
				{
					normalSetup(impl, object, moduleName, checker);
				}
				else
				{
					debugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);
				}
			};
		};
	});
}

function staticProgram(vNode)
{
	var nothing = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		_elm_lang$core$Platform_Cmd$none
	);
	return A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {
		init: nothing,
		view: function() { return vNode; },
		update: F2(function() { return nothing; }),
		subscriptions: function() { return _elm_lang$core$Platform_Sub$none; }
	})();
}


// FLAG CHECKERS

function checkNoFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flags === 'undefined')
		{
			return init;
		}

		var errorMessage =
			'The `' + moduleName + '` module does not need flags.\n'
			+ 'Initialize it with no arguments and you should be all set!';

		crash(errorMessage, domNode);
	};
}

function checkYesFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flagDecoder === 'undefined')
		{
			var errorMessage =
				'Are you trying to sneak a Never value into Elm? Trickster!\n'
				+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
				+ 'Use `program` instead if you do not want flags.'

			crash(errorMessage, domNode);
		}

		var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
		if (result.ctor === 'Ok')
		{
			return init(result._0);
		}

		var errorMessage =
			'Trying to initialize the `' + moduleName + '` module with an unexpected flag.\n'
			+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
			+ result._0;

		crash(errorMessage, domNode);
	};
}

function crash(errorMessage, domNode)
{
	if (domNode)
	{
		domNode.innerHTML =
			'<div style="padding-left:1em;">'
			+ '<h2 style="font-weight:normal;"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>'
			+ '<pre style="padding-left:1em;">' + errorMessage + '</pre>'
			+ '</div>';
	}

	throw new Error(errorMessage);
}


//  NORMAL SETUP

function normalSetup(impl, object, moduleName, flagChecker)
{
	object['embed'] = function embed(node, flags)
	{
		while (node.lastChild)
		{
			node.removeChild(node.lastChild);
		}

		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update,
			impl.subscriptions,
			normalRenderer(node, impl.view)
		);
	};

	object['fullscreen'] = function fullscreen(flags)
	{
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update,
			impl.subscriptions,
			normalRenderer(document.body, impl.view)
		);
	};
}

function normalRenderer(parentNode, view)
{
	return function(tagger, initialModel)
	{
		var eventNode = { tagger: tagger, parent: undefined };
		var initialVirtualNode = view(initialModel);
		var domNode = render(initialVirtualNode, eventNode);
		parentNode.appendChild(domNode);
		return makeStepper(domNode, view, initialVirtualNode, eventNode);
	};
}


// STEPPER

var rAF =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { setTimeout(callback, 1000 / 60); };

function makeStepper(domNode, view, initialVirtualNode, eventNode)
{
	var state = 'NO_REQUEST';
	var currNode = initialVirtualNode;
	var nextModel;

	function updateIfNeeded()
	{
		switch (state)
		{
			case 'NO_REQUEST':
				throw new Error(
					'Unexpected draw callback.\n' +
					'Please report this to <https://github.com/elm-lang/virtual-dom/issues>.'
				);

			case 'PENDING_REQUEST':
				rAF(updateIfNeeded);
				state = 'EXTRA_REQUEST';

				var nextNode = view(nextModel);
				var patches = diff(currNode, nextNode);
				domNode = applyPatches(domNode, currNode, patches, eventNode);
				currNode = nextNode;

				return;

			case 'EXTRA_REQUEST':
				state = 'NO_REQUEST';
				return;
		}
	}

	return function stepper(model)
	{
		if (state === 'NO_REQUEST')
		{
			rAF(updateIfNeeded);
		}
		state = 'PENDING_REQUEST';
		nextModel = model;
	};
}


// DEBUG SETUP

function debugSetup(impl, object, moduleName, flagChecker)
{
	object['fullscreen'] = function fullscreen(flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, document.body, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};

	object['embed'] = function fullscreen(node, flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};
}

function scrollTask(popoutRef)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var doc = popoutRef.doc;
		if (doc)
		{
			var msgs = doc.getElementsByClassName('debugger-sidebar-messages')[0];
			if (msgs)
			{
				msgs.scrollTop = msgs.scrollHeight;
			}
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


function debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut)
{
	return function(tagger, initialModel)
	{
		var appEventNode = { tagger: tagger, parent: undefined };
		var eventNode = { tagger: tagger, parent: undefined };

		// make normal stepper
		var appVirtualNode = view(initialModel);
		var appNode = render(appVirtualNode, appEventNode);
		parentNode.appendChild(appNode);
		var appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);

		// make overlay stepper
		var overVirtualNode = viewIn(initialModel)._1;
		var overNode = render(overVirtualNode, eventNode);
		parentNode.appendChild(overNode);
		var wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);
		var overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);

		// make debugger stepper
		var debugStepper = makeDebugStepper(initialModel, viewOut, eventNode, parentNode, moduleName, popoutRef);

		return function stepper(model)
		{
			appStepper(model);
			overStepper(model);
			debugStepper(model);
		}
	};
}

function makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef)
{
	var curr;
	var domNode;

	return function stepper(model)
	{
		if (!model.isDebuggerOpen)
		{
			return;
		}

		if (!popoutRef.doc)
		{
			curr = view(model);
			domNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);
			return;
		}

		// switch to document of popout
		localDoc = popoutRef.doc;

		var next = view(model);
		var patches = diff(curr, next);
		domNode = applyPatches(domNode, curr, patches, eventNode);
		curr = next;

		// switch back to normal document
		localDoc = document;
	};
}

function openDebugWindow(moduleName, popoutRef, virtualNode, eventNode)
{
	var w = 900;
	var h = 360;
	var x = screen.width - w;
	var y = screen.height - h;
	var debugWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);

	// switch to window document
	localDoc = debugWindow.document;

	popoutRef.doc = localDoc;
	localDoc.title = 'Debugger - ' + moduleName;
	localDoc.body.style.margin = '0';
	localDoc.body.style.padding = '0';
	var domNode = render(virtualNode, eventNode);
	localDoc.body.appendChild(domNode);

	localDoc.addEventListener('keydown', function(event) {
		if (event.metaKey && event.which === 82)
		{
			window.location.reload();
		}
		if (event.which === 38)
		{
			eventNode.tagger({ ctor: 'Up' });
			event.preventDefault();
		}
		if (event.which === 40)
		{
			eventNode.tagger({ ctor: 'Down' });
			event.preventDefault();
		}
	});

	function close()
	{
		popoutRef.doc = undefined;
		debugWindow.close();
	}
	window.addEventListener('unload', close);
	debugWindow.addEventListener('unload', function() {
		popoutRef.doc = undefined;
		window.removeEventListener('unload', close);
		eventNode.tagger({ ctor: 'Close' });
	});

	// switch back to the normal document
	localDoc = document;

	return domNode;
}


// BLOCK EVENTS

function wrapViewIn(appEventNode, overlayNode, viewIn)
{
	var ignorer = makeIgnorer(overlayNode);
	var blocking = 'Normal';
	var overflow;

	var normalTagger = appEventNode.tagger;
	var blockTagger = function() {};

	return function(model)
	{
		var tuple = viewIn(model);
		var newBlocking = tuple._0.ctor;
		appEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;
		if (blocking !== newBlocking)
		{
			traverse('removeEventListener', ignorer, blocking);
			traverse('addEventListener', ignorer, newBlocking);

			if (blocking === 'Normal')
			{
				overflow = document.body.style.overflow;
				document.body.style.overflow = 'hidden';
			}

			if (newBlocking === 'Normal')
			{
				document.body.style.overflow = overflow;
			}

			blocking = newBlocking;
		}
		return tuple._1;
	}
}

function traverse(verbEventListener, ignorer, blocking)
{
	switch(blocking)
	{
		case 'Normal':
			return;

		case 'Pause':
			return traverseHelp(verbEventListener, ignorer, mostEvents);

		case 'Message':
			return traverseHelp(verbEventListener, ignorer, allEvents);
	}
}

function traverseHelp(verbEventListener, handler, eventNames)
{
	for (var i = 0; i < eventNames.length; i++)
	{
		document.body[verbEventListener](eventNames[i], handler, true);
	}
}

function makeIgnorer(overlayNode)
{
	return function(event)
	{
		if (event.type === 'keydown' && event.metaKey && event.which === 82)
		{
			return;
		}

		var isScroll = event.type === 'scroll' || event.type === 'wheel';

		var node = event.target;
		while (node !== null)
		{
			if (node.className === 'elm-overlay-message-details' && isScroll)
			{
				return;
			}

			if (node === overlayNode && !isScroll)
			{
				return;
			}
			node = node.parentNode;
		}

		event.stopPropagation();
		event.preventDefault();
	}
}

var mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var allEvents = mostEvents.concat('wheel', 'scroll');


return {
	node: node,
	text: text,
	custom: custom,
	map: F2(map),

	on: F3(on),
	style: style,
	property: F2(property),
	attribute: F2(attribute),
	attributeNS: F3(attributeNS),
	mapProperty: F2(mapProperty),

	lazy: F2(lazy),
	lazy2: F3(lazy2),
	lazy3: F4(lazy3),
	keyedNode: F3(keyedNode),

	program: program,
	programWithFlags: programWithFlags,
	staticProgram: staticProgram
};

}();

var _elm_lang$virtual_dom$Native_Debug = function() {


// IMPORT / EXPORT

function unsafeCoerce(value)
{
	return value;
}

var upload = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
{
	var element = document.createElement('input');
	element.setAttribute('type', 'file');
	element.setAttribute('accept', 'text/json');
	element.style.display = 'none';
	element.addEventListener('change', function(event)
	{
		var fileReader = new FileReader();
		fileReader.onload = function(e)
		{
			callback(_elm_lang$core$Native_Scheduler.succeed(e.target.result));
		};
		fileReader.readAsText(event.target.files[0]);
		document.body.removeChild(element);
	});
	document.body.appendChild(element);
	element.click();
});

function download(historyLength, json)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var fileName = 'history-' + historyLength + '.txt';
		var jsonString = JSON.stringify(json);
		var mime = 'text/plain;charset=utf-8';
		var done = _elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0);

		// for IE10+
		if (navigator.msSaveBlob)
		{
			navigator.msSaveBlob(new Blob([jsonString], {type: mime}), fileName);
			return callback(done);
		}

		// for HTML5
		var element = document.createElement('a');
		element.setAttribute('href', 'data:' + mime + ',' + encodeURIComponent(jsonString));
		element.setAttribute('download', fileName);
		element.style.display = 'none';
		document.body.appendChild(element);
		element.click();
		document.body.removeChild(element);
		callback(done);
	});
}


// POPOUT

function messageToString(value)
{
	switch (typeof value)
	{
		case 'boolean':
			return value ? 'True' : 'False';
		case 'number':
			return value + '';
		case 'string':
			return '"' + addSlashes(value, false) + '"';
	}
	if (value instanceof String)
	{
		return '\'' + addSlashes(value, true) + '\'';
	}
	if (typeof value !== 'object' || value === null || !('ctor' in value))
	{
		return '…';
	}

	var ctorStarter = value.ctor.substring(0, 5);
	if (ctorStarter === '_Tupl' || ctorStarter === '_Task')
	{
		return '…'
	}
	if (['_Array', '<decoder>', '_Process', '::', '[]', 'Set_elm_builtin', 'RBNode_elm_builtin', 'RBEmpty_elm_builtin'].indexOf(value.ctor) >= 0)
	{
		return '…';
	}

	var keys = Object.keys(value);
	switch (keys.length)
	{
		case 1:
			return value.ctor;
		case 2:
			return value.ctor + ' ' + messageToString(value._0);
		default:
			return value.ctor + ' … ' + messageToString(value[keys[keys.length - 1]]);
	}
}


function primitive(str)
{
	return { ctor: 'Primitive', _0: str };
}


function init(value)
{
	var type = typeof value;

	if (type === 'boolean')
	{
		return {
			ctor: 'Constructor',
			_0: _elm_lang$core$Maybe$Just(value ? 'True' : 'False'),
			_1: true,
			_2: _elm_lang$core$Native_List.Nil
		};
	}

	if (type === 'number')
	{
		return primitive(value + '');
	}

	if (type === 'string')
	{
		return { ctor: 'S', _0: '"' + addSlashes(value, false) + '"' };
	}

	if (value instanceof String)
	{
		return { ctor: 'S', _0: "'" + addSlashes(value, true) + "'" };
	}

	if (value instanceof Date)
	{
		return primitive('<' + value.toString() + '>');
	}

	if (value === null)
	{
		return primitive('XXX');
	}

	if (type === 'object' && 'ctor' in value)
	{
		var ctor = value.ctor;

		if (ctor === '::' || ctor === '[]')
		{
			return {
				ctor: 'Sequence',
				_0: {ctor: 'ListSeq'},
				_1: true,
				_2: A2(_elm_lang$core$List$map, init, value)
			};
		}

		if (ctor === 'Set_elm_builtin')
		{
			return {
				ctor: 'Sequence',
				_0: {ctor: 'SetSeq'},
				_1: true,
				_2: A3(_elm_lang$core$Set$foldr, initCons, _elm_lang$core$Native_List.Nil, value)
			};
		}

		if (ctor === 'RBNode_elm_builtin' || ctor == 'RBEmpty_elm_builtin')
		{
			return {
				ctor: 'Dictionary',
				_0: true,
				_1: A3(_elm_lang$core$Dict$foldr, initKeyValueCons, _elm_lang$core$Native_List.Nil, value)
			};
		}

		if (ctor === '_Array')
		{
			return {
				ctor: 'Sequence',
				_0: {ctor: 'ArraySeq'},
				_1: true,
				_2: A3(_elm_lang$core$Array$foldr, initCons, _elm_lang$core$Native_List.Nil, value)
			};
		}

		var ctorStarter = value.ctor.substring(0, 5);
		if (ctorStarter === '_Task')
		{
			return primitive('<task>');
		}

		if (ctor === '<decoder>')
		{
			return primitive(ctor);
		}

		if (ctor === '_Process')
		{
			return primitive('<process>');
		}

		var list = _elm_lang$core$Native_List.Nil;
		for (var i in value)
		{
			if (i === 'ctor') continue;
			list = _elm_lang$core$Native_List.Cons(init(value[i]), list);
		}
		return {
			ctor: 'Constructor',
			_0: ctorStarter === '_Tupl' ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(ctor),
			_1: true,
			_2: _elm_lang$core$List$reverse(list)
		};
	}

	if (type === 'object')
	{
		var dict = _elm_lang$core$Dict$empty;
		for (var i in value)
		{
			dict = A3(_elm_lang$core$Dict$insert, i, init(value[i]), dict);
		}
		return { ctor: 'Record', _0: true, _1: dict };
	}

	return primitive('XXX');
}

var initCons = F2(initConsHelp);

function initConsHelp(value, list)
{
	return _elm_lang$core$Native_List.Cons(init(value), list);
}

var initKeyValueCons = F3(initKeyValueConsHelp);

function initKeyValueConsHelp(key, value, list)
{
	return _elm_lang$core$Native_List.Cons(
		_elm_lang$core$Native_Utils.Tuple2(init(key), init(value)),
		list
	);
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	upload: upload,
	download: F2(download),
	unsafeCoerce: unsafeCoerce,
	messageToString: messageToString,
	init: init
}

}();

var _elm_lang$virtual_dom$VirtualDom_Helpers$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;
var _elm_lang$virtual_dom$VirtualDom_Helpers$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom_Helpers$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom_Helpers$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom_Helpers$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom_Helpers$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom_Helpers$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom_Helpers$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom_Helpers$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom_Helpers$onClick = function (msg) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$virtual_dom$VirtualDom_Helpers$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom_Helpers$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom_Helpers$id = _elm_lang$virtual_dom$VirtualDom_Helpers$attribute('id');
var _elm_lang$virtual_dom$VirtualDom_Helpers$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom_Helpers$class = function (name) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$property,
		'className',
		_elm_lang$core$Json_Encode$string(name));
};
var _elm_lang$virtual_dom$VirtualDom_Helpers$href = function (name) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$property,
		'href',
		_elm_lang$core$Json_Encode$string(name));
};
var _elm_lang$virtual_dom$VirtualDom_Helpers$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom_Helpers$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom_Helpers$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom_Helpers$div = _elm_lang$virtual_dom$VirtualDom_Helpers$node('div');
var _elm_lang$virtual_dom$VirtualDom_Helpers$span = _elm_lang$virtual_dom$VirtualDom_Helpers$node('span');
var _elm_lang$virtual_dom$VirtualDom_Helpers$a = _elm_lang$virtual_dom$VirtualDom_Helpers$node('a');
var _elm_lang$virtual_dom$VirtualDom_Helpers$h1 = _elm_lang$virtual_dom$VirtualDom_Helpers$node('h1');
var _elm_lang$virtual_dom$VirtualDom_Helpers$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Helpers$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom_Helpers$Property = {ctor: 'Property'};

var _elm_lang$virtual_dom$VirtualDom_Expando$purple = _elm_lang$virtual_dom$VirtualDom_Helpers$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'color', _1: 'rgb(136, 19, 145)'},
		_1: {ctor: '[]'}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$blue = _elm_lang$virtual_dom$VirtualDom_Helpers$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'color', _1: 'rgb(28, 0, 207)'},
		_1: {ctor: '[]'}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$red = _elm_lang$virtual_dom$VirtualDom_Helpers$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'color', _1: 'rgb(196, 26, 22)'},
		_1: {ctor: '[]'}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$leftPad = function (maybeKey) {
	var _p0 = maybeKey;
	if (_p0.ctor === 'Nothing') {
		return _elm_lang$virtual_dom$VirtualDom_Helpers$style(
			{ctor: '[]'});
	} else {
		return _elm_lang$virtual_dom$VirtualDom_Helpers$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '4ch'},
				_1: {ctor: '[]'}
			});
	}
};
var _elm_lang$virtual_dom$VirtualDom_Expando$makeArrow = function (arrow) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$span,
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: '#777'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2ch'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '2ch'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-block'},
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(arrow),
			_1: {ctor: '[]'}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Expando$lineStarter = F3(
	function (maybeKey, maybeIsClosed, description) {
		var arrow = function () {
			var _p1 = maybeIsClosed;
			if (_p1.ctor === 'Nothing') {
				return _elm_lang$virtual_dom$VirtualDom_Expando$makeArrow('');
			} else {
				if (_p1._0 === true) {
					return _elm_lang$virtual_dom$VirtualDom_Expando$makeArrow('▸');
				} else {
					return _elm_lang$virtual_dom$VirtualDom_Expando$makeArrow('▾');
				}
			}
		}();
		var _p2 = maybeKey;
		if (_p2.ctor === 'Nothing') {
			return {ctor: '::', _0: arrow, _1: description};
		} else {
			return {
				ctor: '::',
				_0: arrow,
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$span,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Expando$purple,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p2._0),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' = '),
						_1: description
					}
				}
			};
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewExtraTinyRecord = F3(
	function (length, starter, entries) {
		var _p3 = entries;
		if (_p3.ctor === '[]') {
			return {
				ctor: '_Tuple2',
				_0: length + 1,
				_1: {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('}'),
					_1: {ctor: '[]'}
				}
			};
		} else {
			var _p5 = _p3._0;
			var nextLength = (length + _elm_lang$core$String$length(_p5)) + 1;
			if (_elm_lang$core$Native_Utils.cmp(nextLength, 18) > 0) {
				return {
					ctor: '_Tuple2',
					_0: length + 2,
					_1: {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('…}'),
						_1: {ctor: '[]'}
					}
				};
			} else {
				var _p4 = A3(_elm_lang$virtual_dom$VirtualDom_Expando$viewExtraTinyRecord, nextLength, ',', _p3._1);
				var finalLength = _p4._0;
				var otherNodes = _p4._1;
				return {
					ctor: '_Tuple2',
					_0: finalLength,
					_1: {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(starter),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$span,
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Expando$purple,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p5),
									_1: {ctor: '[]'}
								}),
							_1: otherNodes
						}
					}
				};
			}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$elideMiddle = function (str) {
	return (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$String$length(str),
		18) < 1) ? str : A2(
		_elm_lang$core$Basics_ops['++'],
		A2(_elm_lang$core$String$left, 8, str),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'...',
			A2(_elm_lang$core$String$right, 8, str)));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyHelp = function (str) {
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$String$length(str),
		_1: {
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(str),
			_1: {ctor: '[]'}
		}
	};
};
var _elm_lang$virtual_dom$VirtualDom_Expando$updateIndex = F3(
	function (n, func, list) {
		var _p6 = list;
		if (_p6.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p8 = _p6._1;
			var _p7 = _p6._0;
			return (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) ? {
				ctor: '::',
				_0: func(_p7),
				_1: _p8
			} : {
				ctor: '::',
				_0: _p7,
				_1: A3(_elm_lang$virtual_dom$VirtualDom_Expando$updateIndex, n - 1, func, _p8)
			};
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$seqTypeToString = F2(
	function (n, seqType) {
		var _p9 = seqType;
		switch (_p9.ctor) {
			case 'ListSeq':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'List(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(n),
						')'));
			case 'SetSeq':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'Set(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(n),
						')'));
			default:
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'Array(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(n),
						')'));
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewTiny = function (value) {
	var _p10 = value;
	switch (_p10.ctor) {
		case 'S':
			var str = _elm_lang$virtual_dom$VirtualDom_Expando$elideMiddle(_p10._0);
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$String$length(str),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$span,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Expando$red,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(str),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			};
		case 'Primitive':
			var _p11 = _p10._0;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$String$length(_p11),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$span,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Expando$blue,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p11),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			};
		case 'Sequence':
			return _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyHelp(
				A2(
					_elm_lang$virtual_dom$VirtualDom_Expando$seqTypeToString,
					_elm_lang$core$List$length(_p10._2),
					_p10._0));
		case 'Dictionary':
			return _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyHelp(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Dict(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(
							_elm_lang$core$List$length(_p10._1)),
						')')));
		case 'Record':
			return _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyRecord(_p10._1);
		default:
			if (_p10._2.ctor === '[]') {
				return _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyHelp(
					A2(_elm_lang$core$Maybe$withDefault, 'Unit', _p10._0));
			} else {
				return _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyHelp(
					function () {
						var _p12 = _p10._0;
						if (_p12.ctor === 'Nothing') {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								'Tuple(',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(
										_elm_lang$core$List$length(_p10._2)),
									')'));
						} else {
							return A2(_elm_lang$core$Basics_ops['++'], _p12._0, ' …');
						}
					}());
			}
	}
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyRecord = function (record) {
	return _elm_lang$core$Dict$isEmpty(record) ? {
		ctor: '_Tuple2',
		_0: 2,
		_1: {
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('{}'),
			_1: {ctor: '[]'}
		}
	} : A3(
		_elm_lang$virtual_dom$VirtualDom_Expando$viewTinyRecordHelp,
		0,
		'{ ',
		_elm_lang$core$Dict$toList(record));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyRecordHelp = F3(
	function (length, starter, entries) {
		var _p13 = entries;
		if (_p13.ctor === '[]') {
			return {
				ctor: '_Tuple2',
				_0: length + 2,
				_1: {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' }'),
					_1: {ctor: '[]'}
				}
			};
		} else {
			var _p16 = _p13._0._0;
			var _p14 = _elm_lang$virtual_dom$VirtualDom_Expando$viewExtraTiny(_p13._0._1);
			var valueLen = _p14._0;
			var valueNodes = _p14._1;
			var fieldLen = _elm_lang$core$String$length(_p16);
			var newLength = ((length + fieldLen) + valueLen) + 5;
			if (_elm_lang$core$Native_Utils.cmp(newLength, 60) > 0) {
				return {
					ctor: '_Tuple2',
					_0: length + 4,
					_1: {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(', … }'),
						_1: {ctor: '[]'}
					}
				};
			} else {
				var _p15 = A3(_elm_lang$virtual_dom$VirtualDom_Expando$viewTinyRecordHelp, newLength, ', ', _p13._1);
				var finalLength = _p15._0;
				var otherNodes = _p15._1;
				return {
					ctor: '_Tuple2',
					_0: finalLength,
					_1: {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(starter),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$span,
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Expando$purple,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p16),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' = '),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$virtual_dom$VirtualDom_Helpers$span,
										{ctor: '[]'},
										valueNodes),
									_1: otherNodes
								}
							}
						}
					}
				};
			}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewExtraTiny = function (value) {
	var _p17 = value;
	if (_p17.ctor === 'Record') {
		return A3(
			_elm_lang$virtual_dom$VirtualDom_Expando$viewExtraTinyRecord,
			0,
			'{',
			_elm_lang$core$Dict$keys(_p17._1));
	} else {
		return _elm_lang$virtual_dom$VirtualDom_Expando$viewTiny(value);
	}
};
var _elm_lang$virtual_dom$VirtualDom_Expando$Constructor = F3(
	function (a, b, c) {
		return {ctor: 'Constructor', _0: a, _1: b, _2: c};
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$Record = F2(
	function (a, b) {
		return {ctor: 'Record', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$Dictionary = F2(
	function (a, b) {
		return {ctor: 'Dictionary', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$Sequence = F3(
	function (a, b, c) {
		return {ctor: 'Sequence', _0: a, _1: b, _2: c};
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$initHelp = F2(
	function (isOuter, expando) {
		var _p18 = expando;
		switch (_p18.ctor) {
			case 'S':
				return expando;
			case 'Primitive':
				return expando;
			case 'Sequence':
				var _p20 = _p18._0;
				var _p19 = _p18._2;
				return isOuter ? A3(
					_elm_lang$virtual_dom$VirtualDom_Expando$Sequence,
					_p20,
					false,
					A2(
						_elm_lang$core$List$map,
						_elm_lang$virtual_dom$VirtualDom_Expando$initHelp(false),
						_p19)) : ((_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$List$length(_p19),
					8) < 1) ? A3(_elm_lang$virtual_dom$VirtualDom_Expando$Sequence, _p20, false, _p19) : expando);
			case 'Dictionary':
				var _p23 = _p18._1;
				return isOuter ? A2(
					_elm_lang$virtual_dom$VirtualDom_Expando$Dictionary,
					false,
					A2(
						_elm_lang$core$List$map,
						function (_p21) {
							var _p22 = _p21;
							return {
								ctor: '_Tuple2',
								_0: _p22._0,
								_1: A2(_elm_lang$virtual_dom$VirtualDom_Expando$initHelp, false, _p22._1)
							};
						},
						_p23)) : ((_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$List$length(_p23),
					8) < 1) ? A2(_elm_lang$virtual_dom$VirtualDom_Expando$Dictionary, false, _p23) : expando);
			case 'Record':
				var _p25 = _p18._1;
				return isOuter ? A2(
					_elm_lang$virtual_dom$VirtualDom_Expando$Record,
					false,
					A2(
						_elm_lang$core$Dict$map,
						F2(
							function (_p24, v) {
								return A2(_elm_lang$virtual_dom$VirtualDom_Expando$initHelp, false, v);
							}),
						_p25)) : ((_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$Dict$size(_p25),
					4) < 1) ? A2(_elm_lang$virtual_dom$VirtualDom_Expando$Record, false, _p25) : expando);
			default:
				var _p27 = _p18._0;
				var _p26 = _p18._2;
				return isOuter ? A3(
					_elm_lang$virtual_dom$VirtualDom_Expando$Constructor,
					_p27,
					false,
					A2(
						_elm_lang$core$List$map,
						_elm_lang$virtual_dom$VirtualDom_Expando$initHelp(false),
						_p26)) : ((_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$List$length(_p26),
					4) < 1) ? A3(_elm_lang$virtual_dom$VirtualDom_Expando$Constructor, _p27, false, _p26) : expando);
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$init = function (value) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Expando$initHelp,
		true,
		_elm_lang$virtual_dom$Native_Debug.init(value));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$mergeHelp = F2(
	function (old, $new) {
		var _p28 = {ctor: '_Tuple2', _0: old, _1: $new};
		_v12_6:
		do {
			if (_p28.ctor === '_Tuple2') {
				switch (_p28._1.ctor) {
					case 'S':
						return $new;
					case 'Primitive':
						return $new;
					case 'Sequence':
						if (_p28._0.ctor === 'Sequence') {
							return A3(
								_elm_lang$virtual_dom$VirtualDom_Expando$Sequence,
								_p28._1._0,
								_p28._0._1,
								A2(_elm_lang$virtual_dom$VirtualDom_Expando$mergeListHelp, _p28._0._2, _p28._1._2));
						} else {
							break _v12_6;
						}
					case 'Dictionary':
						if (_p28._0.ctor === 'Dictionary') {
							return A2(_elm_lang$virtual_dom$VirtualDom_Expando$Dictionary, _p28._0._0, _p28._1._1);
						} else {
							break _v12_6;
						}
					case 'Record':
						if (_p28._0.ctor === 'Record') {
							return A2(
								_elm_lang$virtual_dom$VirtualDom_Expando$Record,
								_p28._0._0,
								A2(
									_elm_lang$core$Dict$map,
									_elm_lang$virtual_dom$VirtualDom_Expando$mergeDictHelp(_p28._0._1),
									_p28._1._1));
						} else {
							break _v12_6;
						}
					default:
						if (_p28._0.ctor === 'Constructor') {
							return A3(
								_elm_lang$virtual_dom$VirtualDom_Expando$Constructor,
								_p28._1._0,
								_p28._0._1,
								A2(_elm_lang$virtual_dom$VirtualDom_Expando$mergeListHelp, _p28._0._2, _p28._1._2));
						} else {
							break _v12_6;
						}
				}
			} else {
				break _v12_6;
			}
		} while(false);
		return $new;
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$mergeDictHelp = F3(
	function (oldDict, key, value) {
		var _p29 = A2(_elm_lang$core$Dict$get, key, oldDict);
		if (_p29.ctor === 'Nothing') {
			return value;
		} else {
			return A2(_elm_lang$virtual_dom$VirtualDom_Expando$mergeHelp, _p29._0, value);
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$mergeListHelp = F2(
	function (olds, news) {
		var _p30 = {ctor: '_Tuple2', _0: olds, _1: news};
		if (_p30._0.ctor === '[]') {
			return news;
		} else {
			if (_p30._1.ctor === '[]') {
				return news;
			} else {
				return {
					ctor: '::',
					_0: A2(_elm_lang$virtual_dom$VirtualDom_Expando$mergeHelp, _p30._0._0, _p30._1._0),
					_1: A2(_elm_lang$virtual_dom$VirtualDom_Expando$mergeListHelp, _p30._0._1, _p30._1._1)
				};
			}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$merge = F2(
	function (value, expando) {
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Expando$mergeHelp,
			expando,
			_elm_lang$virtual_dom$Native_Debug.init(value));
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$update = F2(
	function (msg, value) {
		var _p31 = value;
		switch (_p31.ctor) {
			case 'S':
				return _elm_lang$core$Native_Utils.crashCase(
					'VirtualDom.Expando',
					{
						start: {line: 168, column: 3},
						end: {line: 235, column: 50}
					},
					_p31)('No messages for primitives');
			case 'Primitive':
				return _elm_lang$core$Native_Utils.crashCase(
					'VirtualDom.Expando',
					{
						start: {line: 168, column: 3},
						end: {line: 235, column: 50}
					},
					_p31)('No messages for primitives');
			case 'Sequence':
				var _p39 = _p31._2;
				var _p38 = _p31._0;
				var _p37 = _p31._1;
				var _p34 = msg;
				switch (_p34.ctor) {
					case 'Toggle':
						return A3(_elm_lang$virtual_dom$VirtualDom_Expando$Sequence, _p38, !_p37, _p39);
					case 'Index':
						if (_p34._0.ctor === 'None') {
							return A3(
								_elm_lang$virtual_dom$VirtualDom_Expando$Sequence,
								_p38,
								_p37,
								A3(
									_elm_lang$virtual_dom$VirtualDom_Expando$updateIndex,
									_p34._1,
									_elm_lang$virtual_dom$VirtualDom_Expando$update(_p34._2),
									_p39));
						} else {
							return _elm_lang$core$Native_Utils.crashCase(
								'VirtualDom.Expando',
								{
									start: {line: 176, column: 7},
									end: {line: 188, column: 46}
								},
								_p34)('No redirected indexes on sequences');
						}
					default:
						return _elm_lang$core$Native_Utils.crashCase(
							'VirtualDom.Expando',
							{
								start: {line: 176, column: 7},
								end: {line: 188, column: 46}
							},
							_p34)('No field on sequences');
				}
			case 'Dictionary':
				var _p51 = _p31._1;
				var _p50 = _p31._0;
				var _p40 = msg;
				switch (_p40.ctor) {
					case 'Toggle':
						return A2(_elm_lang$virtual_dom$VirtualDom_Expando$Dictionary, !_p50, _p51);
					case 'Index':
						var _p48 = _p40._2;
						var _p47 = _p40._1;
						var _p41 = _p40._0;
						switch (_p41.ctor) {
							case 'None':
								return _elm_lang$core$Native_Utils.crashCase(
									'VirtualDom.Expando',
									{
										start: {line: 196, column: 11},
										end: {line: 206, column: 81}
									},
									_p41)('must have redirect for dictionaries');
							case 'Key':
								return A2(
									_elm_lang$virtual_dom$VirtualDom_Expando$Dictionary,
									_p50,
									A3(
										_elm_lang$virtual_dom$VirtualDom_Expando$updateIndex,
										_p47,
										function (_p43) {
											var _p44 = _p43;
											return {
												ctor: '_Tuple2',
												_0: A2(_elm_lang$virtual_dom$VirtualDom_Expando$update, _p48, _p44._0),
												_1: _p44._1
											};
										},
										_p51));
							default:
								return A2(
									_elm_lang$virtual_dom$VirtualDom_Expando$Dictionary,
									_p50,
									A3(
										_elm_lang$virtual_dom$VirtualDom_Expando$updateIndex,
										_p47,
										function (_p45) {
											var _p46 = _p45;
											return {
												ctor: '_Tuple2',
												_0: _p46._0,
												_1: A2(_elm_lang$virtual_dom$VirtualDom_Expando$update, _p48, _p46._1)
											};
										},
										_p51));
						}
					default:
						return _elm_lang$core$Native_Utils.crashCase(
							'VirtualDom.Expando',
							{
								start: {line: 191, column: 7},
								end: {line: 209, column: 50}
							},
							_p40)('no field for dictionaries');
				}
			case 'Record':
				var _p55 = _p31._1;
				var _p54 = _p31._0;
				var _p52 = msg;
				switch (_p52.ctor) {
					case 'Toggle':
						return A2(_elm_lang$virtual_dom$VirtualDom_Expando$Record, !_p54, _p55);
					case 'Index':
						return _elm_lang$core$Native_Utils.crashCase(
							'VirtualDom.Expando',
							{
								start: {line: 212, column: 7},
								end: {line: 220, column: 77}
							},
							_p52)('No index for records');
					default:
						return A2(
							_elm_lang$virtual_dom$VirtualDom_Expando$Record,
							_p54,
							A3(
								_elm_lang$core$Dict$update,
								_p52._0,
								_elm_lang$virtual_dom$VirtualDom_Expando$updateField(_p52._1),
								_p55));
				}
			default:
				var _p61 = _p31._2;
				var _p60 = _p31._0;
				var _p59 = _p31._1;
				var _p56 = msg;
				switch (_p56.ctor) {
					case 'Toggle':
						return A3(_elm_lang$virtual_dom$VirtualDom_Expando$Constructor, _p60, !_p59, _p61);
					case 'Index':
						if (_p56._0.ctor === 'None') {
							return A3(
								_elm_lang$virtual_dom$VirtualDom_Expando$Constructor,
								_p60,
								_p59,
								A3(
									_elm_lang$virtual_dom$VirtualDom_Expando$updateIndex,
									_p56._1,
									_elm_lang$virtual_dom$VirtualDom_Expando$update(_p56._2),
									_p61));
						} else {
							return _elm_lang$core$Native_Utils.crashCase(
								'VirtualDom.Expando',
								{
									start: {line: 223, column: 7},
									end: {line: 235, column: 50}
								},
								_p56)('No redirected indexes on sequences');
						}
					default:
						return _elm_lang$core$Native_Utils.crashCase(
							'VirtualDom.Expando',
							{
								start: {line: 223, column: 7},
								end: {line: 235, column: 50}
							},
							_p56)('No field for constructors');
				}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$updateField = F2(
	function (msg, maybeExpando) {
		var _p62 = maybeExpando;
		if (_p62.ctor === 'Nothing') {
			return _elm_lang$core$Native_Utils.crashCase(
				'VirtualDom.Expando',
				{
					start: {line: 253, column: 3},
					end: {line: 258, column: 32}
				},
				_p62)('key does not exist');
		} else {
			return _elm_lang$core$Maybe$Just(
				A2(_elm_lang$virtual_dom$VirtualDom_Expando$update, msg, _p62._0));
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$Primitive = function (a) {
	return {ctor: 'Primitive', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Expando$S = function (a) {
	return {ctor: 'S', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Expando$ArraySeq = {ctor: 'ArraySeq'};
var _elm_lang$virtual_dom$VirtualDom_Expando$SetSeq = {ctor: 'SetSeq'};
var _elm_lang$virtual_dom$VirtualDom_Expando$ListSeq = {ctor: 'ListSeq'};
var _elm_lang$virtual_dom$VirtualDom_Expando$Field = F2(
	function (a, b) {
		return {ctor: 'Field', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$Index = F3(
	function (a, b, c) {
		return {ctor: 'Index', _0: a, _1: b, _2: c};
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$Toggle = {ctor: 'Toggle'};
var _elm_lang$virtual_dom$VirtualDom_Expando$Value = {ctor: 'Value'};
var _elm_lang$virtual_dom$VirtualDom_Expando$Key = {ctor: 'Key'};
var _elm_lang$virtual_dom$VirtualDom_Expando$None = {ctor: 'None'};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewConstructorEntry = F2(
	function (index, value) {
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$map,
			A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$None, index),
			A2(
				_elm_lang$virtual_dom$VirtualDom_Expando$view,
				_elm_lang$core$Maybe$Just(
					_elm_lang$core$Basics$toString(index)),
				value));
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$view = F2(
	function (maybeKey, expando) {
		var _p64 = expando;
		switch (_p64.ctor) {
			case 'S':
				return A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Expando$leftPad(maybeKey),
						_1: {ctor: '[]'}
					},
					A3(
						_elm_lang$virtual_dom$VirtualDom_Expando$lineStarter,
						maybeKey,
						_elm_lang$core$Maybe$Nothing,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$span,
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Expando$red,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p64._0),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}));
			case 'Primitive':
				return A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Expando$leftPad(maybeKey),
						_1: {ctor: '[]'}
					},
					A3(
						_elm_lang$virtual_dom$VirtualDom_Expando$lineStarter,
						maybeKey,
						_elm_lang$core$Maybe$Nothing,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$span,
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Expando$blue,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p64._0),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}));
			case 'Sequence':
				return A4(_elm_lang$virtual_dom$VirtualDom_Expando$viewSequence, maybeKey, _p64._0, _p64._1, _p64._2);
			case 'Dictionary':
				return A3(_elm_lang$virtual_dom$VirtualDom_Expando$viewDictionary, maybeKey, _p64._0, _p64._1);
			case 'Record':
				return A3(_elm_lang$virtual_dom$VirtualDom_Expando$viewRecord, maybeKey, _p64._0, _p64._1);
			default:
				return A4(_elm_lang$virtual_dom$VirtualDom_Expando$viewConstructor, maybeKey, _p64._0, _p64._1, _p64._2);
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewConstructor = F4(
	function (maybeKey, maybeName, isClosed, valueList) {
		var _p65 = function () {
			var _p66 = valueList;
			if (_p66.ctor === '[]') {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Nothing,
					_1: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$div,
						{ctor: '[]'},
						{ctor: '[]'})
				};
			} else {
				if (_p66._1.ctor === '[]') {
					var _p67 = _p66._0;
					switch (_p67.ctor) {
						case 'S':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Nothing,
								_1: A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$div,
									{ctor: '[]'},
									{ctor: '[]'})
							};
						case 'Primitive':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Nothing,
								_1: A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$div,
									{ctor: '[]'},
									{ctor: '[]'})
							};
						case 'Sequence':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(isClosed),
								_1: isClosed ? A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$div,
									{ctor: '[]'},
									{ctor: '[]'}) : A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$map,
									A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$None, 0),
									_elm_lang$virtual_dom$VirtualDom_Expando$viewSequenceOpen(_p67._2))
							};
						case 'Dictionary':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(isClosed),
								_1: isClosed ? A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$div,
									{ctor: '[]'},
									{ctor: '[]'}) : A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$map,
									A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$None, 0),
									_elm_lang$virtual_dom$VirtualDom_Expando$viewDictionaryOpen(_p67._1))
							};
						case 'Record':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(isClosed),
								_1: isClosed ? A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$div,
									{ctor: '[]'},
									{ctor: '[]'}) : A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$map,
									A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$None, 0),
									_elm_lang$virtual_dom$VirtualDom_Expando$viewRecordOpen(_p67._1))
							};
						default:
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(isClosed),
								_1: isClosed ? A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$div,
									{ctor: '[]'},
									{ctor: '[]'}) : A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$map,
									A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$None, 0),
									_elm_lang$virtual_dom$VirtualDom_Expando$viewConstructorOpen(_p67._2))
							};
					}
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Maybe$Just(isClosed),
						_1: isClosed ? A2(
							_elm_lang$virtual_dom$VirtualDom_Helpers$div,
							{ctor: '[]'},
							{ctor: '[]'}) : _elm_lang$virtual_dom$VirtualDom_Expando$viewConstructorOpen(valueList)
					};
				}
			}
		}();
		var maybeIsClosed = _p65._0;
		var openHtml = _p65._1;
		var tinyArgs = A2(
			_elm_lang$core$List$map,
			function (_p68) {
				return _elm_lang$core$Tuple$second(
					_elm_lang$virtual_dom$VirtualDom_Expando$viewExtraTiny(_p68));
			},
			valueList);
		var description = function () {
			var _p69 = {ctor: '_Tuple2', _0: maybeName, _1: tinyArgs};
			if (_p69._0.ctor === 'Nothing') {
				if (_p69._1.ctor === '[]') {
					return {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('()'),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('( '),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$span,
								{ctor: '[]'},
								_p69._1._0),
							_1: A3(
								_elm_lang$core$List$foldr,
								F2(
									function (args, rest) {
										return {
											ctor: '::',
											_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(', '),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$virtual_dom$VirtualDom_Helpers$span,
													{ctor: '[]'},
													args),
												_1: rest
											}
										};
									}),
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' )'),
									_1: {ctor: '[]'}
								},
								_p69._1._1)
						}
					};
				}
			} else {
				if (_p69._1.ctor === '[]') {
					return {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p69._0._0),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(
							A2(_elm_lang$core$Basics_ops['++'], _p69._0._0, ' ')),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$span,
								{ctor: '[]'},
								_p69._1._0),
							_1: A3(
								_elm_lang$core$List$foldr,
								F2(
									function (args, rest) {
										return {
											ctor: '::',
											_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' '),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$virtual_dom$VirtualDom_Helpers$span,
													{ctor: '[]'},
													args),
												_1: rest
											}
										};
									}),
								{ctor: '[]'},
								_p69._1._1)
						}
					};
				}
			}
		}();
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Expando$leftPad(maybeKey),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Expando$Toggle),
						_1: {ctor: '[]'}
					},
					A3(_elm_lang$virtual_dom$VirtualDom_Expando$lineStarter, maybeKey, maybeIsClosed, description)),
				_1: {
					ctor: '::',
					_0: openHtml,
					_1: {ctor: '[]'}
				}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewConstructorOpen = function (valueList) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{ctor: '[]'},
		A2(_elm_lang$core$List$indexedMap, _elm_lang$virtual_dom$VirtualDom_Expando$viewConstructorEntry, valueList));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewDictionaryOpen = function (keyValuePairs) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{ctor: '[]'},
		A2(_elm_lang$core$List$indexedMap, _elm_lang$virtual_dom$VirtualDom_Expando$viewDictionaryEntry, keyValuePairs));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewDictionaryEntry = F2(
	function (index, _p70) {
		var _p71 = _p70;
		var _p74 = _p71._1;
		var _p73 = _p71._0;
		var _p72 = _p73;
		switch (_p72.ctor) {
			case 'S':
				return A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$map,
					A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$Value, index),
					A2(
						_elm_lang$virtual_dom$VirtualDom_Expando$view,
						_elm_lang$core$Maybe$Just(_p72._0),
						_p74));
			case 'Primitive':
				return A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$map,
					A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$Value, index),
					A2(
						_elm_lang$virtual_dom$VirtualDom_Expando$view,
						_elm_lang$core$Maybe$Just(_p72._0),
						_p74));
			default:
				return A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$virtual_dom$VirtualDom_Helpers$map,
							A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$Key, index),
							A2(
								_elm_lang$virtual_dom$VirtualDom_Expando$view,
								_elm_lang$core$Maybe$Just('key'),
								_p73)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$map,
								A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$Value, index),
								A2(
									_elm_lang$virtual_dom$VirtualDom_Expando$view,
									_elm_lang$core$Maybe$Just('value'),
									_p74)),
							_1: {ctor: '[]'}
						}
					});
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewRecordOpen = function (record) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{ctor: '[]'},
		A2(
			_elm_lang$core$List$map,
			_elm_lang$virtual_dom$VirtualDom_Expando$viewRecordEntry,
			_elm_lang$core$Dict$toList(record)));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewRecordEntry = function (_p75) {
	var _p76 = _p75;
	var _p77 = _p76._0;
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$map,
		_elm_lang$virtual_dom$VirtualDom_Expando$Field(_p77),
		A2(
			_elm_lang$virtual_dom$VirtualDom_Expando$view,
			_elm_lang$core$Maybe$Just(_p77),
			_p76._1));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewSequenceOpen = function (values) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{ctor: '[]'},
		A2(_elm_lang$core$List$indexedMap, _elm_lang$virtual_dom$VirtualDom_Expando$viewConstructorEntry, values));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewDictionary = F3(
	function (maybeKey, isClosed, keyValuePairs) {
		var starter = A2(
			_elm_lang$core$Basics_ops['++'],
			'Dict(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(
					_elm_lang$core$List$length(keyValuePairs)),
				')'));
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Expando$leftPad(maybeKey),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Expando$Toggle),
						_1: {ctor: '[]'}
					},
					A3(
						_elm_lang$virtual_dom$VirtualDom_Expando$lineStarter,
						maybeKey,
						_elm_lang$core$Maybe$Just(isClosed),
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(starter),
							_1: {ctor: '[]'}
						})),
				_1: {
					ctor: '::',
					_0: isClosed ? _elm_lang$virtual_dom$VirtualDom_Helpers$text('') : _elm_lang$virtual_dom$VirtualDom_Expando$viewDictionaryOpen(keyValuePairs),
					_1: {ctor: '[]'}
				}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewRecord = F3(
	function (maybeKey, isClosed, record) {
		var _p78 = isClosed ? {
			ctor: '_Tuple3',
			_0: _elm_lang$core$Tuple$second(
				_elm_lang$virtual_dom$VirtualDom_Expando$viewTinyRecord(record)),
			_1: _elm_lang$virtual_dom$VirtualDom_Helpers$text(''),
			_2: _elm_lang$virtual_dom$VirtualDom_Helpers$text('')
		} : {
			ctor: '_Tuple3',
			_0: {
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('{'),
				_1: {ctor: '[]'}
			},
			_1: _elm_lang$virtual_dom$VirtualDom_Expando$viewRecordOpen(record),
			_2: A2(
				_elm_lang$virtual_dom$VirtualDom_Helpers$div,
				{
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Expando$leftPad(
						_elm_lang$core$Maybe$Just(
							{ctor: '_Tuple0'})),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('}'),
					_1: {ctor: '[]'}
				})
		};
		var start = _p78._0;
		var middle = _p78._1;
		var end = _p78._2;
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Expando$leftPad(maybeKey),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Expando$Toggle),
						_1: {ctor: '[]'}
					},
					A3(
						_elm_lang$virtual_dom$VirtualDom_Expando$lineStarter,
						maybeKey,
						_elm_lang$core$Maybe$Just(isClosed),
						start)),
				_1: {
					ctor: '::',
					_0: middle,
					_1: {
						ctor: '::',
						_0: end,
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewSequence = F4(
	function (maybeKey, seqType, isClosed, valueList) {
		var starter = A2(
			_elm_lang$virtual_dom$VirtualDom_Expando$seqTypeToString,
			_elm_lang$core$List$length(valueList),
			seqType);
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Expando$leftPad(maybeKey),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Expando$Toggle),
						_1: {ctor: '[]'}
					},
					A3(
						_elm_lang$virtual_dom$VirtualDom_Expando$lineStarter,
						maybeKey,
						_elm_lang$core$Maybe$Just(isClosed),
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(starter),
							_1: {ctor: '[]'}
						})),
				_1: {
					ctor: '::',
					_0: isClosed ? _elm_lang$virtual_dom$VirtualDom_Helpers$text('') : _elm_lang$virtual_dom$VirtualDom_Expando$viewSequenceOpen(valueList),
					_1: {ctor: '[]'}
				}
			});
	});

var _elm_lang$virtual_dom$VirtualDom_Report$some = function (list) {
	return !_elm_lang$core$List$isEmpty(list);
};
var _elm_lang$virtual_dom$VirtualDom_Report$TagChanges = F4(
	function (a, b, c, d) {
		return {removed: a, changed: b, added: c, argsMatch: d};
	});
var _elm_lang$virtual_dom$VirtualDom_Report$emptyTagChanges = function (argsMatch) {
	return A4(
		_elm_lang$virtual_dom$VirtualDom_Report$TagChanges,
		{ctor: '[]'},
		{ctor: '[]'},
		{ctor: '[]'},
		argsMatch);
};
var _elm_lang$virtual_dom$VirtualDom_Report$hasTagChanges = function (tagChanges) {
	return _elm_lang$core$Native_Utils.eq(
		tagChanges,
		A4(
			_elm_lang$virtual_dom$VirtualDom_Report$TagChanges,
			{ctor: '[]'},
			{ctor: '[]'},
			{ctor: '[]'},
			true));
};
var _elm_lang$virtual_dom$VirtualDom_Report$SomethingChanged = function (a) {
	return {ctor: 'SomethingChanged', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Report$MessageChanged = F2(
	function (a, b) {
		return {ctor: 'MessageChanged', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Report$VersionChanged = F2(
	function (a, b) {
		return {ctor: 'VersionChanged', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Report$CorruptHistory = {ctor: 'CorruptHistory'};
var _elm_lang$virtual_dom$VirtualDom_Report$UnionChange = F2(
	function (a, b) {
		return {ctor: 'UnionChange', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Report$AliasChange = function (a) {
	return {ctor: 'AliasChange', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Report$Fine = {ctor: 'Fine'};
var _elm_lang$virtual_dom$VirtualDom_Report$Risky = {ctor: 'Risky'};
var _elm_lang$virtual_dom$VirtualDom_Report$Impossible = {ctor: 'Impossible'};
var _elm_lang$virtual_dom$VirtualDom_Report$worstCase = F2(
	function (status, statusList) {
		worstCase:
		while (true) {
			var _p0 = statusList;
			if (_p0.ctor === '[]') {
				return status;
			} else {
				switch (_p0._0.ctor) {
					case 'Impossible':
						return _elm_lang$virtual_dom$VirtualDom_Report$Impossible;
					case 'Risky':
						var _v1 = _elm_lang$virtual_dom$VirtualDom_Report$Risky,
							_v2 = _p0._1;
						status = _v1;
						statusList = _v2;
						continue worstCase;
					default:
						var _v3 = status,
							_v4 = _p0._1;
						status = _v3;
						statusList = _v4;
						continue worstCase;
				}
			}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Report$evaluateChange = function (change) {
	var _p1 = change;
	if (_p1.ctor === 'AliasChange') {
		return _elm_lang$virtual_dom$VirtualDom_Report$Impossible;
	} else {
		return ((!_p1._1.argsMatch) || (_elm_lang$virtual_dom$VirtualDom_Report$some(_p1._1.changed) || _elm_lang$virtual_dom$VirtualDom_Report$some(_p1._1.removed))) ? _elm_lang$virtual_dom$VirtualDom_Report$Impossible : (_elm_lang$virtual_dom$VirtualDom_Report$some(_p1._1.added) ? _elm_lang$virtual_dom$VirtualDom_Report$Risky : _elm_lang$virtual_dom$VirtualDom_Report$Fine);
	}
};
var _elm_lang$virtual_dom$VirtualDom_Report$evaluate = function (report) {
	var _p2 = report;
	switch (_p2.ctor) {
		case 'CorruptHistory':
			return _elm_lang$virtual_dom$VirtualDom_Report$Impossible;
		case 'VersionChanged':
			return _elm_lang$virtual_dom$VirtualDom_Report$Impossible;
		case 'MessageChanged':
			return _elm_lang$virtual_dom$VirtualDom_Report$Impossible;
		default:
			return A2(
				_elm_lang$virtual_dom$VirtualDom_Report$worstCase,
				_elm_lang$virtual_dom$VirtualDom_Report$Fine,
				A2(_elm_lang$core$List$map, _elm_lang$virtual_dom$VirtualDom_Report$evaluateChange, _p2._0));
	}
};

var _elm_lang$virtual_dom$VirtualDom_Metadata$encodeDict = F2(
	function (f, dict) {
		return _elm_lang$core$Json_Encode$object(
			_elm_lang$core$Dict$toList(
				A2(
					_elm_lang$core$Dict$map,
					F2(
						function (key, value) {
							return f(value);
						}),
					dict)));
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$encodeUnion = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'args',
				_1: _elm_lang$core$Json_Encode$list(
					A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, _p1.args))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'tags',
					_1: A2(
						_elm_lang$virtual_dom$VirtualDom_Metadata$encodeDict,
						function (_p2) {
							return _elm_lang$core$Json_Encode$list(
								A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, _p2));
						},
						_p1.tags)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$encodeAlias = function (_p3) {
	var _p4 = _p3;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'args',
				_1: _elm_lang$core$Json_Encode$list(
					A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, _p4.args))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'type',
					_1: _elm_lang$core$Json_Encode$string(_p4.tipe)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$encodeTypes = function (_p5) {
	var _p6 = _p5;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'message',
				_1: _elm_lang$core$Json_Encode$string(_p6.message)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'aliases',
					_1: A2(_elm_lang$virtual_dom$VirtualDom_Metadata$encodeDict, _elm_lang$virtual_dom$VirtualDom_Metadata$encodeAlias, _p6.aliases)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'unions',
						_1: A2(_elm_lang$virtual_dom$VirtualDom_Metadata$encodeDict, _elm_lang$virtual_dom$VirtualDom_Metadata$encodeUnion, _p6.unions)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$encodeVersions = function (_p7) {
	var _p8 = _p7;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'elm',
				_1: _elm_lang$core$Json_Encode$string(_p8.elm)
			},
			_1: {ctor: '[]'}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$encode = function (_p9) {
	var _p10 = _p9;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'versions',
				_1: _elm_lang$virtual_dom$VirtualDom_Metadata$encodeVersions(_p10.versions)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'types',
					_1: _elm_lang$virtual_dom$VirtualDom_Metadata$encodeTypes(_p10.types)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$checkTag = F4(
	function (tag, old, $new, changes) {
		return _elm_lang$core$Native_Utils.eq(old, $new) ? changes : _elm_lang$core$Native_Utils.update(
			changes,
			{
				changed: {ctor: '::', _0: tag, _1: changes.changed}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$addTag = F3(
	function (tag, _p11, changes) {
		return _elm_lang$core$Native_Utils.update(
			changes,
			{
				added: {ctor: '::', _0: tag, _1: changes.added}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$removeTag = F3(
	function (tag, _p12, changes) {
		return _elm_lang$core$Native_Utils.update(
			changes,
			{
				removed: {ctor: '::', _0: tag, _1: changes.removed}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$checkUnion = F4(
	function (name, old, $new, changes) {
		var tagChanges = A6(
			_elm_lang$core$Dict$merge,
			_elm_lang$virtual_dom$VirtualDom_Metadata$removeTag,
			_elm_lang$virtual_dom$VirtualDom_Metadata$checkTag,
			_elm_lang$virtual_dom$VirtualDom_Metadata$addTag,
			old.tags,
			$new.tags,
			_elm_lang$virtual_dom$VirtualDom_Report$emptyTagChanges(
				_elm_lang$core$Native_Utils.eq(old.args, $new.args)));
		return _elm_lang$virtual_dom$VirtualDom_Report$hasTagChanges(tagChanges) ? changes : {
			ctor: '::',
			_0: A2(_elm_lang$virtual_dom$VirtualDom_Report$UnionChange, name, tagChanges),
			_1: changes
		};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$checkAlias = F4(
	function (name, old, $new, changes) {
		return (_elm_lang$core$Native_Utils.eq(old.tipe, $new.tipe) && _elm_lang$core$Native_Utils.eq(old.args, $new.args)) ? changes : {
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Report$AliasChange(name),
			_1: changes
		};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$ignore = F3(
	function (key, value, report) {
		return report;
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$checkTypes = F2(
	function (old, $new) {
		return (!_elm_lang$core$Native_Utils.eq(old.message, $new.message)) ? A2(_elm_lang$virtual_dom$VirtualDom_Report$MessageChanged, old.message, $new.message) : _elm_lang$virtual_dom$VirtualDom_Report$SomethingChanged(
			A6(
				_elm_lang$core$Dict$merge,
				_elm_lang$virtual_dom$VirtualDom_Metadata$ignore,
				_elm_lang$virtual_dom$VirtualDom_Metadata$checkUnion,
				_elm_lang$virtual_dom$VirtualDom_Metadata$ignore,
				old.unions,
				$new.unions,
				A6(
					_elm_lang$core$Dict$merge,
					_elm_lang$virtual_dom$VirtualDom_Metadata$ignore,
					_elm_lang$virtual_dom$VirtualDom_Metadata$checkAlias,
					_elm_lang$virtual_dom$VirtualDom_Metadata$ignore,
					old.aliases,
					$new.aliases,
					{ctor: '[]'})));
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$check = F2(
	function (old, $new) {
		return (!_elm_lang$core$Native_Utils.eq(old.versions.elm, $new.versions.elm)) ? A2(_elm_lang$virtual_dom$VirtualDom_Report$VersionChanged, old.versions.elm, $new.versions.elm) : A2(_elm_lang$virtual_dom$VirtualDom_Metadata$checkTypes, old.types, $new.types);
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$hasProblem = F2(
	function (tipe, _p13) {
		var _p14 = _p13;
		return A2(_elm_lang$core$String$contains, _p14._1, tipe) ? _elm_lang$core$Maybe$Just(_p14._0) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$Metadata = F2(
	function (a, b) {
		return {versions: a, types: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$Versions = function (a) {
	return {elm: a};
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$decodeVersions = A2(
	_elm_lang$core$Json_Decode$map,
	_elm_lang$virtual_dom$VirtualDom_Metadata$Versions,
	A2(_elm_lang$core$Json_Decode$field, 'elm', _elm_lang$core$Json_Decode$string));
var _elm_lang$virtual_dom$VirtualDom_Metadata$Types = F3(
	function (a, b, c) {
		return {message: a, aliases: b, unions: c};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$Alias = F2(
	function (a, b) {
		return {args: a, tipe: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$decodeAlias = A3(
	_elm_lang$core$Json_Decode$map2,
	_elm_lang$virtual_dom$VirtualDom_Metadata$Alias,
	A2(
		_elm_lang$core$Json_Decode$field,
		'args',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
	A2(_elm_lang$core$Json_Decode$field, 'type', _elm_lang$core$Json_Decode$string));
var _elm_lang$virtual_dom$VirtualDom_Metadata$Union = F2(
	function (a, b) {
		return {args: a, tags: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$decodeUnion = A3(
	_elm_lang$core$Json_Decode$map2,
	_elm_lang$virtual_dom$VirtualDom_Metadata$Union,
	A2(
		_elm_lang$core$Json_Decode$field,
		'args',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
	A2(
		_elm_lang$core$Json_Decode$field,
		'tags',
		_elm_lang$core$Json_Decode$dict(
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string))));
var _elm_lang$virtual_dom$VirtualDom_Metadata$decodeTypes = A4(
	_elm_lang$core$Json_Decode$map3,
	_elm_lang$virtual_dom$VirtualDom_Metadata$Types,
	A2(_elm_lang$core$Json_Decode$field, 'message', _elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode$field,
		'aliases',
		_elm_lang$core$Json_Decode$dict(_elm_lang$virtual_dom$VirtualDom_Metadata$decodeAlias)),
	A2(
		_elm_lang$core$Json_Decode$field,
		'unions',
		_elm_lang$core$Json_Decode$dict(_elm_lang$virtual_dom$VirtualDom_Metadata$decodeUnion)));
var _elm_lang$virtual_dom$VirtualDom_Metadata$decoder = A3(
	_elm_lang$core$Json_Decode$map2,
	_elm_lang$virtual_dom$VirtualDom_Metadata$Metadata,
	A2(_elm_lang$core$Json_Decode$field, 'versions', _elm_lang$virtual_dom$VirtualDom_Metadata$decodeVersions),
	A2(_elm_lang$core$Json_Decode$field, 'types', _elm_lang$virtual_dom$VirtualDom_Metadata$decodeTypes));
var _elm_lang$virtual_dom$VirtualDom_Metadata$Error = F2(
	function (a, b) {
		return {message: a, problems: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$ProblemType = F2(
	function (a, b) {
		return {name: a, problems: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$VirtualDom = {ctor: 'VirtualDom'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$Program = {ctor: 'Program'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$Request = {ctor: 'Request'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$Socket = {ctor: 'Socket'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$Process = {ctor: 'Process'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$Task = {ctor: 'Task'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$Decoder = {ctor: 'Decoder'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$Function = {ctor: 'Function'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$problemTable = {
	ctor: '::',
	_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$Function, _1: '->'},
	_1: {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$Decoder, _1: 'Json.Decode.Decoder'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$Task, _1: 'Task.Task'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$Process, _1: 'Process.Id'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$Socket, _1: 'WebSocket.LowLevel.WebSocket'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$Request, _1: 'Http.Request'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$Program, _1: 'Platform.Program'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$VirtualDom, _1: 'VirtualDom.Node'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$VirtualDom, _1: 'VirtualDom.Attribute'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$findProblems = function (tipe) {
	return A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$virtual_dom$VirtualDom_Metadata$hasProblem(tipe),
		_elm_lang$virtual_dom$VirtualDom_Metadata$problemTable);
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$collectBadAliases = F3(
	function (name, _p15, list) {
		var _p16 = _p15;
		var _p17 = _elm_lang$virtual_dom$VirtualDom_Metadata$findProblems(_p16.tipe);
		if (_p17.ctor === '[]') {
			return list;
		} else {
			return {
				ctor: '::',
				_0: A2(_elm_lang$virtual_dom$VirtualDom_Metadata$ProblemType, name, _p17),
				_1: list
			};
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$collectBadUnions = F3(
	function (name, _p18, list) {
		var _p19 = _p18;
		var _p20 = A2(
			_elm_lang$core$List$concatMap,
			_elm_lang$virtual_dom$VirtualDom_Metadata$findProblems,
			_elm_lang$core$List$concat(
				_elm_lang$core$Dict$values(_p19.tags)));
		if (_p20.ctor === '[]') {
			return list;
		} else {
			return {
				ctor: '::',
				_0: A2(_elm_lang$virtual_dom$VirtualDom_Metadata$ProblemType, name, _p20),
				_1: list
			};
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$isPortable = function (_p21) {
	var _p22 = _p21;
	var _p24 = _p22.types;
	var badAliases = A3(
		_elm_lang$core$Dict$foldl,
		_elm_lang$virtual_dom$VirtualDom_Metadata$collectBadAliases,
		{ctor: '[]'},
		_p24.aliases);
	var _p23 = A3(_elm_lang$core$Dict$foldl, _elm_lang$virtual_dom$VirtualDom_Metadata$collectBadUnions, badAliases, _p24.unions);
	if (_p23.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			A2(_elm_lang$virtual_dom$VirtualDom_Metadata$Error, _p24.message, _p23));
	}
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$decode = function (value) {
	var _p25 = A2(_elm_lang$core$Json_Decode$decodeValue, _elm_lang$virtual_dom$VirtualDom_Metadata$decoder, value);
	if (_p25.ctor === 'Err') {
		return _elm_lang$core$Native_Utils.crashCase(
			'VirtualDom.Metadata',
			{
				start: {line: 229, column: 3},
				end: {line: 239, column: 20}
			},
			_p25)('Compiler is generating bad metadata. Report this at <https://github.com/elm-lang/virtual-dom/issues>.');
	} else {
		var _p28 = _p25._0;
		var _p27 = _elm_lang$virtual_dom$VirtualDom_Metadata$isPortable(_p28);
		if (_p27.ctor === 'Nothing') {
			return _elm_lang$core$Result$Ok(_p28);
		} else {
			return _elm_lang$core$Result$Err(_p27._0);
		}
	}
};

var _elm_lang$virtual_dom$VirtualDom_History$viewMessage = F3(
	function (currentIndex, index, msg) {
		var messageName = _elm_lang$virtual_dom$Native_Debug.messageToString(msg);
		var className = _elm_lang$core$Native_Utils.eq(currentIndex, index) ? 'messages-entry messages-entry-selected' : 'messages-entry';
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class(className),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$on,
						'click',
						_elm_lang$core$Json_Decode$succeed(index)),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$span,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('messages-entry-content'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$virtual_dom$VirtualDom_Helpers$attribute, 'title', messageName),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(messageName),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$span,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('messages-entry-index'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(
								_elm_lang$core$Basics$toString(index)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_History$consMsg = F3(
	function (currentIndex, msg, _p0) {
		var _p1 = _p0;
		var _p2 = _p1._0;
		return {
			ctor: '_Tuple2',
			_0: _p2 - 1,
			_1: {
				ctor: '::',
				_0: A4(_elm_lang$virtual_dom$VirtualDom_Helpers$lazy3, _elm_lang$virtual_dom$VirtualDom_History$viewMessage, currentIndex, _p2, msg),
				_1: _p1._1
			}
		};
	});
var _elm_lang$virtual_dom$VirtualDom_History$viewSnapshot = F3(
	function (currentIndex, index, _p3) {
		var _p4 = _p3;
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{ctor: '[]'},
			_elm_lang$core$Tuple$second(
				A3(
					_elm_lang$core$Array$foldl,
					_elm_lang$virtual_dom$VirtualDom_History$consMsg(currentIndex),
					{
						ctor: '_Tuple2',
						_0: index - 1,
						_1: {ctor: '[]'}
					},
					_p4.messages)));
	});
var _elm_lang$virtual_dom$VirtualDom_History$undone = function (getResult) {
	var _p5 = getResult;
	if (_p5.ctor === 'Done') {
		return {ctor: '_Tuple2', _0: _p5._1, _1: _p5._0};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'VirtualDom.History',
			{
				start: {line: 195, column: 3},
				end: {line: 200, column: 39}
			},
			_p5)('Bug in History.get');
	}
};
var _elm_lang$virtual_dom$VirtualDom_History$elmToJs = _elm_lang$virtual_dom$Native_Debug.unsafeCoerce;
var _elm_lang$virtual_dom$VirtualDom_History$encodeHelp = F2(
	function (snapshot, allMessages) {
		return A3(
			_elm_lang$core$Array$foldl,
			F2(
				function (elm, msgs) {
					return {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_History$elmToJs(elm),
						_1: msgs
					};
				}),
			allMessages,
			snapshot.messages);
	});
var _elm_lang$virtual_dom$VirtualDom_History$encode = function (_p7) {
	var _p8 = _p7;
	var recentJson = A2(
		_elm_lang$core$List$map,
		_elm_lang$virtual_dom$VirtualDom_History$elmToJs,
		_elm_lang$core$List$reverse(_p8.recent.messages));
	return _elm_lang$core$Json_Encode$list(
		A3(_elm_lang$core$Array$foldr, _elm_lang$virtual_dom$VirtualDom_History$encodeHelp, recentJson, _p8.snapshots));
};
var _elm_lang$virtual_dom$VirtualDom_History$jsToElm = _elm_lang$virtual_dom$Native_Debug.unsafeCoerce;
var _elm_lang$virtual_dom$VirtualDom_History$initialModel = function (_p9) {
	var _p10 = _p9;
	var _p11 = A2(_elm_lang$core$Array$get, 0, _p10.snapshots);
	if (_p11.ctor === 'Just') {
		return _p11._0.model;
	} else {
		return _p10.recent.model;
	}
};
var _elm_lang$virtual_dom$VirtualDom_History$size = function (history) {
	return history.numMessages;
};
var _elm_lang$virtual_dom$VirtualDom_History$maxSnapshotSize = 64;
var _elm_lang$virtual_dom$VirtualDom_History$consSnapshot = F3(
	function (currentIndex, snapshot, _p12) {
		var _p13 = _p12;
		var _p14 = _p13._0;
		var nextIndex = _p14 - _elm_lang$virtual_dom$VirtualDom_History$maxSnapshotSize;
		var currentIndexHelp = ((_elm_lang$core$Native_Utils.cmp(nextIndex, currentIndex) < 1) && (_elm_lang$core$Native_Utils.cmp(currentIndex, _p14) < 0)) ? currentIndex : -1;
		return {
			ctor: '_Tuple2',
			_0: _p14 - _elm_lang$virtual_dom$VirtualDom_History$maxSnapshotSize,
			_1: {
				ctor: '::',
				_0: A4(_elm_lang$virtual_dom$VirtualDom_Helpers$lazy3, _elm_lang$virtual_dom$VirtualDom_History$viewSnapshot, currentIndexHelp, _p14, snapshot),
				_1: _p13._1
			}
		};
	});
var _elm_lang$virtual_dom$VirtualDom_History$viewSnapshots = F2(
	function (currentIndex, snapshots) {
		var highIndex = _elm_lang$virtual_dom$VirtualDom_History$maxSnapshotSize * _elm_lang$core$Array$length(snapshots);
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{ctor: '[]'},
			_elm_lang$core$Tuple$second(
				A3(
					_elm_lang$core$Array$foldr,
					_elm_lang$virtual_dom$VirtualDom_History$consSnapshot(currentIndex),
					{
						ctor: '_Tuple2',
						_0: highIndex,
						_1: {ctor: '[]'}
					},
					snapshots)));
	});
var _elm_lang$virtual_dom$VirtualDom_History$view = F2(
	function (maybeIndex, _p15) {
		var _p16 = _p15;
		var _p17 = function () {
			var _p18 = maybeIndex;
			if (_p18.ctor === 'Nothing') {
				return {ctor: '_Tuple2', _0: -1, _1: 'debugger-sidebar-messages'};
			} else {
				return {ctor: '_Tuple2', _0: _p18._0, _1: 'debugger-sidebar-messages-paused'};
			}
		}();
		var index = _p17._0;
		var className = _p17._1;
		var oldStuff = A3(_elm_lang$virtual_dom$VirtualDom_Helpers$lazy2, _elm_lang$virtual_dom$VirtualDom_History$viewSnapshots, index, _p16.snapshots);
		var newStuff = _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldl,
				_elm_lang$virtual_dom$VirtualDom_History$consMsg(index),
				{
					ctor: '_Tuple2',
					_0: _p16.numMessages - 1,
					_1: {ctor: '[]'}
				},
				_p16.recent.messages));
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class(className),
				_1: {ctor: '[]'}
			},
			{ctor: '::', _0: oldStuff, _1: newStuff});
	});
var _elm_lang$virtual_dom$VirtualDom_History$History = F3(
	function (a, b, c) {
		return {snapshots: a, recent: b, numMessages: c};
	});
var _elm_lang$virtual_dom$VirtualDom_History$RecentHistory = F3(
	function (a, b, c) {
		return {model: a, messages: b, numMessages: c};
	});
var _elm_lang$virtual_dom$VirtualDom_History$empty = function (model) {
	return A3(
		_elm_lang$virtual_dom$VirtualDom_History$History,
		_elm_lang$core$Array$empty,
		A3(
			_elm_lang$virtual_dom$VirtualDom_History$RecentHistory,
			model,
			{ctor: '[]'},
			0),
		0);
};
var _elm_lang$virtual_dom$VirtualDom_History$Snapshot = F2(
	function (a, b) {
		return {model: a, messages: b};
	});
var _elm_lang$virtual_dom$VirtualDom_History$addRecent = F3(
	function (msg, newModel, _p19) {
		var _p20 = _p19;
		var _p23 = _p20.numMessages;
		var _p22 = _p20.model;
		var _p21 = _p20.messages;
		return _elm_lang$core$Native_Utils.eq(_p23, _elm_lang$virtual_dom$VirtualDom_History$maxSnapshotSize) ? {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Maybe$Just(
				A2(
					_elm_lang$virtual_dom$VirtualDom_History$Snapshot,
					_p22,
					_elm_lang$core$Array$fromList(_p21))),
			_1: A3(
				_elm_lang$virtual_dom$VirtualDom_History$RecentHistory,
				newModel,
				{
					ctor: '::',
					_0: msg,
					_1: {ctor: '[]'}
				},
				1)
		} : {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Maybe$Nothing,
			_1: A3(
				_elm_lang$virtual_dom$VirtualDom_History$RecentHistory,
				_p22,
				{ctor: '::', _0: msg, _1: _p21},
				_p23 + 1)
		};
	});
var _elm_lang$virtual_dom$VirtualDom_History$add = F3(
	function (msg, model, _p24) {
		var _p25 = _p24;
		var _p28 = _p25.snapshots;
		var _p27 = _p25.numMessages;
		var _p26 = A3(_elm_lang$virtual_dom$VirtualDom_History$addRecent, msg, model, _p25.recent);
		if (_p26._0.ctor === 'Just') {
			return A3(
				_elm_lang$virtual_dom$VirtualDom_History$History,
				A2(_elm_lang$core$Array$push, _p26._0._0, _p28),
				_p26._1,
				_p27 + 1);
		} else {
			return A3(_elm_lang$virtual_dom$VirtualDom_History$History, _p28, _p26._1, _p27 + 1);
		}
	});
var _elm_lang$virtual_dom$VirtualDom_History$decoder = F2(
	function (initialModel, update) {
		var addMessage = F2(
			function (rawMsg, _p29) {
				var _p30 = _p29;
				var _p31 = _p30._0;
				var msg = _elm_lang$virtual_dom$VirtualDom_History$jsToElm(rawMsg);
				return {
					ctor: '_Tuple2',
					_0: A2(update, msg, _p31),
					_1: A3(_elm_lang$virtual_dom$VirtualDom_History$add, msg, _p31, _p30._1)
				};
			});
		var updateModel = function (rawMsgs) {
			return A3(
				_elm_lang$core$List$foldl,
				addMessage,
				{
					ctor: '_Tuple2',
					_0: initialModel,
					_1: _elm_lang$virtual_dom$VirtualDom_History$empty(initialModel)
				},
				rawMsgs);
		};
		return A2(
			_elm_lang$core$Json_Decode$map,
			updateModel,
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value));
	});
var _elm_lang$virtual_dom$VirtualDom_History$Done = F2(
	function (a, b) {
		return {ctor: 'Done', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_History$Stepping = F2(
	function (a, b) {
		return {ctor: 'Stepping', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_History$getHelp = F3(
	function (update, msg, getResult) {
		var _p32 = getResult;
		if (_p32.ctor === 'Done') {
			return getResult;
		} else {
			var _p34 = _p32._0;
			var _p33 = _p32._1;
			return _elm_lang$core$Native_Utils.eq(_p34, 0) ? A2(
				_elm_lang$virtual_dom$VirtualDom_History$Done,
				msg,
				_elm_lang$core$Tuple$first(
					A2(update, msg, _p33))) : A2(
				_elm_lang$virtual_dom$VirtualDom_History$Stepping,
				_p34 - 1,
				_elm_lang$core$Tuple$first(
					A2(update, msg, _p33)));
		}
	});
var _elm_lang$virtual_dom$VirtualDom_History$get = F3(
	function (update, index, _p35) {
		var _p36 = _p35;
		var _p39 = _p36.recent;
		var snapshotMax = _p36.numMessages - _p39.numMessages;
		if (_elm_lang$core$Native_Utils.cmp(index, snapshotMax) > -1) {
			return _elm_lang$virtual_dom$VirtualDom_History$undone(
				A3(
					_elm_lang$core$List$foldr,
					_elm_lang$virtual_dom$VirtualDom_History$getHelp(update),
					A2(_elm_lang$virtual_dom$VirtualDom_History$Stepping, index - snapshotMax, _p39.model),
					_p39.messages));
		} else {
			var _p37 = A2(_elm_lang$core$Array$get, (index / _elm_lang$virtual_dom$VirtualDom_History$maxSnapshotSize) | 0, _p36.snapshots);
			if (_p37.ctor === 'Nothing') {
				return _elm_lang$core$Native_Utils.crashCase(
					'VirtualDom.History',
					{
						start: {line: 165, column: 7},
						end: {line: 171, column: 95}
					},
					_p37)('UI should only let you ask for real indexes!');
			} else {
				return _elm_lang$virtual_dom$VirtualDom_History$undone(
					A3(
						_elm_lang$core$Array$foldr,
						_elm_lang$virtual_dom$VirtualDom_History$getHelp(update),
						A2(
							_elm_lang$virtual_dom$VirtualDom_History$Stepping,
							A2(_elm_lang$core$Basics$rem, index, _elm_lang$virtual_dom$VirtualDom_History$maxSnapshotSize),
							_p37._0.model),
						_p37._0.messages));
			}
		}
	});

var _elm_lang$virtual_dom$VirtualDom_Overlay$styles = A3(
	_elm_lang$virtual_dom$VirtualDom_Helpers$node,
	'style',
	{ctor: '[]'},
	{
		ctor: '::',
		_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('\n\n.elm-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  color: white;\n  pointer-events: none;\n  font-family: \'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif;\n}\n\n.elm-overlay-resume {\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n  text-align: center;\n  pointer-events: auto;\n  background-color: rgba(200, 200, 200, 0.7);\n}\n\n.elm-overlay-resume-words {\n  position: absolute;\n  top: calc(50% - 40px);\n  font-size: 80px;\n  line-height: 80px;\n  height: 80px;\n  width: 100%;\n}\n\n.elm-mini-controls {\n  position: fixed;\n  bottom: 0;\n  right: 6px;\n  border-radius: 4px;\n  background-color: rgb(61, 61, 61);\n  font-family: monospace;\n  pointer-events: auto;\n}\n\n.elm-mini-controls-button {\n  padding: 6px;\n  cursor: pointer;\n  text-align: center;\n  min-width: 24ch;\n}\n\n.elm-mini-controls-import-export {\n  padding: 4px 0;\n  font-size: 0.8em;\n  text-align: center;\n  background-color: rgb(50, 50, 50);\n}\n\n.elm-overlay-message {\n  position: absolute;\n  width: 600px;\n  height: 100%;\n  padding-left: calc(50% - 300px);\n  padding-right: calc(50% - 300px);\n  background-color: rgba(200, 200, 200, 0.7);\n  pointer-events: auto;\n}\n\n.elm-overlay-message-title {\n  font-size: 36px;\n  height: 80px;\n  background-color: rgb(50, 50, 50);\n  padding-left: 22px;\n  vertical-align: middle;\n  line-height: 80px;\n}\n\n.elm-overlay-message-details {\n  padding: 8px 20px;\n  overflow-y: auto;\n  max-height: calc(100% - 156px);\n  background-color: rgb(61, 61, 61);\n}\n\n.elm-overlay-message-details-type {\n  font-size: 1.5em;\n}\n\n.elm-overlay-message-details ul {\n  list-style-type: none;\n  padding-left: 20px;\n}\n\n.elm-overlay-message-details ul ul {\n  list-style-type: disc;\n  padding-left: 2em;\n}\n\n.elm-overlay-message-details li {\n  margin: 8px 0;\n}\n\n.elm-overlay-message-buttons {\n  height: 60px;\n  line-height: 60px;\n  text-align: right;\n  background-color: rgb(50, 50, 50);\n}\n\n.elm-overlay-message-buttons button {\n  margin-right: 20px;\n}\n\n'),
		_1: {ctor: '[]'}
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$button = F2(
	function (msg, label) {
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$span,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(msg),
				_1: {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'cursor', _1: 'pointer'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(label),
				_1: {ctor: '[]'}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewImportExport = F3(
	function (props, importMsg, exportMsg) {
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			props,
			{
				ctor: '::',
				_0: A2(_elm_lang$virtual_dom$VirtualDom_Overlay$button, importMsg, 'Import'),
				_1: {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' / '),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$virtual_dom$VirtualDom_Overlay$button, exportMsg, 'Export'),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewMiniControls = F2(
	function (config, numMsgs) {
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-mini-controls'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(config.open),
						_1: {
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-mini-controls-button'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Explore History (',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(numMsgs),
									')'))),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A3(
						_elm_lang$virtual_dom$VirtualDom_Overlay$viewImportExport,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-mini-controls-import-export'),
							_1: {ctor: '[]'}
						},
						config.importHistory,
						config.exportHistory),
					_1: {ctor: '[]'}
				}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$addCommas = function (items) {
	var _p0 = items;
	if (_p0.ctor === '[]') {
		return '';
	} else {
		if (_p0._1.ctor === '[]') {
			return _p0._0;
		} else {
			if (_p0._1._1.ctor === '[]') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p0._0,
					A2(_elm_lang$core$Basics_ops['++'], ' and ', _p0._1._0));
			} else {
				return A2(
					_elm_lang$core$String$join,
					', ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p0._1,
						{
							ctor: '::',
							_0: A2(_elm_lang$core$Basics_ops['++'], ' and ', _p0._0),
							_1: {ctor: '[]'}
						}));
			}
		}
	}
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$problemToString = function (problem) {
	var _p1 = problem;
	switch (_p1.ctor) {
		case 'Function':
			return 'functions';
		case 'Decoder':
			return 'JSON decoders';
		case 'Task':
			return 'tasks';
		case 'Process':
			return 'processes';
		case 'Socket':
			return 'web sockets';
		case 'Request':
			return 'HTTP requests';
		case 'Program':
			return 'programs';
		default:
			return 'virtual DOM values';
	}
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$goodNews2 = '\nfunction can pattern match on that data and call whatever functions, JSON\ndecoders, etc. you need. This makes the code much more explicit and easy to\nfollow for other readers (or you in a few months!)\n';
var _elm_lang$virtual_dom$VirtualDom_Overlay$goodNews1 = '\nThe good news is that having values like this in your message type is not\nso great in the long run. You are better off using simpler data, like\n';
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode = function (name) {
	return A3(
		_elm_lang$virtual_dom$VirtualDom_Helpers$node,
		'code',
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(name),
			_1: {ctor: '[]'}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewMention = F2(
	function (tags, verbed) {
		var _p2 = A2(
			_elm_lang$core$List$map,
			_elm_lang$virtual_dom$VirtualDom_Overlay$viewCode,
			_elm_lang$core$List$reverse(tags));
		if (_p2.ctor === '[]') {
			return _elm_lang$virtual_dom$VirtualDom_Helpers$text('');
		} else {
			if (_p2._1.ctor === '[]') {
				return A3(
					_elm_lang$virtual_dom$VirtualDom_Helpers$node,
					'li',
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(verbed),
						_1: {
							ctor: '::',
							_0: _p2._0,
							_1: {
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('.'),
								_1: {ctor: '[]'}
							}
						}
					});
			} else {
				if (_p2._1._1.ctor === '[]') {
					return A3(
						_elm_lang$virtual_dom$VirtualDom_Helpers$node,
						'li',
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(verbed),
							_1: {
								ctor: '::',
								_0: _p2._1._0,
								_1: {
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' and '),
									_1: {
										ctor: '::',
										_0: _p2._0,
										_1: {
											ctor: '::',
											_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('.'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						});
				} else {
					return A3(
						_elm_lang$virtual_dom$VirtualDom_Helpers$node,
						'li',
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(verbed),
							_1: A2(
								_elm_lang$core$Basics_ops['++'],
								A2(
									_elm_lang$core$List$intersperse,
									_elm_lang$virtual_dom$VirtualDom_Helpers$text(', '),
									_elm_lang$core$List$reverse(_p2._1)),
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(', and '),
									_1: {
										ctor: '::',
										_0: _p2._0,
										_1: {
											ctor: '::',
											_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('.'),
											_1: {ctor: '[]'}
										}
									}
								})
						});
				}
			}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewChange = function (change) {
	return A3(
		_elm_lang$virtual_dom$VirtualDom_Helpers$node,
		'li',
		{ctor: '[]'},
		function () {
			var _p3 = change;
			if (_p3.ctor === 'AliasChange') {
				return {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$span,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-message-details-type'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode(_p3._0),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$span,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-message-details-type'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode(_p3._0),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A3(
							_elm_lang$virtual_dom$VirtualDom_Helpers$node,
							'ul',
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(_elm_lang$virtual_dom$VirtualDom_Overlay$viewMention, _p3._1.removed, 'Removed '),
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$virtual_dom$VirtualDom_Overlay$viewMention, _p3._1.changed, 'Changed '),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$virtual_dom$VirtualDom_Overlay$viewMention, _p3._1.added, 'Added '),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _p3._1.argsMatch ? _elm_lang$virtual_dom$VirtualDom_Helpers$text('') : _elm_lang$virtual_dom$VirtualDom_Helpers$text('This may be due to the fact that the type variable names changed.'),
							_1: {ctor: '[]'}
						}
					}
				};
			}
		}());
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewProblemType = function (_p4) {
	var _p5 = _p4;
	return A3(
		_elm_lang$virtual_dom$VirtualDom_Helpers$node,
		'li',
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode(_p5.name),
			_1: {
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						' can contain ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$virtual_dom$VirtualDom_Overlay$addCommas(
								A2(_elm_lang$core$List$map, _elm_lang$virtual_dom$VirtualDom_Overlay$problemToString, _p5.problems)),
							'.'))),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewBadMetadata = function (_p6) {
	var _p7 = _p6;
	return {
		ctor: '::',
		_0: A3(
			_elm_lang$virtual_dom$VirtualDom_Helpers$node,
			'p',
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('The '),
				_1: {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode(_p7.message),
					_1: {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' type of your program cannot be reliably serialized for history files.'),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {
			ctor: '::',
			_0: A3(
				_elm_lang$virtual_dom$VirtualDom_Helpers$node,
				'p',
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('Functions cannot be serialized, nor can values that contain functions. This is a problem in these places:'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A3(
					_elm_lang$virtual_dom$VirtualDom_Helpers$node,
					'ul',
					{ctor: '[]'},
					A2(_elm_lang$core$List$map, _elm_lang$virtual_dom$VirtualDom_Overlay$viewProblemType, _p7.problems)),
				_1: {
					ctor: '::',
					_0: A3(
						_elm_lang$virtual_dom$VirtualDom_Helpers$node,
						'p',
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_elm_lang$virtual_dom$VirtualDom_Overlay$goodNews1),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$a,
									{
										ctor: '::',
										_0: _elm_lang$virtual_dom$VirtualDom_Helpers$href('https://guide.elm-lang.org/types/union_types.html'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('union types'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(', in your messages. From there, your '),
									_1: {
										ctor: '::',
										_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode('update'),
										_1: {
											ctor: '::',
											_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_elm_lang$virtual_dom$VirtualDom_Overlay$goodNews2),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	};
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$explanationRisky = '\nThis history seems old. It will work with this program, but some\nmessages have been added since the history was created:\n';
var _elm_lang$virtual_dom$VirtualDom_Overlay$explanationBad = '\nThe messages in this history do not match the messages handled by your\nprogram. I noticed changes in the following types:\n';
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewReport = F2(
	function (isBad, report) {
		var _p8 = report;
		switch (_p8.ctor) {
			case 'CorruptHistory':
				return {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('Looks like this history file is corrupt. I cannot understand it.'),
					_1: {ctor: '[]'}
				};
			case 'VersionChanged':
				return {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'This history was created with Elm ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p8._0,
								A2(
									_elm_lang$core$Basics_ops['++'],
									', but you are using Elm ',
									A2(_elm_lang$core$Basics_ops['++'], _p8._1, ' right now.'))))),
					_1: {ctor: '[]'}
				};
			case 'MessageChanged':
				return {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(
						A2(_elm_lang$core$Basics_ops['++'], 'To import some other history, the overall message type must', ' be the same. The old history has ')),
					_1: {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode(_p8._0),
						_1: {
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' messages, but the new program works with '),
							_1: {
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode(_p8._1),
								_1: {
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' messages.'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				};
			default:
				return {
					ctor: '::',
					_0: A3(
						_elm_lang$virtual_dom$VirtualDom_Helpers$node,
						'p',
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(
								isBad ? _elm_lang$virtual_dom$VirtualDom_Overlay$explanationBad : _elm_lang$virtual_dom$VirtualDom_Overlay$explanationRisky),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A3(
							_elm_lang$virtual_dom$VirtualDom_Helpers$node,
							'ul',
							{ctor: '[]'},
							A2(_elm_lang$core$List$map, _elm_lang$virtual_dom$VirtualDom_Overlay$viewChange, _p8._0)),
						_1: {ctor: '[]'}
					}
				};
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewResume = function (config) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-resume'),
			_1: {
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(config.resume),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$virtual_dom$VirtualDom_Helpers$div,
				{
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-resume-words'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('Click to Resume'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$uploadDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}),
	A2(_elm_lang$core$Json_Decode$field, 'metadata', _elm_lang$virtual_dom$VirtualDom_Metadata$decoder),
	A2(_elm_lang$core$Json_Decode$field, 'history', _elm_lang$core$Json_Decode$value));
var _elm_lang$virtual_dom$VirtualDom_Overlay$close = F2(
	function (msg, state) {
		var _p9 = state;
		switch (_p9.ctor) {
			case 'None':
				return _elm_lang$core$Maybe$Nothing;
			case 'BadMetadata':
				return _elm_lang$core$Maybe$Nothing;
			case 'BadImport':
				return _elm_lang$core$Maybe$Nothing;
			default:
				var _p10 = msg;
				if (_p10.ctor === 'Cancel') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Maybe$Just(_p9._1);
				}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$isBlocking = function (state) {
	var _p11 = state;
	if (_p11.ctor === 'None') {
		return false;
	} else {
		return true;
	}
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$Config = F5(
	function (a, b, c, d, e) {
		return {resume: a, open: b, importHistory: c, exportHistory: d, wrap: e};
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$RiskyImport = F2(
	function (a, b) {
		return {ctor: 'RiskyImport', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$BadImport = function (a) {
	return {ctor: 'BadImport', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$corruptImport = _elm_lang$virtual_dom$VirtualDom_Overlay$BadImport(_elm_lang$virtual_dom$VirtualDom_Report$CorruptHistory);
var _elm_lang$virtual_dom$VirtualDom_Overlay$assessImport = F2(
	function (metadata, jsonString) {
		var _p12 = A2(_elm_lang$core$Json_Decode$decodeString, _elm_lang$virtual_dom$VirtualDom_Overlay$uploadDecoder, jsonString);
		if (_p12.ctor === 'Err') {
			return _elm_lang$core$Result$Err(_elm_lang$virtual_dom$VirtualDom_Overlay$corruptImport);
		} else {
			var _p14 = _p12._0._1;
			var report = A2(_elm_lang$virtual_dom$VirtualDom_Metadata$check, _p12._0._0, metadata);
			var _p13 = _elm_lang$virtual_dom$VirtualDom_Report$evaluate(report);
			switch (_p13.ctor) {
				case 'Impossible':
					return _elm_lang$core$Result$Err(
						_elm_lang$virtual_dom$VirtualDom_Overlay$BadImport(report));
				case 'Risky':
					return _elm_lang$core$Result$Err(
						A2(_elm_lang$virtual_dom$VirtualDom_Overlay$RiskyImport, report, _p14));
				default:
					return _elm_lang$core$Result$Ok(_p14);
			}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$BadMetadata = function (a) {
	return {ctor: 'BadMetadata', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$badMetadata = _elm_lang$virtual_dom$VirtualDom_Overlay$BadMetadata;
var _elm_lang$virtual_dom$VirtualDom_Overlay$None = {ctor: 'None'};
var _elm_lang$virtual_dom$VirtualDom_Overlay$none = _elm_lang$virtual_dom$VirtualDom_Overlay$None;
var _elm_lang$virtual_dom$VirtualDom_Overlay$Proceed = {ctor: 'Proceed'};
var _elm_lang$virtual_dom$VirtualDom_Overlay$Cancel = {ctor: 'Cancel'};
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewButtons = function (buttons) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-message-buttons'),
			_1: {ctor: '[]'}
		},
		function () {
			var _p15 = buttons;
			if (_p15.ctor === 'Accept') {
				return {
					ctor: '::',
					_0: A3(
						_elm_lang$virtual_dom$VirtualDom_Helpers$node,
						'button',
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Overlay$Proceed),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p15._0),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: A3(
						_elm_lang$virtual_dom$VirtualDom_Helpers$node,
						'button',
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Overlay$Cancel),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p15._0),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A3(
							_elm_lang$virtual_dom$VirtualDom_Helpers$node,
							'button',
							{
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Overlay$Proceed),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p15._1),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				};
			}
		}());
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$Message = {ctor: 'Message'};
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewMessage = F4(
	function (config, title, details, buttons) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$virtual_dom$VirtualDom_Overlay$Message,
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-message'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$virtual_dom$VirtualDom_Helpers$div,
							{
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-message-title'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(title),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$div,
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-message-details'),
									_1: {ctor: '[]'}
								},
								details),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$map,
									config.wrap,
									_elm_lang$virtual_dom$VirtualDom_Overlay$viewButtons(buttons)),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		};
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$Pause = {ctor: 'Pause'};
var _elm_lang$virtual_dom$VirtualDom_Overlay$Normal = {ctor: 'Normal'};
var _elm_lang$virtual_dom$VirtualDom_Overlay$Choose = F2(
	function (a, b) {
		return {ctor: 'Choose', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$Accept = function (a) {
	return {ctor: 'Accept', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewHelp = F5(
	function (config, isPaused, isOpen, numMsgs, state) {
		var _p16 = state;
		switch (_p16.ctor) {
			case 'None':
				var miniControls = isOpen ? {ctor: '[]'} : {
					ctor: '::',
					_0: A2(_elm_lang$virtual_dom$VirtualDom_Overlay$viewMiniControls, config, numMsgs),
					_1: {ctor: '[]'}
				};
				return {
					ctor: '_Tuple2',
					_0: isPaused ? _elm_lang$virtual_dom$VirtualDom_Overlay$Pause : _elm_lang$virtual_dom$VirtualDom_Overlay$Normal,
					_1: (isPaused && (!isOpen)) ? {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewResume(config),
						_1: miniControls
					} : miniControls
				};
			case 'BadMetadata':
				return A4(
					_elm_lang$virtual_dom$VirtualDom_Overlay$viewMessage,
					config,
					'Cannot use Import or Export',
					_elm_lang$virtual_dom$VirtualDom_Overlay$viewBadMetadata(_p16._0),
					_elm_lang$virtual_dom$VirtualDom_Overlay$Accept('Ok'));
			case 'BadImport':
				return A4(
					_elm_lang$virtual_dom$VirtualDom_Overlay$viewMessage,
					config,
					'Cannot Import History',
					A2(_elm_lang$virtual_dom$VirtualDom_Overlay$viewReport, true, _p16._0),
					_elm_lang$virtual_dom$VirtualDom_Overlay$Accept('Ok'));
			default:
				return A4(
					_elm_lang$virtual_dom$VirtualDom_Overlay$viewMessage,
					config,
					'Warning',
					A2(_elm_lang$virtual_dom$VirtualDom_Overlay$viewReport, false, _p16._0),
					A2(_elm_lang$virtual_dom$VirtualDom_Overlay$Choose, 'Cancel', 'Import Anyway'));
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$view = F5(
	function (config, isPaused, isOpen, numMsgs, state) {
		var _p17 = A5(_elm_lang$virtual_dom$VirtualDom_Overlay$viewHelp, config, isPaused, isOpen, numMsgs, state);
		var block = _p17._0;
		var nodes = _p17._1;
		return {
			ctor: '_Tuple2',
			_0: block,
			_1: A2(
				_elm_lang$virtual_dom$VirtualDom_Helpers$div,
				{
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay'),
					_1: {ctor: '[]'}
				},
				{ctor: '::', _0: _elm_lang$virtual_dom$VirtualDom_Overlay$styles, _1: nodes})
		};
	});

var _elm_lang$virtual_dom$VirtualDom_Debug$styles = A3(
	_elm_lang$virtual_dom$VirtualDom_Helpers$node,
	'style',
	{ctor: '[]'},
	{
		ctor: '::',
		_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('\n\nhtml {\n    overflow: hidden;\n    height: 100%;\n}\n\nbody {\n    height: 100%;\n    overflow: auto;\n}\n\n#debugger {\n  width: 100%\n  height: 100%;\n  font-family: monospace;\n}\n\n#values {\n  display: block;\n  float: left;\n  height: 100%;\n  width: calc(100% - 30ch);\n  margin: 0;\n  overflow: auto;\n  cursor: default;\n}\n\n.debugger-sidebar {\n  display: block;\n  float: left;\n  width: 30ch;\n  height: 100%;\n  color: white;\n  background-color: rgb(61, 61, 61);\n}\n\n.debugger-sidebar-controls {\n  width: 100%;\n  text-align: center;\n  background-color: rgb(50, 50, 50);\n}\n\n.debugger-sidebar-controls-import-export {\n  width: 100%;\n  height: 24px;\n  line-height: 24px;\n  font-size: 12px;\n}\n\n.debugger-sidebar-controls-resume {\n  width: 100%;\n  height: 30px;\n  line-height: 30px;\n  cursor: pointer;\n}\n\n.debugger-sidebar-controls-resume:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n.debugger-sidebar-messages {\n  width: 100%;\n  overflow-y: auto;\n  height: calc(100% - 24px);\n}\n\n.debugger-sidebar-messages-paused {\n  width: 100%;\n  overflow-y: auto;\n  height: calc(100% - 54px);\n}\n\n.messages-entry {\n  cursor: pointer;\n  width: 100%;\n}\n\n.messages-entry:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n.messages-entry-selected, .messages-entry-selected:hover {\n  background-color: rgb(10, 10, 10);\n}\n\n.messages-entry-content {\n  width: calc(100% - 7ch);\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 1ch;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inline-block;\n}\n\n.messages-entry-index {\n  color: #666;\n  width: 5ch;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-right: 1ch;\n  text-align: right;\n  display: block;\n  float: right;\n}\n\n'),
		_1: {ctor: '[]'}
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$button = F2(
	function (msg, label) {
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$span,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(msg),
				_1: {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'cursor', _1: 'pointer'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(label),
				_1: {ctor: '[]'}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$getLatestModel = function (state) {
	var _p0 = state;
	if (_p0.ctor === 'Running') {
		return _p0._0;
	} else {
		return _p0._2;
	}
};
var _elm_lang$virtual_dom$VirtualDom_Debug$withGoodMetadata = F2(
	function (model, func) {
		var _p1 = model.metadata;
		if (_p1.ctor === 'Ok') {
			return func(_p1._0);
		} else {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{
						overlay: _elm_lang$virtual_dom$VirtualDom_Overlay$badMetadata(_p1._0)
					}),
				{ctor: '[]'});
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$Model = F6(
	function (a, b, c, d, e, f) {
		return {history: a, state: b, expando: c, metadata: d, overlay: e, isDebuggerOpen: f};
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$Paused = F3(
	function (a, b, c) {
		return {ctor: 'Paused', _0: a, _1: b, _2: c};
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$Running = function (a) {
	return {ctor: 'Running', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Debug$loadNewHistory = F3(
	function (rawHistory, userUpdate, model) {
		var pureUserUpdate = F2(
			function (msg, userModel) {
				return _elm_lang$core$Tuple$first(
					A2(userUpdate, msg, userModel));
			});
		var initialUserModel = _elm_lang$virtual_dom$VirtualDom_History$initialModel(model.history);
		var decoder = A2(_elm_lang$virtual_dom$VirtualDom_History$decoder, initialUserModel, pureUserUpdate);
		var _p2 = A2(_elm_lang$core$Json_Decode$decodeValue, decoder, rawHistory);
		if (_p2.ctor === 'Err') {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{overlay: _elm_lang$virtual_dom$VirtualDom_Overlay$corruptImport}),
				{ctor: '[]'});
		} else {
			var _p3 = _p2._0._0;
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{
						history: _p2._0._1,
						state: _elm_lang$virtual_dom$VirtualDom_Debug$Running(_p3),
						expando: _elm_lang$virtual_dom$VirtualDom_Expando$init(_p3),
						overlay: _elm_lang$virtual_dom$VirtualDom_Overlay$none
					}),
				{ctor: '[]'});
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$OverlayMsg = function (a) {
	return {ctor: 'OverlayMsg', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Debug$Upload = function (a) {
	return {ctor: 'Upload', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Debug$upload = A2(_elm_lang$core$Task$perform, _elm_lang$virtual_dom$VirtualDom_Debug$Upload, _elm_lang$virtual_dom$Native_Debug.upload);
var _elm_lang$virtual_dom$VirtualDom_Debug$Export = {ctor: 'Export'};
var _elm_lang$virtual_dom$VirtualDom_Debug$Import = {ctor: 'Import'};
var _elm_lang$virtual_dom$VirtualDom_Debug$Down = {ctor: 'Down'};
var _elm_lang$virtual_dom$VirtualDom_Debug$Up = {ctor: 'Up'};
var _elm_lang$virtual_dom$VirtualDom_Debug$Close = {ctor: 'Close'};
var _elm_lang$virtual_dom$VirtualDom_Debug$Open = {ctor: 'Open'};
var _elm_lang$virtual_dom$VirtualDom_Debug$Jump = function (a) {
	return {ctor: 'Jump', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Debug$Resume = {ctor: 'Resume'};
var _elm_lang$virtual_dom$VirtualDom_Debug$overlayConfig = {resume: _elm_lang$virtual_dom$VirtualDom_Debug$Resume, open: _elm_lang$virtual_dom$VirtualDom_Debug$Open, importHistory: _elm_lang$virtual_dom$VirtualDom_Debug$Import, exportHistory: _elm_lang$virtual_dom$VirtualDom_Debug$Export, wrap: _elm_lang$virtual_dom$VirtualDom_Debug$OverlayMsg};
var _elm_lang$virtual_dom$VirtualDom_Debug$viewIn = function (_p4) {
	var _p5 = _p4;
	var isPaused = function () {
		var _p6 = _p5.state;
		if (_p6.ctor === 'Running') {
			return false;
		} else {
			return true;
		}
	}();
	return A5(
		_elm_lang$virtual_dom$VirtualDom_Overlay$view,
		_elm_lang$virtual_dom$VirtualDom_Debug$overlayConfig,
		isPaused,
		_p5.isDebuggerOpen,
		_elm_lang$virtual_dom$VirtualDom_History$size(_p5.history),
		_p5.overlay);
};
var _elm_lang$virtual_dom$VirtualDom_Debug$resumeButton = A2(
	_elm_lang$virtual_dom$VirtualDom_Helpers$div,
	{
		ctor: '::',
		_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Debug$Resume),
		_1: {
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('debugger-sidebar-controls-resume'),
			_1: {ctor: '[]'}
		}
	},
	{
		ctor: '::',
		_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('Resume'),
		_1: {ctor: '[]'}
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$viewResumeButton = function (maybeIndex) {
	var _p7 = maybeIndex;
	if (_p7.ctor === 'Nothing') {
		return _elm_lang$virtual_dom$VirtualDom_Helpers$text('');
	} else {
		return _elm_lang$virtual_dom$VirtualDom_Debug$resumeButton;
	}
};
var _elm_lang$virtual_dom$VirtualDom_Debug$playButton = function (maybeIndex) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('debugger-sidebar-controls'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Debug$viewResumeButton(maybeIndex),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('debugger-sidebar-controls-import-export'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(_elm_lang$virtual_dom$VirtualDom_Debug$button, _elm_lang$virtual_dom$VirtualDom_Debug$Import, 'Import'),
						_1: {
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' / '),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$virtual_dom$VirtualDom_Debug$button, _elm_lang$virtual_dom$VirtualDom_Debug$Export, 'Export'),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Debug$viewSidebar = F2(
	function (state, history) {
		var maybeIndex = function () {
			var _p8 = state;
			if (_p8.ctor === 'Running') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(_p8._0);
			}
		}();
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('debugger-sidebar'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$map,
					_elm_lang$virtual_dom$VirtualDom_Debug$Jump,
					A2(_elm_lang$virtual_dom$VirtualDom_History$view, maybeIndex, history)),
				_1: {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Debug$playButton(maybeIndex),
					_1: {ctor: '[]'}
				}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$ExpandoMsg = function (a) {
	return {ctor: 'ExpandoMsg', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Debug$viewOut = function (_p9) {
	var _p10 = _p9;
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$id('debugger'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Debug$styles,
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$virtual_dom$VirtualDom_Debug$viewSidebar, _p10.state, _p10.history),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$map,
						_elm_lang$virtual_dom$VirtualDom_Debug$ExpandoMsg,
						A2(
							_elm_lang$virtual_dom$VirtualDom_Helpers$div,
							{
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Helpers$id('values'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(_elm_lang$virtual_dom$VirtualDom_Expando$view, _elm_lang$core$Maybe$Nothing, _p10.expando),
								_1: {ctor: '[]'}
							})),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Debug$UserMsg = function (a) {
	return {ctor: 'UserMsg', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapInit = F2(
	function (metadata, _p11) {
		var _p12 = _p11;
		var _p13 = _p12._0;
		return A2(
			_elm_lang$core$Platform_Cmd_ops['!'],
			{
				history: _elm_lang$virtual_dom$VirtualDom_History$empty(_p13),
				state: _elm_lang$virtual_dom$VirtualDom_Debug$Running(_p13),
				expando: _elm_lang$virtual_dom$VirtualDom_Expando$init(_p13),
				metadata: _elm_lang$virtual_dom$VirtualDom_Metadata$decode(metadata),
				overlay: _elm_lang$virtual_dom$VirtualDom_Overlay$none,
				isDebuggerOpen: false
			},
			{
				ctor: '::',
				_0: A2(_elm_lang$core$Platform_Cmd$map, _elm_lang$virtual_dom$VirtualDom_Debug$UserMsg, _p12._1),
				_1: {ctor: '[]'}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapSubs = F2(
	function (userSubscriptions, _p14) {
		var _p15 = _p14;
		return A2(
			_elm_lang$core$Platform_Sub$map,
			_elm_lang$virtual_dom$VirtualDom_Debug$UserMsg,
			userSubscriptions(
				_elm_lang$virtual_dom$VirtualDom_Debug$getLatestModel(_p15.state)));
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapView = F2(
	function (userView, _p16) {
		var _p17 = _p16;
		var currentModel = function () {
			var _p18 = _p17.state;
			if (_p18.ctor === 'Running') {
				return _p18._0;
			} else {
				return _p18._1;
			}
		}();
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$map,
			_elm_lang$virtual_dom$VirtualDom_Debug$UserMsg,
			userView(currentModel));
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$NoOp = {ctor: 'NoOp'};
var _elm_lang$virtual_dom$VirtualDom_Debug$download = F2(
	function (metadata, history) {
		var json = _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'metadata',
					_1: _elm_lang$virtual_dom$VirtualDom_Metadata$encode(metadata)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'history',
						_1: _elm_lang$virtual_dom$VirtualDom_History$encode(history)
					},
					_1: {ctor: '[]'}
				}
			});
		var historyLength = _elm_lang$virtual_dom$VirtualDom_History$size(history);
		return A2(
			_elm_lang$core$Task$perform,
			function (_p19) {
				return _elm_lang$virtual_dom$VirtualDom_Debug$NoOp;
			},
			A2(_elm_lang$virtual_dom$Native_Debug.download, historyLength, json));
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$runIf = F2(
	function (bool, task) {
		return bool ? A2(
			_elm_lang$core$Task$perform,
			_elm_lang$core$Basics$always(_elm_lang$virtual_dom$VirtualDom_Debug$NoOp),
			task) : _elm_lang$core$Platform_Cmd$none;
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$updateUserMsg = F4(
	function (userUpdate, scrollTask, userMsg, _p20) {
		var _p21 = _p20;
		var _p25 = _p21.state;
		var _p24 = _p21;
		var userModel = _elm_lang$virtual_dom$VirtualDom_Debug$getLatestModel(_p25);
		var newHistory = A3(_elm_lang$virtual_dom$VirtualDom_History$add, userMsg, userModel, _p21.history);
		var _p22 = A2(userUpdate, userMsg, userModel);
		var newUserModel = _p22._0;
		var userCmds = _p22._1;
		var commands = A2(_elm_lang$core$Platform_Cmd$map, _elm_lang$virtual_dom$VirtualDom_Debug$UserMsg, userCmds);
		var _p23 = _p25;
		if (_p23.ctor === 'Running') {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					_p24,
					{
						history: newHistory,
						state: _elm_lang$virtual_dom$VirtualDom_Debug$Running(newUserModel),
						expando: A2(_elm_lang$virtual_dom$VirtualDom_Expando$merge, newUserModel, _p21.expando)
					}),
				{
					ctor: '::',
					_0: commands,
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$virtual_dom$VirtualDom_Debug$runIf, _p24.isDebuggerOpen, scrollTask),
						_1: {ctor: '[]'}
					}
				});
		} else {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					_p24,
					{
						history: newHistory,
						state: A3(_elm_lang$virtual_dom$VirtualDom_Debug$Paused, _p23._0, _p23._1, newUserModel)
					}),
				{
					ctor: '::',
					_0: commands,
					_1: {ctor: '[]'}
				});
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapUpdate = F4(
	function (userUpdate, scrollTask, msg, model) {
		wrapUpdate:
		while (true) {
			var _p26 = msg;
			switch (_p26.ctor) {
				case 'NoOp':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				case 'UserMsg':
					return A4(_elm_lang$virtual_dom$VirtualDom_Debug$updateUserMsg, userUpdate, scrollTask, _p26._0, model);
				case 'ExpandoMsg':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								expando: A2(_elm_lang$virtual_dom$VirtualDom_Expando$update, _p26._0, model.expando)
							}),
						{ctor: '[]'});
				case 'Resume':
					var _p27 = model.state;
					if (_p27.ctor === 'Running') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					} else {
						var _p28 = _p27._2;
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									state: _elm_lang$virtual_dom$VirtualDom_Debug$Running(_p28),
									expando: A2(_elm_lang$virtual_dom$VirtualDom_Expando$merge, _p28, model.expando)
								}),
							{
								ctor: '::',
								_0: A2(_elm_lang$virtual_dom$VirtualDom_Debug$runIf, model.isDebuggerOpen, scrollTask),
								_1: {ctor: '[]'}
							});
					}
				case 'Jump':
					var _p30 = _p26._0;
					var _p29 = A3(_elm_lang$virtual_dom$VirtualDom_History$get, userUpdate, _p30, model.history);
					var indexModel = _p29._0;
					var indexMsg = _p29._1;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: A3(
									_elm_lang$virtual_dom$VirtualDom_Debug$Paused,
									_p30,
									indexModel,
									_elm_lang$virtual_dom$VirtualDom_Debug$getLatestModel(model.state)),
								expando: A2(_elm_lang$virtual_dom$VirtualDom_Expando$merge, indexModel, model.expando)
							}),
						{ctor: '[]'});
				case 'Open':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{isDebuggerOpen: true}),
						{ctor: '[]'});
				case 'Close':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{isDebuggerOpen: false}),
						{ctor: '[]'});
				case 'Up':
					var index = function () {
						var _p31 = model.state;
						if (_p31.ctor === 'Paused') {
							return _p31._0;
						} else {
							return _elm_lang$virtual_dom$VirtualDom_History$size(model.history);
						}
					}();
					if (_elm_lang$core$Native_Utils.cmp(index, 0) > 0) {
						var _v17 = userUpdate,
							_v18 = scrollTask,
							_v19 = _elm_lang$virtual_dom$VirtualDom_Debug$Jump(index - 1),
							_v20 = model;
						userUpdate = _v17;
						scrollTask = _v18;
						msg = _v19;
						model = _v20;
						continue wrapUpdate;
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					}
				case 'Down':
					var _p32 = model.state;
					if (_p32.ctor === 'Running') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					} else {
						var _p33 = _p32._0;
						if (_elm_lang$core$Native_Utils.eq(
							_p33,
							_elm_lang$virtual_dom$VirtualDom_History$size(model.history) - 1)) {
							var _v22 = userUpdate,
								_v23 = scrollTask,
								_v24 = _elm_lang$virtual_dom$VirtualDom_Debug$Resume,
								_v25 = model;
							userUpdate = _v22;
							scrollTask = _v23;
							msg = _v24;
							model = _v25;
							continue wrapUpdate;
						} else {
							var _v26 = userUpdate,
								_v27 = scrollTask,
								_v28 = _elm_lang$virtual_dom$VirtualDom_Debug$Jump(_p33 + 1),
								_v29 = model;
							userUpdate = _v26;
							scrollTask = _v27;
							msg = _v28;
							model = _v29;
							continue wrapUpdate;
						}
					}
				case 'Import':
					return A2(
						_elm_lang$virtual_dom$VirtualDom_Debug$withGoodMetadata,
						model,
						function (_p34) {
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Debug$upload,
									_1: {ctor: '[]'}
								});
						});
				case 'Export':
					return A2(
						_elm_lang$virtual_dom$VirtualDom_Debug$withGoodMetadata,
						model,
						function (metadata) {
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{
									ctor: '::',
									_0: A2(_elm_lang$virtual_dom$VirtualDom_Debug$download, metadata, model.history),
									_1: {ctor: '[]'}
								});
						});
				case 'Upload':
					return A2(
						_elm_lang$virtual_dom$VirtualDom_Debug$withGoodMetadata,
						model,
						function (metadata) {
							var _p35 = A2(_elm_lang$virtual_dom$VirtualDom_Overlay$assessImport, metadata, _p26._0);
							if (_p35.ctor === 'Err') {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									_elm_lang$core$Native_Utils.update(
										model,
										{overlay: _p35._0}),
									{ctor: '[]'});
							} else {
								return A3(_elm_lang$virtual_dom$VirtualDom_Debug$loadNewHistory, _p35._0, userUpdate, model);
							}
						});
				default:
					var _p36 = A2(_elm_lang$virtual_dom$VirtualDom_Overlay$close, _p26._0, model.overlay);
					if (_p36.ctor === 'Nothing') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{overlay: _elm_lang$virtual_dom$VirtualDom_Overlay$none}),
							{ctor: '[]'});
					} else {
						return A3(_elm_lang$virtual_dom$VirtualDom_Debug$loadNewHistory, _p36._0, userUpdate, model);
					}
			}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$wrap = F2(
	function (metadata, _p37) {
		var _p38 = _p37;
		return {
			init: A2(_elm_lang$virtual_dom$VirtualDom_Debug$wrapInit, metadata, _p38.init),
			view: _elm_lang$virtual_dom$VirtualDom_Debug$wrapView(_p38.view),
			update: _elm_lang$virtual_dom$VirtualDom_Debug$wrapUpdate(_p38.update),
			viewIn: _elm_lang$virtual_dom$VirtualDom_Debug$viewIn,
			viewOut: _elm_lang$virtual_dom$VirtualDom_Debug$viewOut,
			subscriptions: _elm_lang$virtual_dom$VirtualDom_Debug$wrapSubs(_p38.subscriptions)
		};
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags = F2(
	function (metadata, _p39) {
		var _p40 = _p39;
		return {
			init: function (flags) {
				return A2(
					_elm_lang$virtual_dom$VirtualDom_Debug$wrapInit,
					metadata,
					_p40.init(flags));
			},
			view: _elm_lang$virtual_dom$VirtualDom_Debug$wrapView(_p40.view),
			update: _elm_lang$virtual_dom$VirtualDom_Debug$wrapUpdate(_p40.update),
			viewIn: _elm_lang$virtual_dom$VirtualDom_Debug$viewIn,
			viewOut: _elm_lang$virtual_dom$VirtualDom_Debug$viewOut,
			subscriptions: _elm_lang$virtual_dom$VirtualDom_Debug$wrapSubs(_p40.subscriptions)
		};
	});

var _elm_lang$virtual_dom$VirtualDom$programWithFlags = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.programWithFlags, _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags, impl);
};
var _elm_lang$virtual_dom$VirtualDom$program = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, impl);
};
var _elm_lang$virtual_dom$VirtualDom$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;
var _elm_lang$virtual_dom$VirtualDom$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom$mapProperty = _elm_lang$virtual_dom$Native_VirtualDom.mapProperty;
var _elm_lang$virtual_dom$VirtualDom$attributeNS = _elm_lang$virtual_dom$Native_VirtualDom.attributeNS;
var _elm_lang$virtual_dom$VirtualDom$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom$Property = {ctor: 'Property'};

var _elm_lang$html$Html$programWithFlags = _elm_lang$virtual_dom$VirtualDom$programWithFlags;
var _elm_lang$html$Html$program = _elm_lang$virtual_dom$VirtualDom$program;
var _elm_lang$html$Html$beginnerProgram = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$html$Html$program(
		{
			init: A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_p1.model,
				{ctor: '[]'}),
			update: F2(
				function (msg, model) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_p1.update, msg, model),
						{ctor: '[]'});
				}),
			view: _p1.view,
			subscriptions: function (_p2) {
				return _elm_lang$core$Platform_Sub$none;
			}
		});
};
var _elm_lang$html$Html$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$html$Html$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$html$Html$node = _elm_lang$virtual_dom$VirtualDom$node;
var _elm_lang$html$Html$body = _elm_lang$html$Html$node('body');
var _elm_lang$html$Html$section = _elm_lang$html$Html$node('section');
var _elm_lang$html$Html$nav = _elm_lang$html$Html$node('nav');
var _elm_lang$html$Html$article = _elm_lang$html$Html$node('article');
var _elm_lang$html$Html$aside = _elm_lang$html$Html$node('aside');
var _elm_lang$html$Html$h1 = _elm_lang$html$Html$node('h1');
var _elm_lang$html$Html$h2 = _elm_lang$html$Html$node('h2');
var _elm_lang$html$Html$h3 = _elm_lang$html$Html$node('h3');
var _elm_lang$html$Html$h4 = _elm_lang$html$Html$node('h4');
var _elm_lang$html$Html$h5 = _elm_lang$html$Html$node('h5');
var _elm_lang$html$Html$h6 = _elm_lang$html$Html$node('h6');
var _elm_lang$html$Html$header = _elm_lang$html$Html$node('header');
var _elm_lang$html$Html$footer = _elm_lang$html$Html$node('footer');
var _elm_lang$html$Html$address = _elm_lang$html$Html$node('address');
var _elm_lang$html$Html$main_ = _elm_lang$html$Html$node('main');
var _elm_lang$html$Html$p = _elm_lang$html$Html$node('p');
var _elm_lang$html$Html$hr = _elm_lang$html$Html$node('hr');
var _elm_lang$html$Html$pre = _elm_lang$html$Html$node('pre');
var _elm_lang$html$Html$blockquote = _elm_lang$html$Html$node('blockquote');
var _elm_lang$html$Html$ol = _elm_lang$html$Html$node('ol');
var _elm_lang$html$Html$ul = _elm_lang$html$Html$node('ul');
var _elm_lang$html$Html$li = _elm_lang$html$Html$node('li');
var _elm_lang$html$Html$dl = _elm_lang$html$Html$node('dl');
var _elm_lang$html$Html$dt = _elm_lang$html$Html$node('dt');
var _elm_lang$html$Html$dd = _elm_lang$html$Html$node('dd');
var _elm_lang$html$Html$figure = _elm_lang$html$Html$node('figure');
var _elm_lang$html$Html$figcaption = _elm_lang$html$Html$node('figcaption');
var _elm_lang$html$Html$div = _elm_lang$html$Html$node('div');
var _elm_lang$html$Html$a = _elm_lang$html$Html$node('a');
var _elm_lang$html$Html$em = _elm_lang$html$Html$node('em');
var _elm_lang$html$Html$strong = _elm_lang$html$Html$node('strong');
var _elm_lang$html$Html$small = _elm_lang$html$Html$node('small');
var _elm_lang$html$Html$s = _elm_lang$html$Html$node('s');
var _elm_lang$html$Html$cite = _elm_lang$html$Html$node('cite');
var _elm_lang$html$Html$q = _elm_lang$html$Html$node('q');
var _elm_lang$html$Html$dfn = _elm_lang$html$Html$node('dfn');
var _elm_lang$html$Html$abbr = _elm_lang$html$Html$node('abbr');
var _elm_lang$html$Html$time = _elm_lang$html$Html$node('time');
var _elm_lang$html$Html$code = _elm_lang$html$Html$node('code');
var _elm_lang$html$Html$var = _elm_lang$html$Html$node('var');
var _elm_lang$html$Html$samp = _elm_lang$html$Html$node('samp');
var _elm_lang$html$Html$kbd = _elm_lang$html$Html$node('kbd');
var _elm_lang$html$Html$sub = _elm_lang$html$Html$node('sub');
var _elm_lang$html$Html$sup = _elm_lang$html$Html$node('sup');
var _elm_lang$html$Html$i = _elm_lang$html$Html$node('i');
var _elm_lang$html$Html$b = _elm_lang$html$Html$node('b');
var _elm_lang$html$Html$u = _elm_lang$html$Html$node('u');
var _elm_lang$html$Html$mark = _elm_lang$html$Html$node('mark');
var _elm_lang$html$Html$ruby = _elm_lang$html$Html$node('ruby');
var _elm_lang$html$Html$rt = _elm_lang$html$Html$node('rt');
var _elm_lang$html$Html$rp = _elm_lang$html$Html$node('rp');
var _elm_lang$html$Html$bdi = _elm_lang$html$Html$node('bdi');
var _elm_lang$html$Html$bdo = _elm_lang$html$Html$node('bdo');
var _elm_lang$html$Html$span = _elm_lang$html$Html$node('span');
var _elm_lang$html$Html$br = _elm_lang$html$Html$node('br');
var _elm_lang$html$Html$wbr = _elm_lang$html$Html$node('wbr');
var _elm_lang$html$Html$ins = _elm_lang$html$Html$node('ins');
var _elm_lang$html$Html$del = _elm_lang$html$Html$node('del');
var _elm_lang$html$Html$img = _elm_lang$html$Html$node('img');
var _elm_lang$html$Html$iframe = _elm_lang$html$Html$node('iframe');
var _elm_lang$html$Html$embed = _elm_lang$html$Html$node('embed');
var _elm_lang$html$Html$object = _elm_lang$html$Html$node('object');
var _elm_lang$html$Html$param = _elm_lang$html$Html$node('param');
var _elm_lang$html$Html$video = _elm_lang$html$Html$node('video');
var _elm_lang$html$Html$audio = _elm_lang$html$Html$node('audio');
var _elm_lang$html$Html$source = _elm_lang$html$Html$node('source');
var _elm_lang$html$Html$track = _elm_lang$html$Html$node('track');
var _elm_lang$html$Html$canvas = _elm_lang$html$Html$node('canvas');
var _elm_lang$html$Html$math = _elm_lang$html$Html$node('math');
var _elm_lang$html$Html$table = _elm_lang$html$Html$node('table');
var _elm_lang$html$Html$caption = _elm_lang$html$Html$node('caption');
var _elm_lang$html$Html$colgroup = _elm_lang$html$Html$node('colgroup');
var _elm_lang$html$Html$col = _elm_lang$html$Html$node('col');
var _elm_lang$html$Html$tbody = _elm_lang$html$Html$node('tbody');
var _elm_lang$html$Html$thead = _elm_lang$html$Html$node('thead');
var _elm_lang$html$Html$tfoot = _elm_lang$html$Html$node('tfoot');
var _elm_lang$html$Html$tr = _elm_lang$html$Html$node('tr');
var _elm_lang$html$Html$td = _elm_lang$html$Html$node('td');
var _elm_lang$html$Html$th = _elm_lang$html$Html$node('th');
var _elm_lang$html$Html$form = _elm_lang$html$Html$node('form');
var _elm_lang$html$Html$fieldset = _elm_lang$html$Html$node('fieldset');
var _elm_lang$html$Html$legend = _elm_lang$html$Html$node('legend');
var _elm_lang$html$Html$label = _elm_lang$html$Html$node('label');
var _elm_lang$html$Html$input = _elm_lang$html$Html$node('input');
var _elm_lang$html$Html$button = _elm_lang$html$Html$node('button');
var _elm_lang$html$Html$select = _elm_lang$html$Html$node('select');
var _elm_lang$html$Html$datalist = _elm_lang$html$Html$node('datalist');
var _elm_lang$html$Html$optgroup = _elm_lang$html$Html$node('optgroup');
var _elm_lang$html$Html$option = _elm_lang$html$Html$node('option');
var _elm_lang$html$Html$textarea = _elm_lang$html$Html$node('textarea');
var _elm_lang$html$Html$keygen = _elm_lang$html$Html$node('keygen');
var _elm_lang$html$Html$output = _elm_lang$html$Html$node('output');
var _elm_lang$html$Html$progress = _elm_lang$html$Html$node('progress');
var _elm_lang$html$Html$meter = _elm_lang$html$Html$node('meter');
var _elm_lang$html$Html$details = _elm_lang$html$Html$node('details');
var _elm_lang$html$Html$summary = _elm_lang$html$Html$node('summary');
var _elm_lang$html$Html$menuitem = _elm_lang$html$Html$node('menuitem');
var _elm_lang$html$Html$menu = _elm_lang$html$Html$node('menu');

var _elm_lang$html$Html_Attributes$map = _elm_lang$virtual_dom$VirtualDom$mapProperty;
var _elm_lang$html$Html_Attributes$attribute = _elm_lang$virtual_dom$VirtualDom$attribute;
var _elm_lang$html$Html_Attributes$contextmenu = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'contextmenu', value);
};
var _elm_lang$html$Html_Attributes$draggable = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'draggable', value);
};
var _elm_lang$html$Html_Attributes$itemprop = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'itemprop', value);
};
var _elm_lang$html$Html_Attributes$tabindex = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'tabIndex',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$charset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'charset', value);
};
var _elm_lang$html$Html_Attributes$height = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'height',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$width = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'width',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$formaction = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'formAction', value);
};
var _elm_lang$html$Html_Attributes$list = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'list', value);
};
var _elm_lang$html$Html_Attributes$minlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'minLength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$maxlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'maxlength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$size = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'size',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$form = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'form', value);
};
var _elm_lang$html$Html_Attributes$cols = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'cols',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rows = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rows',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$challenge = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'challenge', value);
};
var _elm_lang$html$Html_Attributes$media = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'media', value);
};
var _elm_lang$html$Html_Attributes$rel = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'rel', value);
};
var _elm_lang$html$Html_Attributes$datetime = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'datetime', value);
};
var _elm_lang$html$Html_Attributes$pubdate = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'pubdate', value);
};
var _elm_lang$html$Html_Attributes$colspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'colspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rowspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rowspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$manifest = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'manifest', value);
};
var _elm_lang$html$Html_Attributes$property = _elm_lang$virtual_dom$VirtualDom$property;
var _elm_lang$html$Html_Attributes$stringProperty = F2(
	function (name, string) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _elm_lang$html$Html_Attributes$class = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'className', name);
};
var _elm_lang$html$Html_Attributes$id = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'id', name);
};
var _elm_lang$html$Html_Attributes$title = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'title', name);
};
var _elm_lang$html$Html_Attributes$accesskey = function ($char) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'accessKey',
		_elm_lang$core$String$fromChar($char));
};
var _elm_lang$html$Html_Attributes$dir = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dir', value);
};
var _elm_lang$html$Html_Attributes$dropzone = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dropzone', value);
};
var _elm_lang$html$Html_Attributes$lang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'lang', value);
};
var _elm_lang$html$Html_Attributes$content = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'content', value);
};
var _elm_lang$html$Html_Attributes$httpEquiv = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'httpEquiv', value);
};
var _elm_lang$html$Html_Attributes$language = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'language', value);
};
var _elm_lang$html$Html_Attributes$src = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'src', value);
};
var _elm_lang$html$Html_Attributes$alt = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'alt', value);
};
var _elm_lang$html$Html_Attributes$preload = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'preload', value);
};
var _elm_lang$html$Html_Attributes$poster = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'poster', value);
};
var _elm_lang$html$Html_Attributes$kind = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'kind', value);
};
var _elm_lang$html$Html_Attributes$srclang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srclang', value);
};
var _elm_lang$html$Html_Attributes$sandbox = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'sandbox', value);
};
var _elm_lang$html$Html_Attributes$srcdoc = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srcdoc', value);
};
var _elm_lang$html$Html_Attributes$type_ = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'type', value);
};
var _elm_lang$html$Html_Attributes$value = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'value', value);
};
var _elm_lang$html$Html_Attributes$defaultValue = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'defaultValue', value);
};
var _elm_lang$html$Html_Attributes$placeholder = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'placeholder', value);
};
var _elm_lang$html$Html_Attributes$accept = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'accept', value);
};
var _elm_lang$html$Html_Attributes$acceptCharset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'acceptCharset', value);
};
var _elm_lang$html$Html_Attributes$action = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'action', value);
};
var _elm_lang$html$Html_Attributes$autocomplete = function (bool) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'autocomplete',
		bool ? 'on' : 'off');
};
var _elm_lang$html$Html_Attributes$enctype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'enctype', value);
};
var _elm_lang$html$Html_Attributes$method = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'method', value);
};
var _elm_lang$html$Html_Attributes$name = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'name', value);
};
var _elm_lang$html$Html_Attributes$pattern = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'pattern', value);
};
var _elm_lang$html$Html_Attributes$for = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'htmlFor', value);
};
var _elm_lang$html$Html_Attributes$max = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'max', value);
};
var _elm_lang$html$Html_Attributes$min = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'min', value);
};
var _elm_lang$html$Html_Attributes$step = function (n) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'step', n);
};
var _elm_lang$html$Html_Attributes$wrap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'wrap', value);
};
var _elm_lang$html$Html_Attributes$usemap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'useMap', value);
};
var _elm_lang$html$Html_Attributes$shape = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'shape', value);
};
var _elm_lang$html$Html_Attributes$coords = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'coords', value);
};
var _elm_lang$html$Html_Attributes$keytype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'keytype', value);
};
var _elm_lang$html$Html_Attributes$align = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'align', value);
};
var _elm_lang$html$Html_Attributes$cite = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'cite', value);
};
var _elm_lang$html$Html_Attributes$href = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'href', value);
};
var _elm_lang$html$Html_Attributes$target = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'target', value);
};
var _elm_lang$html$Html_Attributes$downloadAs = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'download', value);
};
var _elm_lang$html$Html_Attributes$hreflang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'hreflang', value);
};
var _elm_lang$html$Html_Attributes$ping = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'ping', value);
};
var _elm_lang$html$Html_Attributes$start = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'start',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$headers = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'headers', value);
};
var _elm_lang$html$Html_Attributes$scope = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'scope', value);
};
var _elm_lang$html$Html_Attributes$boolProperty = F2(
	function (name, bool) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$bool(bool));
	});
var _elm_lang$html$Html_Attributes$hidden = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'hidden', bool);
};
var _elm_lang$html$Html_Attributes$contenteditable = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'contentEditable', bool);
};
var _elm_lang$html$Html_Attributes$spellcheck = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'spellcheck', bool);
};
var _elm_lang$html$Html_Attributes$async = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'async', bool);
};
var _elm_lang$html$Html_Attributes$defer = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'defer', bool);
};
var _elm_lang$html$Html_Attributes$scoped = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'scoped', bool);
};
var _elm_lang$html$Html_Attributes$autoplay = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autoplay', bool);
};
var _elm_lang$html$Html_Attributes$controls = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'controls', bool);
};
var _elm_lang$html$Html_Attributes$loop = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'loop', bool);
};
var _elm_lang$html$Html_Attributes$default = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'default', bool);
};
var _elm_lang$html$Html_Attributes$seamless = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'seamless', bool);
};
var _elm_lang$html$Html_Attributes$checked = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'checked', bool);
};
var _elm_lang$html$Html_Attributes$selected = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'selected', bool);
};
var _elm_lang$html$Html_Attributes$autofocus = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autofocus', bool);
};
var _elm_lang$html$Html_Attributes$disabled = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'disabled', bool);
};
var _elm_lang$html$Html_Attributes$multiple = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'multiple', bool);
};
var _elm_lang$html$Html_Attributes$novalidate = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'noValidate', bool);
};
var _elm_lang$html$Html_Attributes$readonly = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'readOnly', bool);
};
var _elm_lang$html$Html_Attributes$required = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'required', bool);
};
var _elm_lang$html$Html_Attributes$ismap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'isMap', value);
};
var _elm_lang$html$Html_Attributes$download = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'download', bool);
};
var _elm_lang$html$Html_Attributes$reversed = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'reversed', bool);
};
var _elm_lang$html$Html_Attributes$classList = function (list) {
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$second, list))));
};
var _elm_lang$html$Html_Attributes$style = _elm_lang$virtual_dom$VirtualDom$style;

var _abadi199$datetimepicker$DateTimePicker_Config$defaultNamespace = 'elm-input-datepicker';
var _abadi199$datetimepicker$DateTimePicker_Config$defaultClass = function (classes) {
	return _elm_lang$html$Html_Attributes$classList(
		A2(
			_elm_lang$core$List$map,
			function ($class) {
				return {
					ctor: '_Tuple2',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						_abadi199$datetimepicker$DateTimePicker_Config$defaultNamespace,
						_elm_lang$core$Basics$toString($class)),
					_1: true
				};
			},
			classes));
};
var _abadi199$datetimepicker$DateTimePicker_Config$defaultNameOfDays = {sunday: 'Su', monday: 'Mo', tuesday: 'Tu', wednesday: 'We', thursday: 'Th', friday: 'Fr', saturday: 'Sa'};
var _abadi199$datetimepicker$DateTimePicker_Config$defaultTimeInputFormat = {
	inputFormatter: _abadi199$datetimepicker$DateTimePicker_Formatter$timeFormatter,
	inputParser: function (input) {
		return _elm_lang$core$Result$toMaybe(
			A3(_abadi199$dateparser$DateParser$parse, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _abadi199$datetimepicker$DateTimePicker_Formatter$timePattern, input));
	}
};
var _abadi199$datetimepicker$DateTimePicker_Config$defaultDateTimeInputFormat = {
	inputFormatter: _abadi199$datetimepicker$DateTimePicker_Formatter$dateTimeFormatter,
	inputParser: function (input) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Result$toMaybe(
				_elm_lang$core$Date$fromString(input)),
			A2(
				_elm_lang$core$Maybe$map,
				_elm_lang$core$Maybe$Just,
				_elm_lang$core$Result$toMaybe(
					A3(_abadi199$dateparser$DateParser$parse, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _abadi199$datetimepicker$DateTimePicker_Formatter$dateTimePattern, input))));
	}
};
var _abadi199$datetimepicker$DateTimePicker_Config$defaultDateInputFormat = {
	inputFormatter: _abadi199$datetimepicker$DateTimePicker_Formatter$dateFormatter,
	inputParser: function (input) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Result$toMaybe(
				_elm_lang$core$Date$fromString(input)),
			A2(
				_elm_lang$core$Maybe$map,
				_elm_lang$core$Maybe$Just,
				_elm_lang$core$Result$toMaybe(
					A3(_abadi199$dateparser$DateParser$parse, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _abadi199$datetimepicker$DateTimePicker_Formatter$datePattern, input))));
	}
};
var _abadi199$datetimepicker$DateTimePicker_Config$defaultDateTimeI18n = {titleFormatter: _abadi199$datetimepicker$DateTimePicker_Formatter$titleFormatter, footerFormatter: _abadi199$datetimepicker$DateTimePicker_Formatter$footerFormatter, timeTitleFormatter: _abadi199$datetimepicker$DateTimePicker_Formatter$timeFormatter, inputFormat: _abadi199$datetimepicker$DateTimePicker_Config$defaultDateTimeInputFormat};
var _abadi199$datetimepicker$DateTimePicker_Config$defaultTimeI18n = {titleFormatter: _abadi199$datetimepicker$DateTimePicker_Formatter$titleFormatter, footerFormatter: _abadi199$datetimepicker$DateTimePicker_Formatter$footerFormatter, timeTitleFormatter: _abadi199$datetimepicker$DateTimePicker_Formatter$timeFormatter, inputFormat: _abadi199$datetimepicker$DateTimePicker_Config$defaultTimeInputFormat};
var _abadi199$datetimepicker$DateTimePicker_Config$defaultDateI18n = {titleFormatter: _abadi199$datetimepicker$DateTimePicker_Formatter$titleFormatter, footerFormatter: _abadi199$datetimepicker$DateTimePicker_Formatter$footerFormatter, timeTitleFormatter: _abadi199$datetimepicker$DateTimePicker_Formatter$timeFormatter, inputFormat: _abadi199$datetimepicker$DateTimePicker_Config$defaultDateInputFormat};
var _abadi199$datetimepicker$DateTimePicker_Config$defaultDatePickerConfig = function (onChange) {
	return {
		onChange: onChange,
		autoClose: true,
		nameOfDays: _abadi199$datetimepicker$DateTimePicker_Config$defaultNameOfDays,
		firstDayOfWeek: _elm_lang$core$Date$Sun,
		allowYearNavigation: true,
		i18n: _abadi199$datetimepicker$DateTimePicker_Config$defaultDateI18n,
		usePicker: true,
		attributes: {ctor: '[]'},
		$class: _abadi199$datetimepicker$DateTimePicker_Config$defaultClass
	};
};
var _abadi199$datetimepicker$DateTimePicker_Config$I18n = F4(
	function (a, b, c, d) {
		return {titleFormatter: a, footerFormatter: b, timeTitleFormatter: c, inputFormat: d};
	});
var _abadi199$datetimepicker$DateTimePicker_Config$InputFormat = F2(
	function (a, b) {
		return {inputFormatter: a, inputParser: b};
	});
var _abadi199$datetimepicker$DateTimePicker_Config$TimePickerConfig = function (a) {
	return {timePickerType: a};
};
var _abadi199$datetimepicker$DateTimePicker_Config$NameOfDays = F7(
	function (a, b, c, d, e, f, g) {
		return {sunday: a, monday: b, tuesday: c, wednesday: d, thursday: e, friday: f, saturday: g};
	});
var _abadi199$datetimepicker$DateTimePicker_Config$TimeType = function (a) {
	return {ctor: 'TimeType', _0: a};
};
var _abadi199$datetimepicker$DateTimePicker_Config$DateTimeType = function (a) {
	return {ctor: 'DateTimeType', _0: a};
};
var _abadi199$datetimepicker$DateTimePicker_Config$DateType = function (a) {
	return {ctor: 'DateType', _0: a};
};
var _abadi199$datetimepicker$DateTimePicker_Config$Analog = {ctor: 'Analog'};
var _abadi199$datetimepicker$DateTimePicker_Config$defaultTimePickerConfig = function (onChange) {
	return {
		onChange: onChange,
		autoClose: false,
		timePickerType: _abadi199$datetimepicker$DateTimePicker_Config$Analog,
		i18n: _abadi199$datetimepicker$DateTimePicker_Config$defaultTimeI18n,
		usePicker: true,
		attributes: {ctor: '[]'},
		$class: _abadi199$datetimepicker$DateTimePicker_Config$defaultClass
	};
};
var _abadi199$datetimepicker$DateTimePicker_Config$defaultDateTimePickerConfig = function (onChange) {
	return {
		onChange: onChange,
		autoClose: false,
		nameOfDays: _abadi199$datetimepicker$DateTimePicker_Config$defaultNameOfDays,
		firstDayOfWeek: _elm_lang$core$Date$Sun,
		timePickerType: _abadi199$datetimepicker$DateTimePicker_Config$Analog,
		allowYearNavigation: true,
		i18n: _abadi199$datetimepicker$DateTimePicker_Config$defaultDateTimeI18n,
		usePicker: true,
		attributes: {ctor: '[]'},
		$class: _abadi199$datetimepicker$DateTimePicker_Config$defaultClass
	};
};
var _abadi199$datetimepicker$DateTimePicker_Config$Digital = {ctor: 'Digital'};

var _abadi199$datetimepicker$DateTimePicker_DateUtils$toMillitary = F2(
	function (hour, amPm) {
		var _p0 = {ctor: '_Tuple2', _0: hour, _1: amPm};
		_v0_3:
		do {
			switch (_p0._1) {
				case 'AM':
					if (_p0._0 === 12) {
						return 0;
					} else {
						break _v0_3;
					}
				case 'PM':
					if (_p0._0 === 12) {
						return 12;
					} else {
						return hour + 12;
					}
				default:
					break _v0_3;
			}
		} while(false);
		return hour;
	});
var _abadi199$datetimepicker$DateTimePicker_DateUtils$fromMillitaryAmPm = function (hour) {
	var _p1 = hour;
	switch (_p1) {
		case 12:
			return 'PM';
		case 0:
			return 'AM';
		default:
			return (_elm_lang$core$Native_Utils.cmp(hour, 12) > -1) ? 'PM' : 'AM';
	}
};
var _abadi199$datetimepicker$DateTimePicker_DateUtils$fromMillitaryHour = function (hour) {
	var _p2 = hour;
	switch (_p2) {
		case 12:
			return 12;
		case 0:
			return 12;
		default:
			return A2(_elm_lang$core$Basics_ops['%'], hour, 12);
	}
};
var _abadi199$datetimepicker$DateTimePicker_DateUtils$padding = function (str) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$String$length(str),
		0) ? '00' : (_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$String$length(str),
		1) ? A2(_elm_lang$core$Basics_ops['++'], '0', str) : str);
};
var _abadi199$datetimepicker$DateTimePicker_DateUtils$setTime = F4(
	function (date, hour, minute, amPm) {
		return A7(
			_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields,
			_elm_lang$core$Date$year(date),
			_elm_lang$core$Date$month(date),
			_elm_lang$core$Date$day(date),
			A2(_abadi199$datetimepicker$DateTimePicker_DateUtils$toMillitary, hour, amPm),
			minute,
			0,
			0);
	});
var _abadi199$datetimepicker$DateTimePicker_DateUtils$toTime = F3(
	function (hour, minute, amPm) {
		return A7(
			_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields,
			0,
			_elm_lang$core$Date$Jan,
			1,
			A2(_abadi199$datetimepicker$DateTimePicker_DateUtils$toMillitary, hour, amPm),
			minute,
			0,
			0);
	});
var _abadi199$datetimepicker$DateTimePicker_DateUtils$toDateTime = F5(
	function (year, month, day, hour, minute) {
		var _p3 = day.monthType;
		switch (_p3.ctor) {
			case 'Current':
				return A7(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, year, month, day.day, hour, minute, 0, 0);
			case 'Previous':
				var previousMonth = _rluiten$elm_date_extra$Date_Extra_Core$lastOfPrevMonthDate(
					A7(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, year, month, day.day, hour, minute, 0, 0));
				return A7(
					_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields,
					_elm_lang$core$Date$year(previousMonth),
					_elm_lang$core$Date$month(previousMonth),
					day.day,
					hour,
					minute,
					0,
					0);
			default:
				var nextMonth = _rluiten$elm_date_extra$Date_Extra_Core$firstOfNextMonthDate(
					A7(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, year, month, day.day, hour, minute, 0, 0));
				return A7(
					_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields,
					_elm_lang$core$Date$year(nextMonth),
					_elm_lang$core$Date$month(nextMonth),
					day.day,
					hour,
					minute,
					0,
					0);
		}
	});
var _abadi199$datetimepicker$DateTimePicker_DateUtils$toDate = F3(
	function (year, month, day) {
		return A5(_abadi199$datetimepicker$DateTimePicker_DateUtils$toDateTime, year, month, day, 0, 0);
	});
var _abadi199$datetimepicker$DateTimePicker_DateUtils$calculateNumberOfDaysForPreviousMonth = function (firstDayInInt) {
	return _elm_lang$core$Native_Utils.eq(firstDayInInt, 0) ? 7 : firstDayInInt;
};
var _abadi199$datetimepicker$DateTimePicker_DateUtils$dayToInt = F2(
	function (startOfWeek, day) {
		var base = function () {
			var _p4 = day;
			switch (_p4.ctor) {
				case 'Sun':
					return 0;
				case 'Mon':
					return 1;
				case 'Tue':
					return 2;
				case 'Wed':
					return 3;
				case 'Thu':
					return 4;
				case 'Fri':
					return 5;
				default:
					return 6;
			}
		}();
		var _p5 = startOfWeek;
		switch (_p5.ctor) {
			case 'Sun':
				return base;
			case 'Mon':
				return A2(_elm_lang$core$Basics_ops['%'], base - 1, 7);
			case 'Tue':
				return A2(_elm_lang$core$Basics_ops['%'], base - 2, 7);
			case 'Wed':
				return A2(_elm_lang$core$Basics_ops['%'], base - 3, 7);
			case 'Thu':
				return A2(_elm_lang$core$Basics_ops['%'], base - 4, 7);
			case 'Fri':
				return A2(_elm_lang$core$Basics_ops['%'], base - 5, 7);
			default:
				return A2(_elm_lang$core$Basics_ops['%'], base - 6, 7);
		}
	});
var _abadi199$datetimepicker$DateTimePicker_DateUtils$Day = F2(
	function (a, b) {
		return {monthType: a, day: b};
	});
var _abadi199$datetimepicker$DateTimePicker_DateUtils$Next = {ctor: 'Next'};
var _abadi199$datetimepicker$DateTimePicker_DateUtils$Current = {ctor: 'Current'};
var _abadi199$datetimepicker$DateTimePicker_DateUtils$Previous = {ctor: 'Previous'};
var _abadi199$datetimepicker$DateTimePicker_DateUtils$generateCalendar = F3(
	function (firstDayOfWeek, month, year) {
		var nextMonth = A2(
			_elm_lang$core$List$map,
			_abadi199$datetimepicker$DateTimePicker_DateUtils$Day(_abadi199$datetimepicker$DateTimePicker_DateUtils$Next),
			A2(_elm_lang$core$List$range, 1, 14));
		var firstDateOfMonth = A7(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, year, month, 1, 0, 0, 0, 0);
		var firstDayOfMonth = A2(
			_abadi199$datetimepicker$DateTimePicker_DateUtils$dayToInt,
			firstDayOfWeek,
			_elm_lang$core$Date$dayOfWeek(firstDateOfMonth));
		var numberOfDaysForPreviousMonth = _abadi199$datetimepicker$DateTimePicker_DateUtils$calculateNumberOfDaysForPreviousMonth(firstDayOfMonth);
		var daysInMonth = _rluiten$elm_date_extra$Date_Extra_Core$daysInMonthDate(firstDateOfMonth);
		var currentMonth = A2(
			_elm_lang$core$List$map,
			_abadi199$datetimepicker$DateTimePicker_DateUtils$Day(_abadi199$datetimepicker$DateTimePicker_DateUtils$Current),
			A2(_elm_lang$core$List$range, 1, daysInMonth));
		var daysInPreviousMonth = _rluiten$elm_date_extra$Date_Extra_Core$daysInPrevMonth(firstDateOfMonth);
		var previousMonth = A2(
			_elm_lang$core$List$map,
			_abadi199$datetimepicker$DateTimePicker_DateUtils$Day(_abadi199$datetimepicker$DateTimePicker_DateUtils$Previous),
			A2(_elm_lang$core$List$range, (daysInPreviousMonth - numberOfDaysForPreviousMonth) + 1, daysInPreviousMonth));
		return A2(
			_elm_lang$core$List$take,
			42,
			A2(
				_elm_lang$core$Basics_ops['++'],
				previousMonth,
				A2(_elm_lang$core$Basics_ops['++'], currentMonth, nextMonth)));
	});

var _elm_lang$html$Html_Events$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$html$Html_Events$targetChecked = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'checked',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$bool);
var _elm_lang$html$Html_Events$targetValue = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'value',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$string);
var _elm_lang$html$Html_Events$defaultOptions = _elm_lang$virtual_dom$VirtualDom$defaultOptions;
var _elm_lang$html$Html_Events$onWithOptions = _elm_lang$virtual_dom$VirtualDom$onWithOptions;
var _elm_lang$html$Html_Events$on = _elm_lang$virtual_dom$VirtualDom$on;
var _elm_lang$html$Html_Events$onFocus = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'focus',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onBlur = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'blur',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onSubmitOptions = _elm_lang$core$Native_Utils.update(
	_elm_lang$html$Html_Events$defaultOptions,
	{preventDefault: true});
var _elm_lang$html$Html_Events$onSubmit = function (msg) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'submit',
		_elm_lang$html$Html_Events$onSubmitOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onCheck = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetChecked));
};
var _elm_lang$html$Html_Events$onInput = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'input',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetValue));
};
var _elm_lang$html$Html_Events$onMouseOut = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseout',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseOver = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseover',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseLeave = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseleave',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseEnter = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseenter',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseUp = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseup',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseDown = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mousedown',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onDoubleClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'dblclick',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});

var _elm_lang$svg$Svg$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$svg$Svg$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$svg$Svg$svgNamespace = A2(
	_elm_lang$virtual_dom$VirtualDom$property,
	'namespace',
	_elm_lang$core$Json_Encode$string('http://www.w3.org/2000/svg'));
var _elm_lang$svg$Svg$node = F3(
	function (name, attributes, children) {
		return A3(
			_elm_lang$virtual_dom$VirtualDom$node,
			name,
			{ctor: '::', _0: _elm_lang$svg$Svg$svgNamespace, _1: attributes},
			children);
	});
var _elm_lang$svg$Svg$svg = _elm_lang$svg$Svg$node('svg');
var _elm_lang$svg$Svg$foreignObject = _elm_lang$svg$Svg$node('foreignObject');
var _elm_lang$svg$Svg$animate = _elm_lang$svg$Svg$node('animate');
var _elm_lang$svg$Svg$animateColor = _elm_lang$svg$Svg$node('animateColor');
var _elm_lang$svg$Svg$animateMotion = _elm_lang$svg$Svg$node('animateMotion');
var _elm_lang$svg$Svg$animateTransform = _elm_lang$svg$Svg$node('animateTransform');
var _elm_lang$svg$Svg$mpath = _elm_lang$svg$Svg$node('mpath');
var _elm_lang$svg$Svg$set = _elm_lang$svg$Svg$node('set');
var _elm_lang$svg$Svg$a = _elm_lang$svg$Svg$node('a');
var _elm_lang$svg$Svg$defs = _elm_lang$svg$Svg$node('defs');
var _elm_lang$svg$Svg$g = _elm_lang$svg$Svg$node('g');
var _elm_lang$svg$Svg$marker = _elm_lang$svg$Svg$node('marker');
var _elm_lang$svg$Svg$mask = _elm_lang$svg$Svg$node('mask');
var _elm_lang$svg$Svg$pattern = _elm_lang$svg$Svg$node('pattern');
var _elm_lang$svg$Svg$switch = _elm_lang$svg$Svg$node('switch');
var _elm_lang$svg$Svg$symbol = _elm_lang$svg$Svg$node('symbol');
var _elm_lang$svg$Svg$desc = _elm_lang$svg$Svg$node('desc');
var _elm_lang$svg$Svg$metadata = _elm_lang$svg$Svg$node('metadata');
var _elm_lang$svg$Svg$title = _elm_lang$svg$Svg$node('title');
var _elm_lang$svg$Svg$feBlend = _elm_lang$svg$Svg$node('feBlend');
var _elm_lang$svg$Svg$feColorMatrix = _elm_lang$svg$Svg$node('feColorMatrix');
var _elm_lang$svg$Svg$feComponentTransfer = _elm_lang$svg$Svg$node('feComponentTransfer');
var _elm_lang$svg$Svg$feComposite = _elm_lang$svg$Svg$node('feComposite');
var _elm_lang$svg$Svg$feConvolveMatrix = _elm_lang$svg$Svg$node('feConvolveMatrix');
var _elm_lang$svg$Svg$feDiffuseLighting = _elm_lang$svg$Svg$node('feDiffuseLighting');
var _elm_lang$svg$Svg$feDisplacementMap = _elm_lang$svg$Svg$node('feDisplacementMap');
var _elm_lang$svg$Svg$feFlood = _elm_lang$svg$Svg$node('feFlood');
var _elm_lang$svg$Svg$feFuncA = _elm_lang$svg$Svg$node('feFuncA');
var _elm_lang$svg$Svg$feFuncB = _elm_lang$svg$Svg$node('feFuncB');
var _elm_lang$svg$Svg$feFuncG = _elm_lang$svg$Svg$node('feFuncG');
var _elm_lang$svg$Svg$feFuncR = _elm_lang$svg$Svg$node('feFuncR');
var _elm_lang$svg$Svg$feGaussianBlur = _elm_lang$svg$Svg$node('feGaussianBlur');
var _elm_lang$svg$Svg$feImage = _elm_lang$svg$Svg$node('feImage');
var _elm_lang$svg$Svg$feMerge = _elm_lang$svg$Svg$node('feMerge');
var _elm_lang$svg$Svg$feMergeNode = _elm_lang$svg$Svg$node('feMergeNode');
var _elm_lang$svg$Svg$feMorphology = _elm_lang$svg$Svg$node('feMorphology');
var _elm_lang$svg$Svg$feOffset = _elm_lang$svg$Svg$node('feOffset');
var _elm_lang$svg$Svg$feSpecularLighting = _elm_lang$svg$Svg$node('feSpecularLighting');
var _elm_lang$svg$Svg$feTile = _elm_lang$svg$Svg$node('feTile');
var _elm_lang$svg$Svg$feTurbulence = _elm_lang$svg$Svg$node('feTurbulence');
var _elm_lang$svg$Svg$font = _elm_lang$svg$Svg$node('font');
var _elm_lang$svg$Svg$linearGradient = _elm_lang$svg$Svg$node('linearGradient');
var _elm_lang$svg$Svg$radialGradient = _elm_lang$svg$Svg$node('radialGradient');
var _elm_lang$svg$Svg$stop = _elm_lang$svg$Svg$node('stop');
var _elm_lang$svg$Svg$circle = _elm_lang$svg$Svg$node('circle');
var _elm_lang$svg$Svg$ellipse = _elm_lang$svg$Svg$node('ellipse');
var _elm_lang$svg$Svg$image = _elm_lang$svg$Svg$node('image');
var _elm_lang$svg$Svg$line = _elm_lang$svg$Svg$node('line');
var _elm_lang$svg$Svg$path = _elm_lang$svg$Svg$node('path');
var _elm_lang$svg$Svg$polygon = _elm_lang$svg$Svg$node('polygon');
var _elm_lang$svg$Svg$polyline = _elm_lang$svg$Svg$node('polyline');
var _elm_lang$svg$Svg$rect = _elm_lang$svg$Svg$node('rect');
var _elm_lang$svg$Svg$use = _elm_lang$svg$Svg$node('use');
var _elm_lang$svg$Svg$feDistantLight = _elm_lang$svg$Svg$node('feDistantLight');
var _elm_lang$svg$Svg$fePointLight = _elm_lang$svg$Svg$node('fePointLight');
var _elm_lang$svg$Svg$feSpotLight = _elm_lang$svg$Svg$node('feSpotLight');
var _elm_lang$svg$Svg$altGlyph = _elm_lang$svg$Svg$node('altGlyph');
var _elm_lang$svg$Svg$altGlyphDef = _elm_lang$svg$Svg$node('altGlyphDef');
var _elm_lang$svg$Svg$altGlyphItem = _elm_lang$svg$Svg$node('altGlyphItem');
var _elm_lang$svg$Svg$glyph = _elm_lang$svg$Svg$node('glyph');
var _elm_lang$svg$Svg$glyphRef = _elm_lang$svg$Svg$node('glyphRef');
var _elm_lang$svg$Svg$textPath = _elm_lang$svg$Svg$node('textPath');
var _elm_lang$svg$Svg$text_ = _elm_lang$svg$Svg$node('text');
var _elm_lang$svg$Svg$tref = _elm_lang$svg$Svg$node('tref');
var _elm_lang$svg$Svg$tspan = _elm_lang$svg$Svg$node('tspan');
var _elm_lang$svg$Svg$clipPath = _elm_lang$svg$Svg$node('clipPath');
var _elm_lang$svg$Svg$colorProfile = _elm_lang$svg$Svg$node('colorProfile');
var _elm_lang$svg$Svg$cursor = _elm_lang$svg$Svg$node('cursor');
var _elm_lang$svg$Svg$filter = _elm_lang$svg$Svg$node('filter');
var _elm_lang$svg$Svg$script = _elm_lang$svg$Svg$node('script');
var _elm_lang$svg$Svg$style = _elm_lang$svg$Svg$node('style');
var _elm_lang$svg$Svg$view = _elm_lang$svg$Svg$node('view');

var _elm_lang$svg$Svg_Events$on = _elm_lang$virtual_dom$VirtualDom$on;
var _elm_lang$svg$Svg_Events$simpleOn = F2(
	function (name, msg) {
		return A2(
			_elm_lang$svg$Svg_Events$on,
			name,
			_elm_lang$core$Json_Decode$succeed(msg));
	});
var _elm_lang$svg$Svg_Events$onBegin = _elm_lang$svg$Svg_Events$simpleOn('begin');
var _elm_lang$svg$Svg_Events$onEnd = _elm_lang$svg$Svg_Events$simpleOn('end');
var _elm_lang$svg$Svg_Events$onRepeat = _elm_lang$svg$Svg_Events$simpleOn('repeat');
var _elm_lang$svg$Svg_Events$onAbort = _elm_lang$svg$Svg_Events$simpleOn('abort');
var _elm_lang$svg$Svg_Events$onError = _elm_lang$svg$Svg_Events$simpleOn('error');
var _elm_lang$svg$Svg_Events$onResize = _elm_lang$svg$Svg_Events$simpleOn('resize');
var _elm_lang$svg$Svg_Events$onScroll = _elm_lang$svg$Svg_Events$simpleOn('scroll');
var _elm_lang$svg$Svg_Events$onLoad = _elm_lang$svg$Svg_Events$simpleOn('load');
var _elm_lang$svg$Svg_Events$onUnload = _elm_lang$svg$Svg_Events$simpleOn('unload');
var _elm_lang$svg$Svg_Events$onZoom = _elm_lang$svg$Svg_Events$simpleOn('zoom');
var _elm_lang$svg$Svg_Events$onActivate = _elm_lang$svg$Svg_Events$simpleOn('activate');
var _elm_lang$svg$Svg_Events$onClick = _elm_lang$svg$Svg_Events$simpleOn('click');
var _elm_lang$svg$Svg_Events$onFocusIn = _elm_lang$svg$Svg_Events$simpleOn('focusin');
var _elm_lang$svg$Svg_Events$onFocusOut = _elm_lang$svg$Svg_Events$simpleOn('focusout');
var _elm_lang$svg$Svg_Events$onMouseDown = _elm_lang$svg$Svg_Events$simpleOn('mousedown');
var _elm_lang$svg$Svg_Events$onMouseMove = _elm_lang$svg$Svg_Events$simpleOn('mousemove');
var _elm_lang$svg$Svg_Events$onMouseOut = _elm_lang$svg$Svg_Events$simpleOn('mouseout');
var _elm_lang$svg$Svg_Events$onMouseOver = _elm_lang$svg$Svg_Events$simpleOn('mouseover');
var _elm_lang$svg$Svg_Events$onMouseUp = _elm_lang$svg$Svg_Events$simpleOn('mouseup');

var _abadi199$datetimepicker$DateTimePicker_Events$touches = function (decoder) {
	var loop = F2(
		function (idx, xs) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (_p0) {
					return A2(
						_elm_lang$core$Maybe$withDefault,
						_elm_lang$core$Json_Decode$succeed(xs),
						A2(
							_elm_lang$core$Maybe$map,
							function (x) {
								return A2(
									loop,
									idx + 1,
									{ctor: '::', _0: x, _1: xs});
							},
							_p0));
				},
				_elm_lang$core$Json_Decode$maybe(
					A2(
						_elm_lang$core$Json_Decode$field,
						_elm_lang$core$Basics$toString(idx),
						decoder)));
		});
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'touches',
			_1: {
				ctor: '::',
				_0: '0',
				_1: {ctor: '[]'}
			}
		},
		A2(
			loop,
			0,
			{ctor: '[]'}));
};
var _abadi199$datetimepicker$DateTimePicker_Events$onTouchMovePreventDefault = function (msg) {
	var eventOptions = {preventDefault: true, stopPropagation: true};
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'touchstart',
		eventOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _abadi199$datetimepicker$DateTimePicker_Events$onPointerUp = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'pointerup',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _abadi199$datetimepicker$DateTimePicker_Events$onTouchEndPreventDefault = function (msg) {
	var eventOptions = {preventDefault: true, stopPropagation: true};
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'touchend',
		eventOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _abadi199$datetimepicker$DateTimePicker_Events$onMouseUpPreventDefault = function (msg) {
	var eventOptions = {preventDefault: true, stopPropagation: true};
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'mouseup',
		eventOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault = function (msg) {
	var eventOptions = {preventDefault: true, stopPropagation: true};
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'touchstart',
		eventOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault = function (msg) {
	var eventOptions = {preventDefault: true, stopPropagation: true};
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'mousedown',
		eventOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _abadi199$datetimepicker$DateTimePicker_Events$onBlurWithChange = F2(
	function (parser, tagger) {
		return A2(
			_elm_lang$html$Html_Events$on,
			'blur',
			A2(
				_elm_lang$core$Json_Decode$map,
				function (_p1) {
					return tagger(
						parser(_p1));
				},
				_elm_lang$html$Html_Events$targetValue));
	});
var _abadi199$datetimepicker$DateTimePicker_Events$MoveData = F2(
	function (a, b) {
		return {offsetX: a, offsetY: b};
	});
var _abadi199$datetimepicker$DateTimePicker_Events$mouseMoveDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	_abadi199$datetimepicker$DateTimePicker_Events$MoveData,
	A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Basics$round,
		A2(_elm_lang$core$Json_Decode$field, 'offsetX', _elm_lang$core$Json_Decode$float)),
	A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Basics$round,
		A2(_elm_lang$core$Json_Decode$field, 'offsetY', _elm_lang$core$Json_Decode$float)));
var _abadi199$datetimepicker$DateTimePicker_Events$onMouseMoveWithPosition = function (decoder) {
	return A2(
		_elm_lang$svg$Svg_Events$on,
		'mousemove',
		A2(_elm_lang$core$Json_Decode$andThen, decoder, _abadi199$datetimepicker$DateTimePicker_Events$mouseMoveDecoder));
};
var _abadi199$datetimepicker$DateTimePicker_Events$onPointerMoveWithPosition = function (decoder) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'pointermove',
		A2(_elm_lang$core$Json_Decode$andThen, decoder, _abadi199$datetimepicker$DateTimePicker_Events$mouseMoveDecoder));
};

var _abadi199$datetimepicker$DateTimePicker_Geometry$calculateArrowPoint = F3(
	function (origin, length, radians) {
		var y = _elm_lang$core$Basics$round(
			_elm_lang$core$Basics$toFloat(length) * _elm_lang$core$Basics$sin(radians));
		var x = _elm_lang$core$Basics$round(
			_elm_lang$core$Basics$toFloat(length) * _elm_lang$core$Basics$cos(radians));
		return {x: origin.x + x, y: origin.y - y};
	});
var _abadi199$datetimepicker$DateTimePicker_Geometry$Point = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _abadi199$datetimepicker$DateTimePicker_Geometry$Quadrant4 = {ctor: 'Quadrant4'};
var _abadi199$datetimepicker$DateTimePicker_Geometry$Quadrant3 = {ctor: 'Quadrant3'};
var _abadi199$datetimepicker$DateTimePicker_Geometry$Quadrant2 = {ctor: 'Quadrant2'};
var _abadi199$datetimepicker$DateTimePicker_Geometry$Quadrant1 = {ctor: 'Quadrant1'};
var _abadi199$datetimepicker$DateTimePicker_Geometry$calculateAngle = F3(
	function (p1, p2, p3) {
		var p23 = _elm_lang$core$Basics$sqrt(
			_elm_lang$core$Basics$toFloat(
				Math.pow(p2.x - p3.x, 2) + Math.pow(p2.y - p3.y, 2)));
		var p13 = _elm_lang$core$Basics$sqrt(
			_elm_lang$core$Basics$toFloat(
				Math.pow(p1.x - p3.x, 2) + Math.pow(p1.y - p3.y, 2)));
		var p12 = _elm_lang$core$Basics$sqrt(
			_elm_lang$core$Basics$toFloat(
				Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)));
		var angle = _elm_lang$core$Basics$acos(
			((Math.pow(p12, 2) + Math.pow(p13, 2)) - Math.pow(p23, 2)) / ((2 * p12) * p13));
		var quadrant = ((_elm_lang$core$Native_Utils.cmp(p3.x, p1.x) > -1) && (_elm_lang$core$Native_Utils.cmp(p3.y, p1.y) > -1)) ? _abadi199$datetimepicker$DateTimePicker_Geometry$Quadrant1 : (((_elm_lang$core$Native_Utils.cmp(p3.x, p1.x) < 0) && (_elm_lang$core$Native_Utils.cmp(p3.y, p1.y) > -1)) ? _abadi199$datetimepicker$DateTimePicker_Geometry$Quadrant2 : (((_elm_lang$core$Native_Utils.cmp(p3.x, p1.x) < 0) && (_elm_lang$core$Native_Utils.cmp(p3.y, p1.y) < 0)) ? _abadi199$datetimepicker$DateTimePicker_Geometry$Quadrant3 : _abadi199$datetimepicker$DateTimePicker_Geometry$Quadrant4));
		var _p0 = quadrant;
		switch (_p0.ctor) {
			case 'Quadrant3':
				return angle;
			case 'Quadrant4':
				return angle;
			case 'Quadrant1':
				return (2 * _elm_lang$core$Basics$pi) - angle;
			default:
				return (2 * _elm_lang$core$Basics$pi) - angle;
		}
	});

var _abadi199$datetimepicker$DateTimePicker_SharedStyles$EmptyCell = {ctor: 'EmptyCell'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$PM = {ctor: 'PM'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$AM = {ctor: 'AM'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$AMPMPicker = {ctor: 'AMPMPicker'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$Separator = {ctor: 'Separator'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$AMPM = {ctor: 'AMPM'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$Minute = {ctor: 'Minute'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$Hour = {ctor: 'Hour'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$Active = {ctor: 'Active'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$AnalogClock = {ctor: 'AnalogClock'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$AnalogTime = {ctor: 'AnalogTime'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$DigitalTime = {ctor: 'DigitalTime'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$Today = {ctor: 'Today'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$SelectedAmPm = {ctor: 'SelectedAmPm'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$SelectedMinute = {ctor: 'SelectedMinute'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$SelectedHour = {ctor: 'SelectedHour'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$SelectedDate = {ctor: 'SelectedDate'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$Footer = {ctor: 'Footer'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$TimePicker = {ctor: 'TimePicker'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$DatePicker = {ctor: 'DatePicker'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$TimePickerDialog = {ctor: 'TimePickerDialog'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$DatePickerDialog = {ctor: 'DatePickerDialog'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$Dialog = {ctor: 'Dialog'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$ArrowDown = {ctor: 'ArrowDown'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$ArrowUp = {ctor: 'ArrowUp'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$DoubleArrowRight = {ctor: 'DoubleArrowRight'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$DoubleArrowLeft = {ctor: 'DoubleArrowLeft'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$ArrowRight = {ctor: 'ArrowRight'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$ArrowLeft = {ctor: 'ArrowLeft'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$NoYearNavigation = {ctor: 'NoYearNavigation'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$Title = {ctor: 'Title'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$Days = {ctor: 'Days'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$NextMonth = {ctor: 'NextMonth'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$Body = {ctor: 'Body'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$Header = {ctor: 'Header'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$CurrentMonth = {ctor: 'CurrentMonth'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$PreviousMonth = {ctor: 'PreviousMonth'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$DaysOfWeek = {ctor: 'DaysOfWeek'};
var _abadi199$datetimepicker$DateTimePicker_SharedStyles$Calendar = {ctor: 'Calendar'};

var _elm_lang$svg$Svg_Attributes$writingMode = _elm_lang$virtual_dom$VirtualDom$attribute('writing-mode');
var _elm_lang$svg$Svg_Attributes$wordSpacing = _elm_lang$virtual_dom$VirtualDom$attribute('word-spacing');
var _elm_lang$svg$Svg_Attributes$visibility = _elm_lang$virtual_dom$VirtualDom$attribute('visibility');
var _elm_lang$svg$Svg_Attributes$unicodeBidi = _elm_lang$virtual_dom$VirtualDom$attribute('unicode-bidi');
var _elm_lang$svg$Svg_Attributes$textRendering = _elm_lang$virtual_dom$VirtualDom$attribute('text-rendering');
var _elm_lang$svg$Svg_Attributes$textDecoration = _elm_lang$virtual_dom$VirtualDom$attribute('text-decoration');
var _elm_lang$svg$Svg_Attributes$textAnchor = _elm_lang$virtual_dom$VirtualDom$attribute('text-anchor');
var _elm_lang$svg$Svg_Attributes$stroke = _elm_lang$virtual_dom$VirtualDom$attribute('stroke');
var _elm_lang$svg$Svg_Attributes$strokeWidth = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-width');
var _elm_lang$svg$Svg_Attributes$strokeOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-opacity');
var _elm_lang$svg$Svg_Attributes$strokeMiterlimit = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-miterlimit');
var _elm_lang$svg$Svg_Attributes$strokeLinejoin = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-linejoin');
var _elm_lang$svg$Svg_Attributes$strokeLinecap = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-linecap');
var _elm_lang$svg$Svg_Attributes$strokeDashoffset = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-dashoffset');
var _elm_lang$svg$Svg_Attributes$strokeDasharray = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-dasharray');
var _elm_lang$svg$Svg_Attributes$stopOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('stop-opacity');
var _elm_lang$svg$Svg_Attributes$stopColor = _elm_lang$virtual_dom$VirtualDom$attribute('stop-color');
var _elm_lang$svg$Svg_Attributes$shapeRendering = _elm_lang$virtual_dom$VirtualDom$attribute('shape-rendering');
var _elm_lang$svg$Svg_Attributes$pointerEvents = _elm_lang$virtual_dom$VirtualDom$attribute('pointer-events');
var _elm_lang$svg$Svg_Attributes$overflow = _elm_lang$virtual_dom$VirtualDom$attribute('overflow');
var _elm_lang$svg$Svg_Attributes$opacity = _elm_lang$virtual_dom$VirtualDom$attribute('opacity');
var _elm_lang$svg$Svg_Attributes$mask = _elm_lang$virtual_dom$VirtualDom$attribute('mask');
var _elm_lang$svg$Svg_Attributes$markerStart = _elm_lang$virtual_dom$VirtualDom$attribute('marker-start');
var _elm_lang$svg$Svg_Attributes$markerMid = _elm_lang$virtual_dom$VirtualDom$attribute('marker-mid');
var _elm_lang$svg$Svg_Attributes$markerEnd = _elm_lang$virtual_dom$VirtualDom$attribute('marker-end');
var _elm_lang$svg$Svg_Attributes$lightingColor = _elm_lang$virtual_dom$VirtualDom$attribute('lighting-color');
var _elm_lang$svg$Svg_Attributes$letterSpacing = _elm_lang$virtual_dom$VirtualDom$attribute('letter-spacing');
var _elm_lang$svg$Svg_Attributes$kerning = _elm_lang$virtual_dom$VirtualDom$attribute('kerning');
var _elm_lang$svg$Svg_Attributes$imageRendering = _elm_lang$virtual_dom$VirtualDom$attribute('image-rendering');
var _elm_lang$svg$Svg_Attributes$glyphOrientationVertical = _elm_lang$virtual_dom$VirtualDom$attribute('glyph-orientation-vertical');
var _elm_lang$svg$Svg_Attributes$glyphOrientationHorizontal = _elm_lang$virtual_dom$VirtualDom$attribute('glyph-orientation-horizontal');
var _elm_lang$svg$Svg_Attributes$fontWeight = _elm_lang$virtual_dom$VirtualDom$attribute('font-weight');
var _elm_lang$svg$Svg_Attributes$fontVariant = _elm_lang$virtual_dom$VirtualDom$attribute('font-variant');
var _elm_lang$svg$Svg_Attributes$fontStyle = _elm_lang$virtual_dom$VirtualDom$attribute('font-style');
var _elm_lang$svg$Svg_Attributes$fontStretch = _elm_lang$virtual_dom$VirtualDom$attribute('font-stretch');
var _elm_lang$svg$Svg_Attributes$fontSize = _elm_lang$virtual_dom$VirtualDom$attribute('font-size');
var _elm_lang$svg$Svg_Attributes$fontSizeAdjust = _elm_lang$virtual_dom$VirtualDom$attribute('font-size-adjust');
var _elm_lang$svg$Svg_Attributes$fontFamily = _elm_lang$virtual_dom$VirtualDom$attribute('font-family');
var _elm_lang$svg$Svg_Attributes$floodOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('flood-opacity');
var _elm_lang$svg$Svg_Attributes$floodColor = _elm_lang$virtual_dom$VirtualDom$attribute('flood-color');
var _elm_lang$svg$Svg_Attributes$filter = _elm_lang$virtual_dom$VirtualDom$attribute('filter');
var _elm_lang$svg$Svg_Attributes$fill = _elm_lang$virtual_dom$VirtualDom$attribute('fill');
var _elm_lang$svg$Svg_Attributes$fillRule = _elm_lang$virtual_dom$VirtualDom$attribute('fill-rule');
var _elm_lang$svg$Svg_Attributes$fillOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('fill-opacity');
var _elm_lang$svg$Svg_Attributes$enableBackground = _elm_lang$virtual_dom$VirtualDom$attribute('enable-background');
var _elm_lang$svg$Svg_Attributes$dominantBaseline = _elm_lang$virtual_dom$VirtualDom$attribute('dominant-baseline');
var _elm_lang$svg$Svg_Attributes$display = _elm_lang$virtual_dom$VirtualDom$attribute('display');
var _elm_lang$svg$Svg_Attributes$direction = _elm_lang$virtual_dom$VirtualDom$attribute('direction');
var _elm_lang$svg$Svg_Attributes$cursor = _elm_lang$virtual_dom$VirtualDom$attribute('cursor');
var _elm_lang$svg$Svg_Attributes$color = _elm_lang$virtual_dom$VirtualDom$attribute('color');
var _elm_lang$svg$Svg_Attributes$colorRendering = _elm_lang$virtual_dom$VirtualDom$attribute('color-rendering');
var _elm_lang$svg$Svg_Attributes$colorProfile = _elm_lang$virtual_dom$VirtualDom$attribute('color-profile');
var _elm_lang$svg$Svg_Attributes$colorInterpolation = _elm_lang$virtual_dom$VirtualDom$attribute('color-interpolation');
var _elm_lang$svg$Svg_Attributes$colorInterpolationFilters = _elm_lang$virtual_dom$VirtualDom$attribute('color-interpolation-filters');
var _elm_lang$svg$Svg_Attributes$clip = _elm_lang$virtual_dom$VirtualDom$attribute('clip');
var _elm_lang$svg$Svg_Attributes$clipRule = _elm_lang$virtual_dom$VirtualDom$attribute('clip-rule');
var _elm_lang$svg$Svg_Attributes$clipPath = _elm_lang$virtual_dom$VirtualDom$attribute('clip-path');
var _elm_lang$svg$Svg_Attributes$baselineShift = _elm_lang$virtual_dom$VirtualDom$attribute('baseline-shift');
var _elm_lang$svg$Svg_Attributes$alignmentBaseline = _elm_lang$virtual_dom$VirtualDom$attribute('alignment-baseline');
var _elm_lang$svg$Svg_Attributes$zoomAndPan = _elm_lang$virtual_dom$VirtualDom$attribute('zoomAndPan');
var _elm_lang$svg$Svg_Attributes$z = _elm_lang$virtual_dom$VirtualDom$attribute('z');
var _elm_lang$svg$Svg_Attributes$yChannelSelector = _elm_lang$virtual_dom$VirtualDom$attribute('yChannelSelector');
var _elm_lang$svg$Svg_Attributes$y2 = _elm_lang$virtual_dom$VirtualDom$attribute('y2');
var _elm_lang$svg$Svg_Attributes$y1 = _elm_lang$virtual_dom$VirtualDom$attribute('y1');
var _elm_lang$svg$Svg_Attributes$y = _elm_lang$virtual_dom$VirtualDom$attribute('y');
var _elm_lang$svg$Svg_Attributes$xmlSpace = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/XML/1998/namespace', 'xml:space');
var _elm_lang$svg$Svg_Attributes$xmlLang = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/XML/1998/namespace', 'xml:lang');
var _elm_lang$svg$Svg_Attributes$xmlBase = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/XML/1998/namespace', 'xml:base');
var _elm_lang$svg$Svg_Attributes$xlinkType = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:type');
var _elm_lang$svg$Svg_Attributes$xlinkTitle = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:title');
var _elm_lang$svg$Svg_Attributes$xlinkShow = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:show');
var _elm_lang$svg$Svg_Attributes$xlinkRole = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:role');
var _elm_lang$svg$Svg_Attributes$xlinkHref = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:href');
var _elm_lang$svg$Svg_Attributes$xlinkArcrole = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:arcrole');
var _elm_lang$svg$Svg_Attributes$xlinkActuate = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:actuate');
var _elm_lang$svg$Svg_Attributes$xChannelSelector = _elm_lang$virtual_dom$VirtualDom$attribute('xChannelSelector');
var _elm_lang$svg$Svg_Attributes$x2 = _elm_lang$virtual_dom$VirtualDom$attribute('x2');
var _elm_lang$svg$Svg_Attributes$x1 = _elm_lang$virtual_dom$VirtualDom$attribute('x1');
var _elm_lang$svg$Svg_Attributes$xHeight = _elm_lang$virtual_dom$VirtualDom$attribute('x-height');
var _elm_lang$svg$Svg_Attributes$x = _elm_lang$virtual_dom$VirtualDom$attribute('x');
var _elm_lang$svg$Svg_Attributes$widths = _elm_lang$virtual_dom$VirtualDom$attribute('widths');
var _elm_lang$svg$Svg_Attributes$width = _elm_lang$virtual_dom$VirtualDom$attribute('width');
var _elm_lang$svg$Svg_Attributes$viewTarget = _elm_lang$virtual_dom$VirtualDom$attribute('viewTarget');
var _elm_lang$svg$Svg_Attributes$viewBox = _elm_lang$virtual_dom$VirtualDom$attribute('viewBox');
var _elm_lang$svg$Svg_Attributes$vertOriginY = _elm_lang$virtual_dom$VirtualDom$attribute('vert-origin-y');
var _elm_lang$svg$Svg_Attributes$vertOriginX = _elm_lang$virtual_dom$VirtualDom$attribute('vert-origin-x');
var _elm_lang$svg$Svg_Attributes$vertAdvY = _elm_lang$virtual_dom$VirtualDom$attribute('vert-adv-y');
var _elm_lang$svg$Svg_Attributes$version = _elm_lang$virtual_dom$VirtualDom$attribute('version');
var _elm_lang$svg$Svg_Attributes$values = _elm_lang$virtual_dom$VirtualDom$attribute('values');
var _elm_lang$svg$Svg_Attributes$vMathematical = _elm_lang$virtual_dom$VirtualDom$attribute('v-mathematical');
var _elm_lang$svg$Svg_Attributes$vIdeographic = _elm_lang$virtual_dom$VirtualDom$attribute('v-ideographic');
var _elm_lang$svg$Svg_Attributes$vHanging = _elm_lang$virtual_dom$VirtualDom$attribute('v-hanging');
var _elm_lang$svg$Svg_Attributes$vAlphabetic = _elm_lang$virtual_dom$VirtualDom$attribute('v-alphabetic');
var _elm_lang$svg$Svg_Attributes$unitsPerEm = _elm_lang$virtual_dom$VirtualDom$attribute('units-per-em');
var _elm_lang$svg$Svg_Attributes$unicodeRange = _elm_lang$virtual_dom$VirtualDom$attribute('unicode-range');
var _elm_lang$svg$Svg_Attributes$unicode = _elm_lang$virtual_dom$VirtualDom$attribute('unicode');
var _elm_lang$svg$Svg_Attributes$underlineThickness = _elm_lang$virtual_dom$VirtualDom$attribute('underline-thickness');
var _elm_lang$svg$Svg_Attributes$underlinePosition = _elm_lang$virtual_dom$VirtualDom$attribute('underline-position');
var _elm_lang$svg$Svg_Attributes$u2 = _elm_lang$virtual_dom$VirtualDom$attribute('u2');
var _elm_lang$svg$Svg_Attributes$u1 = _elm_lang$virtual_dom$VirtualDom$attribute('u1');
var _elm_lang$svg$Svg_Attributes$type_ = _elm_lang$virtual_dom$VirtualDom$attribute('type');
var _elm_lang$svg$Svg_Attributes$transform = _elm_lang$virtual_dom$VirtualDom$attribute('transform');
var _elm_lang$svg$Svg_Attributes$to = _elm_lang$virtual_dom$VirtualDom$attribute('to');
var _elm_lang$svg$Svg_Attributes$title = _elm_lang$virtual_dom$VirtualDom$attribute('title');
var _elm_lang$svg$Svg_Attributes$textLength = _elm_lang$virtual_dom$VirtualDom$attribute('textLength');
var _elm_lang$svg$Svg_Attributes$targetY = _elm_lang$virtual_dom$VirtualDom$attribute('targetY');
var _elm_lang$svg$Svg_Attributes$targetX = _elm_lang$virtual_dom$VirtualDom$attribute('targetX');
var _elm_lang$svg$Svg_Attributes$target = _elm_lang$virtual_dom$VirtualDom$attribute('target');
var _elm_lang$svg$Svg_Attributes$tableValues = _elm_lang$virtual_dom$VirtualDom$attribute('tableValues');
var _elm_lang$svg$Svg_Attributes$systemLanguage = _elm_lang$virtual_dom$VirtualDom$attribute('systemLanguage');
var _elm_lang$svg$Svg_Attributes$surfaceScale = _elm_lang$virtual_dom$VirtualDom$attribute('surfaceScale');
var _elm_lang$svg$Svg_Attributes$style = _elm_lang$virtual_dom$VirtualDom$attribute('style');
var _elm_lang$svg$Svg_Attributes$string = _elm_lang$virtual_dom$VirtualDom$attribute('string');
var _elm_lang$svg$Svg_Attributes$strikethroughThickness = _elm_lang$virtual_dom$VirtualDom$attribute('strikethrough-thickness');
var _elm_lang$svg$Svg_Attributes$strikethroughPosition = _elm_lang$virtual_dom$VirtualDom$attribute('strikethrough-position');
var _elm_lang$svg$Svg_Attributes$stitchTiles = _elm_lang$virtual_dom$VirtualDom$attribute('stitchTiles');
var _elm_lang$svg$Svg_Attributes$stemv = _elm_lang$virtual_dom$VirtualDom$attribute('stemv');
var _elm_lang$svg$Svg_Attributes$stemh = _elm_lang$virtual_dom$VirtualDom$attribute('stemh');
var _elm_lang$svg$Svg_Attributes$stdDeviation = _elm_lang$virtual_dom$VirtualDom$attribute('stdDeviation');
var _elm_lang$svg$Svg_Attributes$startOffset = _elm_lang$virtual_dom$VirtualDom$attribute('startOffset');
var _elm_lang$svg$Svg_Attributes$spreadMethod = _elm_lang$virtual_dom$VirtualDom$attribute('spreadMethod');
var _elm_lang$svg$Svg_Attributes$speed = _elm_lang$virtual_dom$VirtualDom$attribute('speed');
var _elm_lang$svg$Svg_Attributes$specularExponent = _elm_lang$virtual_dom$VirtualDom$attribute('specularExponent');
var _elm_lang$svg$Svg_Attributes$specularConstant = _elm_lang$virtual_dom$VirtualDom$attribute('specularConstant');
var _elm_lang$svg$Svg_Attributes$spacing = _elm_lang$virtual_dom$VirtualDom$attribute('spacing');
var _elm_lang$svg$Svg_Attributes$slope = _elm_lang$virtual_dom$VirtualDom$attribute('slope');
var _elm_lang$svg$Svg_Attributes$seed = _elm_lang$virtual_dom$VirtualDom$attribute('seed');
var _elm_lang$svg$Svg_Attributes$scale = _elm_lang$virtual_dom$VirtualDom$attribute('scale');
var _elm_lang$svg$Svg_Attributes$ry = _elm_lang$virtual_dom$VirtualDom$attribute('ry');
var _elm_lang$svg$Svg_Attributes$rx = _elm_lang$virtual_dom$VirtualDom$attribute('rx');
var _elm_lang$svg$Svg_Attributes$rotate = _elm_lang$virtual_dom$VirtualDom$attribute('rotate');
var _elm_lang$svg$Svg_Attributes$result = _elm_lang$virtual_dom$VirtualDom$attribute('result');
var _elm_lang$svg$Svg_Attributes$restart = _elm_lang$virtual_dom$VirtualDom$attribute('restart');
var _elm_lang$svg$Svg_Attributes$requiredFeatures = _elm_lang$virtual_dom$VirtualDom$attribute('requiredFeatures');
var _elm_lang$svg$Svg_Attributes$requiredExtensions = _elm_lang$virtual_dom$VirtualDom$attribute('requiredExtensions');
var _elm_lang$svg$Svg_Attributes$repeatDur = _elm_lang$virtual_dom$VirtualDom$attribute('repeatDur');
var _elm_lang$svg$Svg_Attributes$repeatCount = _elm_lang$virtual_dom$VirtualDom$attribute('repeatCount');
var _elm_lang$svg$Svg_Attributes$renderingIntent = _elm_lang$virtual_dom$VirtualDom$attribute('rendering-intent');
var _elm_lang$svg$Svg_Attributes$refY = _elm_lang$virtual_dom$VirtualDom$attribute('refY');
var _elm_lang$svg$Svg_Attributes$refX = _elm_lang$virtual_dom$VirtualDom$attribute('refX');
var _elm_lang$svg$Svg_Attributes$radius = _elm_lang$virtual_dom$VirtualDom$attribute('radius');
var _elm_lang$svg$Svg_Attributes$r = _elm_lang$virtual_dom$VirtualDom$attribute('r');
var _elm_lang$svg$Svg_Attributes$primitiveUnits = _elm_lang$virtual_dom$VirtualDom$attribute('primitiveUnits');
var _elm_lang$svg$Svg_Attributes$preserveAspectRatio = _elm_lang$virtual_dom$VirtualDom$attribute('preserveAspectRatio');
var _elm_lang$svg$Svg_Attributes$preserveAlpha = _elm_lang$virtual_dom$VirtualDom$attribute('preserveAlpha');
var _elm_lang$svg$Svg_Attributes$pointsAtZ = _elm_lang$virtual_dom$VirtualDom$attribute('pointsAtZ');
var _elm_lang$svg$Svg_Attributes$pointsAtY = _elm_lang$virtual_dom$VirtualDom$attribute('pointsAtY');
var _elm_lang$svg$Svg_Attributes$pointsAtX = _elm_lang$virtual_dom$VirtualDom$attribute('pointsAtX');
var _elm_lang$svg$Svg_Attributes$points = _elm_lang$virtual_dom$VirtualDom$attribute('points');
var _elm_lang$svg$Svg_Attributes$pointOrder = _elm_lang$virtual_dom$VirtualDom$attribute('point-order');
var _elm_lang$svg$Svg_Attributes$patternUnits = _elm_lang$virtual_dom$VirtualDom$attribute('patternUnits');
var _elm_lang$svg$Svg_Attributes$patternTransform = _elm_lang$virtual_dom$VirtualDom$attribute('patternTransform');
var _elm_lang$svg$Svg_Attributes$patternContentUnits = _elm_lang$virtual_dom$VirtualDom$attribute('patternContentUnits');
var _elm_lang$svg$Svg_Attributes$pathLength = _elm_lang$virtual_dom$VirtualDom$attribute('pathLength');
var _elm_lang$svg$Svg_Attributes$path = _elm_lang$virtual_dom$VirtualDom$attribute('path');
var _elm_lang$svg$Svg_Attributes$panose1 = _elm_lang$virtual_dom$VirtualDom$attribute('panose-1');
var _elm_lang$svg$Svg_Attributes$overlineThickness = _elm_lang$virtual_dom$VirtualDom$attribute('overline-thickness');
var _elm_lang$svg$Svg_Attributes$overlinePosition = _elm_lang$virtual_dom$VirtualDom$attribute('overline-position');
var _elm_lang$svg$Svg_Attributes$origin = _elm_lang$virtual_dom$VirtualDom$attribute('origin');
var _elm_lang$svg$Svg_Attributes$orientation = _elm_lang$virtual_dom$VirtualDom$attribute('orientation');
var _elm_lang$svg$Svg_Attributes$orient = _elm_lang$virtual_dom$VirtualDom$attribute('orient');
var _elm_lang$svg$Svg_Attributes$order = _elm_lang$virtual_dom$VirtualDom$attribute('order');
var _elm_lang$svg$Svg_Attributes$operator = _elm_lang$virtual_dom$VirtualDom$attribute('operator');
var _elm_lang$svg$Svg_Attributes$offset = _elm_lang$virtual_dom$VirtualDom$attribute('offset');
var _elm_lang$svg$Svg_Attributes$numOctaves = _elm_lang$virtual_dom$VirtualDom$attribute('numOctaves');
var _elm_lang$svg$Svg_Attributes$name = _elm_lang$virtual_dom$VirtualDom$attribute('name');
var _elm_lang$svg$Svg_Attributes$mode = _elm_lang$virtual_dom$VirtualDom$attribute('mode');
var _elm_lang$svg$Svg_Attributes$min = _elm_lang$virtual_dom$VirtualDom$attribute('min');
var _elm_lang$svg$Svg_Attributes$method = _elm_lang$virtual_dom$VirtualDom$attribute('method');
var _elm_lang$svg$Svg_Attributes$media = _elm_lang$virtual_dom$VirtualDom$attribute('media');
var _elm_lang$svg$Svg_Attributes$max = _elm_lang$virtual_dom$VirtualDom$attribute('max');
var _elm_lang$svg$Svg_Attributes$mathematical = _elm_lang$virtual_dom$VirtualDom$attribute('mathematical');
var _elm_lang$svg$Svg_Attributes$maskUnits = _elm_lang$virtual_dom$VirtualDom$attribute('maskUnits');
var _elm_lang$svg$Svg_Attributes$maskContentUnits = _elm_lang$virtual_dom$VirtualDom$attribute('maskContentUnits');
var _elm_lang$svg$Svg_Attributes$markerWidth = _elm_lang$virtual_dom$VirtualDom$attribute('markerWidth');
var _elm_lang$svg$Svg_Attributes$markerUnits = _elm_lang$virtual_dom$VirtualDom$attribute('markerUnits');
var _elm_lang$svg$Svg_Attributes$markerHeight = _elm_lang$virtual_dom$VirtualDom$attribute('markerHeight');
var _elm_lang$svg$Svg_Attributes$local = _elm_lang$virtual_dom$VirtualDom$attribute('local');
var _elm_lang$svg$Svg_Attributes$limitingConeAngle = _elm_lang$virtual_dom$VirtualDom$attribute('limitingConeAngle');
var _elm_lang$svg$Svg_Attributes$lengthAdjust = _elm_lang$virtual_dom$VirtualDom$attribute('lengthAdjust');
var _elm_lang$svg$Svg_Attributes$lang = _elm_lang$virtual_dom$VirtualDom$attribute('lang');
var _elm_lang$svg$Svg_Attributes$keyTimes = _elm_lang$virtual_dom$VirtualDom$attribute('keyTimes');
var _elm_lang$svg$Svg_Attributes$keySplines = _elm_lang$virtual_dom$VirtualDom$attribute('keySplines');
var _elm_lang$svg$Svg_Attributes$keyPoints = _elm_lang$virtual_dom$VirtualDom$attribute('keyPoints');
var _elm_lang$svg$Svg_Attributes$kernelUnitLength = _elm_lang$virtual_dom$VirtualDom$attribute('kernelUnitLength');
var _elm_lang$svg$Svg_Attributes$kernelMatrix = _elm_lang$virtual_dom$VirtualDom$attribute('kernelMatrix');
var _elm_lang$svg$Svg_Attributes$k4 = _elm_lang$virtual_dom$VirtualDom$attribute('k4');
var _elm_lang$svg$Svg_Attributes$k3 = _elm_lang$virtual_dom$VirtualDom$attribute('k3');
var _elm_lang$svg$Svg_Attributes$k2 = _elm_lang$virtual_dom$VirtualDom$attribute('k2');
var _elm_lang$svg$Svg_Attributes$k1 = _elm_lang$virtual_dom$VirtualDom$attribute('k1');
var _elm_lang$svg$Svg_Attributes$k = _elm_lang$virtual_dom$VirtualDom$attribute('k');
var _elm_lang$svg$Svg_Attributes$intercept = _elm_lang$virtual_dom$VirtualDom$attribute('intercept');
var _elm_lang$svg$Svg_Attributes$in2 = _elm_lang$virtual_dom$VirtualDom$attribute('in2');
var _elm_lang$svg$Svg_Attributes$in_ = _elm_lang$virtual_dom$VirtualDom$attribute('in');
var _elm_lang$svg$Svg_Attributes$ideographic = _elm_lang$virtual_dom$VirtualDom$attribute('ideographic');
var _elm_lang$svg$Svg_Attributes$id = _elm_lang$virtual_dom$VirtualDom$attribute('id');
var _elm_lang$svg$Svg_Attributes$horizOriginY = _elm_lang$virtual_dom$VirtualDom$attribute('horiz-origin-y');
var _elm_lang$svg$Svg_Attributes$horizOriginX = _elm_lang$virtual_dom$VirtualDom$attribute('horiz-origin-x');
var _elm_lang$svg$Svg_Attributes$horizAdvX = _elm_lang$virtual_dom$VirtualDom$attribute('horiz-adv-x');
var _elm_lang$svg$Svg_Attributes$height = _elm_lang$virtual_dom$VirtualDom$attribute('height');
var _elm_lang$svg$Svg_Attributes$hanging = _elm_lang$virtual_dom$VirtualDom$attribute('hanging');
var _elm_lang$svg$Svg_Attributes$gradientUnits = _elm_lang$virtual_dom$VirtualDom$attribute('gradientUnits');
var _elm_lang$svg$Svg_Attributes$gradientTransform = _elm_lang$virtual_dom$VirtualDom$attribute('gradientTransform');
var _elm_lang$svg$Svg_Attributes$glyphRef = _elm_lang$virtual_dom$VirtualDom$attribute('glyphRef');
var _elm_lang$svg$Svg_Attributes$glyphName = _elm_lang$virtual_dom$VirtualDom$attribute('glyph-name');
var _elm_lang$svg$Svg_Attributes$g2 = _elm_lang$virtual_dom$VirtualDom$attribute('g2');
var _elm_lang$svg$Svg_Attributes$g1 = _elm_lang$virtual_dom$VirtualDom$attribute('g1');
var _elm_lang$svg$Svg_Attributes$fy = _elm_lang$virtual_dom$VirtualDom$attribute('fy');
var _elm_lang$svg$Svg_Attributes$fx = _elm_lang$virtual_dom$VirtualDom$attribute('fx');
var _elm_lang$svg$Svg_Attributes$from = _elm_lang$virtual_dom$VirtualDom$attribute('from');
var _elm_lang$svg$Svg_Attributes$format = _elm_lang$virtual_dom$VirtualDom$attribute('format');
var _elm_lang$svg$Svg_Attributes$filterUnits = _elm_lang$virtual_dom$VirtualDom$attribute('filterUnits');
var _elm_lang$svg$Svg_Attributes$filterRes = _elm_lang$virtual_dom$VirtualDom$attribute('filterRes');
var _elm_lang$svg$Svg_Attributes$externalResourcesRequired = _elm_lang$virtual_dom$VirtualDom$attribute('externalResourcesRequired');
var _elm_lang$svg$Svg_Attributes$exponent = _elm_lang$virtual_dom$VirtualDom$attribute('exponent');
var _elm_lang$svg$Svg_Attributes$end = _elm_lang$virtual_dom$VirtualDom$attribute('end');
var _elm_lang$svg$Svg_Attributes$elevation = _elm_lang$virtual_dom$VirtualDom$attribute('elevation');
var _elm_lang$svg$Svg_Attributes$edgeMode = _elm_lang$virtual_dom$VirtualDom$attribute('edgeMode');
var _elm_lang$svg$Svg_Attributes$dy = _elm_lang$virtual_dom$VirtualDom$attribute('dy');
var _elm_lang$svg$Svg_Attributes$dx = _elm_lang$virtual_dom$VirtualDom$attribute('dx');
var _elm_lang$svg$Svg_Attributes$dur = _elm_lang$virtual_dom$VirtualDom$attribute('dur');
var _elm_lang$svg$Svg_Attributes$divisor = _elm_lang$virtual_dom$VirtualDom$attribute('divisor');
var _elm_lang$svg$Svg_Attributes$diffuseConstant = _elm_lang$virtual_dom$VirtualDom$attribute('diffuseConstant');
var _elm_lang$svg$Svg_Attributes$descent = _elm_lang$virtual_dom$VirtualDom$attribute('descent');
var _elm_lang$svg$Svg_Attributes$decelerate = _elm_lang$virtual_dom$VirtualDom$attribute('decelerate');
var _elm_lang$svg$Svg_Attributes$d = _elm_lang$virtual_dom$VirtualDom$attribute('d');
var _elm_lang$svg$Svg_Attributes$cy = _elm_lang$virtual_dom$VirtualDom$attribute('cy');
var _elm_lang$svg$Svg_Attributes$cx = _elm_lang$virtual_dom$VirtualDom$attribute('cx');
var _elm_lang$svg$Svg_Attributes$contentStyleType = _elm_lang$virtual_dom$VirtualDom$attribute('contentStyleType');
var _elm_lang$svg$Svg_Attributes$contentScriptType = _elm_lang$virtual_dom$VirtualDom$attribute('contentScriptType');
var _elm_lang$svg$Svg_Attributes$clipPathUnits = _elm_lang$virtual_dom$VirtualDom$attribute('clipPathUnits');
var _elm_lang$svg$Svg_Attributes$class = _elm_lang$virtual_dom$VirtualDom$attribute('class');
var _elm_lang$svg$Svg_Attributes$capHeight = _elm_lang$virtual_dom$VirtualDom$attribute('cap-height');
var _elm_lang$svg$Svg_Attributes$calcMode = _elm_lang$virtual_dom$VirtualDom$attribute('calcMode');
var _elm_lang$svg$Svg_Attributes$by = _elm_lang$virtual_dom$VirtualDom$attribute('by');
var _elm_lang$svg$Svg_Attributes$bias = _elm_lang$virtual_dom$VirtualDom$attribute('bias');
var _elm_lang$svg$Svg_Attributes$begin = _elm_lang$virtual_dom$VirtualDom$attribute('begin');
var _elm_lang$svg$Svg_Attributes$bbox = _elm_lang$virtual_dom$VirtualDom$attribute('bbox');
var _elm_lang$svg$Svg_Attributes$baseProfile = _elm_lang$virtual_dom$VirtualDom$attribute('baseProfile');
var _elm_lang$svg$Svg_Attributes$baseFrequency = _elm_lang$virtual_dom$VirtualDom$attribute('baseFrequency');
var _elm_lang$svg$Svg_Attributes$azimuth = _elm_lang$virtual_dom$VirtualDom$attribute('azimuth');
var _elm_lang$svg$Svg_Attributes$autoReverse = _elm_lang$virtual_dom$VirtualDom$attribute('autoReverse');
var _elm_lang$svg$Svg_Attributes$attributeType = _elm_lang$virtual_dom$VirtualDom$attribute('attributeType');
var _elm_lang$svg$Svg_Attributes$attributeName = _elm_lang$virtual_dom$VirtualDom$attribute('attributeName');
var _elm_lang$svg$Svg_Attributes$ascent = _elm_lang$virtual_dom$VirtualDom$attribute('ascent');
var _elm_lang$svg$Svg_Attributes$arabicForm = _elm_lang$virtual_dom$VirtualDom$attribute('arabic-form');
var _elm_lang$svg$Svg_Attributes$amplitude = _elm_lang$virtual_dom$VirtualDom$attribute('amplitude');
var _elm_lang$svg$Svg_Attributes$allowReorder = _elm_lang$virtual_dom$VirtualDom$attribute('allowReorder');
var _elm_lang$svg$Svg_Attributes$alphabetic = _elm_lang$virtual_dom$VirtualDom$attribute('alphabetic');
var _elm_lang$svg$Svg_Attributes$additive = _elm_lang$virtual_dom$VirtualDom$attribute('additive');
var _elm_lang$svg$Svg_Attributes$accumulate = _elm_lang$virtual_dom$VirtualDom$attribute('accumulate');
var _elm_lang$svg$Svg_Attributes$accelerate = _elm_lang$virtual_dom$VirtualDom$attribute('accelerate');
var _elm_lang$svg$Svg_Attributes$accentHeight = _elm_lang$virtual_dom$VirtualDom$attribute('accent-height');

var _abadi199$datetimepicker$AnalogTimePickerPanel$updateTimeIndicator = F2(
	function (activeIndicator, time) {
		var _p0 = {ctor: '_Tuple4', _0: activeIndicator, _1: time.hour, _2: time.minute, _3: time.amPm};
		if (_p0._0.ctor === 'Just') {
			switch (_p0._0._0.ctor) {
				case 'HourIndicator':
					if (_p0._2.ctor === 'Nothing') {
						return _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$MinuteIndicator);
					} else {
						if (_p0._3.ctor === 'Nothing') {
							return _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$AMPMIndicator);
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				case 'MinuteIndicator':
					if (_p0._3.ctor === 'Nothing') {
						return _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$AMPMIndicator);
					} else {
						if (_p0._1.ctor === 'Nothing') {
							return _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$HourIndicator);
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				default:
					if (_p0._1.ctor === 'Nothing') {
						return _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$HourIndicator);
					} else {
						if (_p0._2.ctor === 'Nothing') {
							return _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$MinuteIndicator);
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
			}
		} else {
			if (_p0._1.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$HourIndicator);
			} else {
				if (_p0._2.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$MinuteIndicator);
				} else {
					if (_p0._3.ctor === 'Nothing') {
						return _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$AMPMIndicator);
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			}
		}
	});
var _abadi199$datetimepicker$AnalogTimePickerPanel$updateCurrentDate = function (_p1) {
	var _p2 = _p1;
	var _p4 = _p2._0;
	var _p3 = {ctor: '_Tuple3', _0: _p4.time.hour, _1: _p4.time.minute, _2: _p4.time.amPm};
	if ((((_p3.ctor === '_Tuple3') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) && (_p3._2.ctor === 'Just')) {
		return _elm_lang$core$Maybe$Just(
			A3(_abadi199$datetimepicker$DateTimePicker_DateUtils$toTime, _p3._0._0, _p3._1._0, _p3._2._0));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _abadi199$datetimepicker$AnalogTimePickerPanel$amPmPickerHandler = F4(
	function (config, _p5, currentDate, amPm) {
		var _p6 = _p5;
		var _p7 = _p6._0;
		var time = _p7.time;
		var updatedTime = _elm_lang$core$Native_Utils.update(
			time,
			{
				amPm: _elm_lang$core$Maybe$Just(amPm)
			});
		var updatedState = _abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
			_elm_lang$core$Native_Utils.update(
				_p7,
				{
					time: updatedTime,
					activeTimeIndicator: A2(_abadi199$datetimepicker$AnalogTimePickerPanel$updateTimeIndicator, _p7.activeTimeIndicator, updatedTime)
				}));
		return A2(
			config.onChange,
			updatedState,
			_abadi199$datetimepicker$AnalogTimePickerPanel$updateCurrentDate(updatedState));
	});
var _abadi199$datetimepicker$AnalogTimePickerPanel$timeIndicatorHandler = F4(
	function (config, _p8, currentDate, timeIndicator) {
		var _p9 = _p8;
		var _p11 = _p9._0;
		var currentAngle = function () {
			var _p10 = {ctor: '_Tuple3', _0: timeIndicator, _1: _p11.time.hour, _2: _p11.time.minute};
			_v5_2:
			do {
				switch (_p10._0.ctor) {
					case 'HourIndicator':
						if (_p10._1.ctor === 'Just') {
							return _abadi199$datetimepicker$DateTimePicker_ClockUtils$hourToAngle(_p10._1._0);
						} else {
							break _v5_2;
						}
					case 'MinuteIndicator':
						if (_p10._2.ctor === 'Just') {
							return _abadi199$datetimepicker$DateTimePicker_ClockUtils$minuteToAngle(_p10._2._0);
						} else {
							break _v5_2;
						}
					default:
						break _v5_2;
				}
			} while(false);
			return _elm_lang$core$Maybe$Nothing;
		}();
		var updatedActiveTimeIndicator = _elm_lang$core$Native_Utils.eq(
			_p11.activeTimeIndicator,
			_elm_lang$core$Maybe$Just(timeIndicator)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(timeIndicator);
		var updatedState = _elm_lang$core$Native_Utils.update(
			_p11,
			{activeTimeIndicator: updatedActiveTimeIndicator, currentAngle: currentAngle});
		return A2(
			config.onChange,
			_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(updatedState),
			currentDate);
	});
var _abadi199$datetimepicker$AnalogTimePickerPanel$mouseDownHandler = F3(
	function (_p12, date, onChange) {
		var _p13 = _p12;
		var _p14 = _p13._0;
		var updatedState = _abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
			_elm_lang$core$Native_Utils.update(
				_p14,
				{
					activeTimeIndicator: A2(_abadi199$datetimepicker$AnalogTimePickerPanel$updateTimeIndicator, _p14.activeTimeIndicator, _p14.time)
				}));
		var updatedDate = _abadi199$datetimepicker$AnalogTimePickerPanel$updateCurrentDate(
			_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(_p14));
		return A2(onChange, updatedState, updatedDate);
	});
var _abadi199$datetimepicker$AnalogTimePickerPanel$drawArrow = F4(
	function (onChange, state, date, point) {
		return A2(
			_elm_lang$svg$Svg$line,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$x1('100'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$y1('100'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x2(
							_elm_lang$core$Basics$toString(point.x)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y2(
								_elm_lang$core$Basics$toString(point.y)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2px'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$stroke('#aaa'),
									_1: {
										ctor: '::',
										_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
											A3(_abadi199$datetimepicker$AnalogTimePickerPanel$mouseDownHandler, state, date, onChange)),
										_1: {
											ctor: '::',
											_0: _abadi199$datetimepicker$DateTimePicker_Events$onPointerUp(
												A3(_abadi199$datetimepicker$AnalogTimePickerPanel$mouseDownHandler, state, date, onChange)),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'});
	});
var _abadi199$datetimepicker$AnalogTimePickerPanel$axisPoint = A2(_abadi199$datetimepicker$DateTimePicker_Geometry$Point, 200, 100);
var _abadi199$datetimepicker$AnalogTimePickerPanel$originPoint = A2(_abadi199$datetimepicker$DateTimePicker_Geometry$Point, 100, 100);
var _abadi199$datetimepicker$AnalogTimePickerPanel$updateHourState = F3(
	function (_p15, date, moveData) {
		var _p16 = _p15;
		var _p21 = _p16._0;
		var updateTime = F2(
			function (time, hour) {
				return _elm_lang$core$Native_Utils.update(
					time,
					{
						hour: A2(
							_elm_lang$core$Maybe$andThen,
							function (_p17) {
								return _elm_lang$core$Result$toMaybe(
									_elm_lang$core$String$toInt(_p17));
							},
							hour)
					});
			});
		var currentAngle = A3(
			_abadi199$datetimepicker$DateTimePicker_Geometry$calculateAngle,
			_abadi199$datetimepicker$AnalogTimePickerPanel$originPoint,
			_abadi199$datetimepicker$AnalogTimePickerPanel$axisPoint,
			A2(_abadi199$datetimepicker$DateTimePicker_Geometry$Point, moveData.offsetX, moveData.offsetY));
		var closestHour = A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$Tuple$first,
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$sortBy,
					_elm_lang$core$Tuple$second,
					A2(
						_elm_lang$core$List$map,
						function (_p18) {
							var _p19 = _p18;
							var _p20 = _p19._1;
							return {
								ctor: '_Tuple2',
								_0: {ctor: '_Tuple2', _0: _p19._0, _1: _p20},
								_1: _elm_lang$core$Basics$abs(_p20 - currentAngle)
							};
						},
						_elm_lang$core$Dict$toList(_abadi199$datetimepicker$DateTimePicker_ClockUtils$hours)))));
		return _abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
			_elm_lang$core$Native_Utils.update(
				_p21,
				{
					currentAngle: A2(_elm_lang$core$Maybe$map, _elm_lang$core$Tuple$second, closestHour),
					time: A2(
						updateTime,
						_p21.time,
						A2(_elm_lang$core$Maybe$map, _elm_lang$core$Tuple$first, closestHour))
				}));
	});
var _abadi199$datetimepicker$AnalogTimePickerPanel$updateMinuteState = F3(
	function (_p22, date, moveData) {
		var _p23 = _p22;
		var _p28 = _p23._0;
		var updateTime = F2(
			function (time, minute) {
				return _elm_lang$core$Native_Utils.update(
					time,
					{
						minute: A2(
							_elm_lang$core$Maybe$andThen,
							function (_p24) {
								return _elm_lang$core$Result$toMaybe(
									_elm_lang$core$String$toInt(_p24));
							},
							minute)
					});
			});
		var currentAngle = A3(
			_abadi199$datetimepicker$DateTimePicker_Geometry$calculateAngle,
			_abadi199$datetimepicker$AnalogTimePickerPanel$originPoint,
			_abadi199$datetimepicker$AnalogTimePickerPanel$axisPoint,
			A2(_abadi199$datetimepicker$DateTimePicker_Geometry$Point, moveData.offsetX, moveData.offsetY));
		var closestMinute = A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$Tuple$first,
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$sortBy,
					_elm_lang$core$Tuple$second,
					A2(
						_elm_lang$core$List$map,
						function (_p25) {
							var _p26 = _p25;
							var _p27 = _p26._1;
							return {
								ctor: '_Tuple2',
								_0: {ctor: '_Tuple2', _0: _p26._0, _1: _p27},
								_1: _elm_lang$core$Basics$abs(_p27 - currentAngle)
							};
						},
						_elm_lang$core$Dict$toList(_abadi199$datetimepicker$DateTimePicker_ClockUtils$minutes)))));
		return _abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
			_elm_lang$core$Native_Utils.update(
				_p28,
				{
					currentAngle: A2(_elm_lang$core$Maybe$map, _elm_lang$core$Tuple$second, closestMinute),
					time: A2(
						updateTime,
						_p28.time,
						A2(_elm_lang$core$Maybe$map, _elm_lang$core$Tuple$first, closestMinute))
				}));
	});
var _abadi199$datetimepicker$AnalogTimePickerPanel$mouseOverHandler = F4(
	function (_p29, date, onChange, moveData) {
		var _p30 = _p29;
		var _p32 = _p30._0;
		var decoder = function (updatedState) {
			return _elm_lang$core$Json_Decode$succeed(
				A2(onChange, updatedState, date));
		};
		var _p31 = _p32.activeTimeIndicator;
		_v12_2:
		do {
			if (_p31.ctor === 'Just') {
				switch (_p31._0.ctor) {
					case 'HourIndicator':
						return decoder(
							A3(
								_abadi199$datetimepicker$AnalogTimePickerPanel$updateHourState,
								_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(_p32),
								date,
								moveData));
					case 'MinuteIndicator':
						return decoder(
							A3(
								_abadi199$datetimepicker$AnalogTimePickerPanel$updateMinuteState,
								_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(_p32),
								date,
								moveData));
					default:
						break _v12_2;
				}
			} else {
				break _v12_2;
			}
		} while(false);
		return decoder(
			_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(_p32));
	});
var _abadi199$datetimepicker$AnalogTimePickerPanel$clockFace = F4(
	function (onChange, state, date, _p33) {
		var _p34 = _p33;
		var point = A3(_abadi199$datetimepicker$DateTimePicker_Geometry$calculateArrowPoint, _abadi199$datetimepicker$AnalogTimePickerPanel$originPoint, 85, _p34._1);
		return A2(
			_elm_lang$svg$Svg$text_,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$x(
					_elm_lang$core$Basics$toString(point.x)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$y(
						_elm_lang$core$Basics$toString(point.y)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$textAnchor('middle'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$dominantBaseline('central'),
							_1: {
								ctor: '::',
								_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
									A3(_abadi199$datetimepicker$AnalogTimePickerPanel$mouseDownHandler, state, date, onChange)),
								_1: {
									ctor: '::',
									_0: _abadi199$datetimepicker$DateTimePicker_Events$onPointerUp(
										A3(_abadi199$datetimepicker$AnalogTimePickerPanel$mouseDownHandler, state, date, onChange)),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(_p34._0),
				_1: {ctor: '[]'}
			});
	});
var _abadi199$datetimepicker$AnalogTimePickerPanel$minuteArrowLength = 70;
var _abadi199$datetimepicker$AnalogTimePickerPanel$currentTime = F3(
	function (onChange, _p35, date) {
		var _p36 = _p35;
		var _p41 = _p36._0;
		var drawMinute = function (minute) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				_elm_lang$html$Html$text(''),
				A2(
					_elm_lang$core$Maybe$map,
					function (_p37) {
						return A4(
							_abadi199$datetimepicker$AnalogTimePickerPanel$drawArrow,
							onChange,
							_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(_p41),
							date,
							A3(_abadi199$datetimepicker$DateTimePicker_Geometry$calculateArrowPoint, _abadi199$datetimepicker$AnalogTimePickerPanel$originPoint, _abadi199$datetimepicker$AnalogTimePickerPanel$minuteArrowLength, _p37));
					},
					A2(
						_elm_lang$core$Dict$get,
						_elm_lang$core$Basics$toString(minute),
						_abadi199$datetimepicker$DateTimePicker_ClockUtils$minutes)));
		};
		var hourArrowLength = 50;
		var drawHour = F2(
			function (hour, minute) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$html$Html$text(''),
					A2(
						_elm_lang$core$Maybe$map,
						function (_p38) {
							return A4(
								_abadi199$datetimepicker$AnalogTimePickerPanel$drawArrow,
								onChange,
								_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(_p41),
								date,
								A3(_abadi199$datetimepicker$DateTimePicker_Geometry$calculateArrowPoint, _abadi199$datetimepicker$AnalogTimePickerPanel$originPoint, hourArrowLength, _p38));
						},
						A2(
							_elm_lang$core$Maybe$map,
							A2(
								_elm_lang$core$Basics$flip,
								F2(
									function (x, y) {
										return x - y;
									}),
								(_elm_lang$core$Basics$toFloat(minute) * _elm_lang$core$Basics$pi) / 360),
							A2(
								_elm_lang$core$Dict$get,
								_elm_lang$core$Basics$toString(hour),
								_abadi199$datetimepicker$DateTimePicker_ClockUtils$hours))));
			});
		var time = _p41.time;
		var _p39 = {ctor: '_Tuple4', _0: _p41.activeTimeIndicator, _1: time.hour, _2: time.minute, _3: time.amPm};
		if (((((_p39.ctor === '_Tuple4') && (_p39._0.ctor === 'Nothing')) && (_p39._1.ctor === 'Just')) && (_p39._2.ctor === 'Just')) && (_p39._3.ctor === 'Just')) {
			var _p40 = _p39._2._0;
			return A2(
				_elm_lang$svg$Svg$g,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(drawHour, _p39._1._0, _p40),
					_1: {
						ctor: '::',
						_0: drawMinute(_p40),
						_1: {ctor: '[]'}
					}
				});
		} else {
			return _elm_lang$html$Html$text('');
		}
	});
var _abadi199$datetimepicker$AnalogTimePickerPanel$hourArrowLength = 50;
var _abadi199$datetimepicker$AnalogTimePickerPanel$arrow = F3(
	function (onChange, _p42, date) {
		var _p43 = _p42;
		var _p48 = _p43._0;
		var isJust = function (maybe) {
			var _p44 = maybe;
			if (_p44.ctor === 'Just') {
				return true;
			} else {
				return false;
			}
		};
		var shouldDrawArrow = function () {
			var _p45 = _p48.activeTimeIndicator;
			_v18_2:
			do {
				if (_p45.ctor === 'Just') {
					switch (_p45._0.ctor) {
						case 'HourIndicator':
							return isJust(_p48.time.hour);
						case 'MinuteIndicator':
							return isJust(_p48.time.minute);
						default:
							break _v18_2;
					}
				} else {
					break _v18_2;
				}
			} while(false);
			return false;
		}();
		var length = function () {
			var _p46 = _p48.activeTimeIndicator;
			_v19_2:
			do {
				if (_p46.ctor === 'Just') {
					switch (_p46._0.ctor) {
						case 'HourIndicator':
							return _abadi199$datetimepicker$AnalogTimePickerPanel$hourArrowLength;
						case 'MinuteIndicator':
							return _abadi199$datetimepicker$AnalogTimePickerPanel$minuteArrowLength;
						default:
							break _v19_2;
					}
				} else {
					break _v19_2;
				}
			} while(false);
			return 0;
		}();
		var arrowPoint = function (angle) {
			return A3(_abadi199$datetimepicker$DateTimePicker_Geometry$calculateArrowPoint, _abadi199$datetimepicker$AnalogTimePickerPanel$originPoint, length, angle);
		};
		var _p47 = _p48.currentAngle;
		if (_p47.ctor === 'Nothing') {
			return _elm_lang$html$Html$text('');
		} else {
			return shouldDrawArrow ? A4(
				_abadi199$datetimepicker$AnalogTimePickerPanel$drawArrow,
				onChange,
				_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(_p48),
				date,
				arrowPoint(_p47._0)) : _elm_lang$html$Html$text('');
		}
	});
var _abadi199$datetimepicker$AnalogTimePickerPanel$clock = F4(
	function (config, onChange, _p49, date) {
		var _p50 = _p49;
		var _p52 = _p50;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: config.$class(
					{
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$AnalogClock,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$svg,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$width('200'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$height('200'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 200 200'),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$circle,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$cx('100'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$cy('100'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$r('100'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#eee'),
											_1: {
												ctor: '::',
												_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
													A3(_abadi199$datetimepicker$AnalogTimePickerPanel$mouseDownHandler, _p52, date, onChange)),
												_1: {
													ctor: '::',
													_0: _abadi199$datetimepicker$DateTimePicker_Events$onPointerUp(
														A3(_abadi199$datetimepicker$AnalogTimePickerPanel$mouseDownHandler, _p52, date, onChange)),
													_1: {
														ctor: '::',
														_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseMoveWithPosition(
															A3(_abadi199$datetimepicker$AnalogTimePickerPanel$mouseOverHandler, _p52, date, onChange)),
														_1: {
															ctor: '::',
															_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchMovePreventDefault(
																A2(onChange, _p52, date)),
															_1: {
																ctor: '::',
																_0: _abadi199$datetimepicker$DateTimePicker_Events$onPointerMoveWithPosition(
																	A3(_abadi199$datetimepicker$AnalogTimePickerPanel$mouseOverHandler, _p52, date, onChange)),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: function () {
								var _p51 = _p50._0.activeTimeIndicator;
								if ((_p51.ctor === 'Just') && (_p51._0.ctor === 'MinuteIndicator')) {
									return A2(
										_elm_lang$svg$Svg$g,
										{ctor: '[]'},
										A2(
											_elm_lang$core$List$map,
											A3(_abadi199$datetimepicker$AnalogTimePickerPanel$clockFace, onChange, _p52, date),
											_elm_lang$core$Dict$toList(_abadi199$datetimepicker$DateTimePicker_ClockUtils$minutesPerFive)));
								} else {
									return A2(
										_elm_lang$svg$Svg$g,
										{ctor: '[]'},
										A2(
											_elm_lang$core$List$map,
											A3(_abadi199$datetimepicker$AnalogTimePickerPanel$clockFace, onChange, _p52, date),
											_elm_lang$core$Dict$toList(_abadi199$datetimepicker$DateTimePicker_ClockUtils$hours)));
								}
							}(),
							_1: {
								ctor: '::',
								_0: A3(_abadi199$datetimepicker$AnalogTimePickerPanel$arrow, onChange, _p52, date),
								_1: {
									ctor: '::',
									_0: A3(_abadi199$datetimepicker$AnalogTimePickerPanel$currentTime, onChange, _p52, date),
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _abadi199$datetimepicker$AnalogTimePickerPanel$view = F3(
	function (config, _p53, currentDate) {
		var _p54 = _p53;
		var _p61 = _p54._0;
		var _p60 = _p54;
		var amPmPicker = function (config) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: config.$class(
						{
							ctor: '::',
							_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$AMPMPicker,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
								A4(_abadi199$datetimepicker$AnalogTimePickerPanel$amPmPickerHandler, config, _p60, currentDate, 'AM')),
							_1: {
								ctor: '::',
								_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
									A4(_abadi199$datetimepicker$AnalogTimePickerPanel$amPmPickerHandler, config, _p60, currentDate, 'AM')),
								_1: {
									ctor: '::',
									_0: function () {
										var _p55 = _p61.time.amPm;
										if ((_p55.ctor === 'Just') && (_p55._0 === 'AM')) {
											return config.$class(
												{
													ctor: '::',
													_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$AM,
													_1: {
														ctor: '::',
														_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$SelectedAmPm,
														_1: {ctor: '[]'}
													}
												});
										} else {
											return config.$class(
												{
													ctor: '::',
													_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$AM,
													_1: {ctor: '[]'}
												});
										}
									}(),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('AM'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
									A4(_abadi199$datetimepicker$AnalogTimePickerPanel$amPmPickerHandler, config, _p60, currentDate, 'PM')),
								_1: {
									ctor: '::',
									_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
										A4(_abadi199$datetimepicker$AnalogTimePickerPanel$amPmPickerHandler, config, _p60, currentDate, 'PM')),
									_1: {
										ctor: '::',
										_0: function () {
											var _p56 = _p61.time.amPm;
											if ((_p56.ctor === 'Just') && (_p56._0 === 'PM')) {
												return config.$class(
													{
														ctor: '::',
														_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$PM,
														_1: {
															ctor: '::',
															_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$SelectedAmPm,
															_1: {ctor: '[]'}
														}
													});
											} else {
												return config.$class(
													{
														ctor: '::',
														_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$PM,
														_1: {ctor: '[]'}
													});
											}
										}(),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('PM'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				});
		};
		var isActive = function (timeIndicator) {
			return _elm_lang$core$Native_Utils.eq(
				_p61.activeTimeIndicator,
				_elm_lang$core$Maybe$Just(timeIndicator)) ? {
				ctor: '::',
				_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$Active,
				_1: {ctor: '[]'}
			} : {ctor: '[]'};
		};
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: config.$class(
					{
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$TimePickerDialog,
						_1: {
							ctor: '::',
							_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$AnalogTime,
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: config.$class(
							{
								ctor: '::',
								_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$Header,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
									A4(_abadi199$datetimepicker$AnalogTimePickerPanel$timeIndicatorHandler, config, _p60, currentDate, _abadi199$datetimepicker$DateTimePicker_Internal$HourIndicator)),
								_1: {
									ctor: '::',
									_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
										A4(_abadi199$datetimepicker$AnalogTimePickerPanel$timeIndicatorHandler, config, _p60, currentDate, _abadi199$datetimepicker$DateTimePicker_Internal$HourIndicator)),
									_1: {
										ctor: '::',
										_0: config.$class(
											{
												ctor: '::',
												_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$Hour,
												_1: isActive(_abadi199$datetimepicker$DateTimePicker_Internal$HourIndicator)
											}),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(
										_elm_lang$core$Maybe$withDefault,
										'--',
										A2(
											_elm_lang$core$Maybe$map,
											function (_p57) {
												return _abadi199$datetimepicker$DateTimePicker_DateUtils$padding(
													_elm_lang$core$Basics$toString(_p57));
											},
											_p61.time.hour))),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: config.$class(
										{
											ctor: '::',
											_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$Separator,
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(' : '),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
											A4(_abadi199$datetimepicker$AnalogTimePickerPanel$timeIndicatorHandler, config, _p60, currentDate, _abadi199$datetimepicker$DateTimePicker_Internal$MinuteIndicator)),
										_1: {
											ctor: '::',
											_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
												A4(_abadi199$datetimepicker$AnalogTimePickerPanel$timeIndicatorHandler, config, _p60, currentDate, _abadi199$datetimepicker$DateTimePicker_Internal$MinuteIndicator)),
											_1: {
												ctor: '::',
												_0: config.$class(
													{
														ctor: '::',
														_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$Minute,
														_1: isActive(_abadi199$datetimepicker$DateTimePicker_Internal$MinuteIndicator)
													}),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(
												_elm_lang$core$Maybe$withDefault,
												'--',
												A2(
													_elm_lang$core$Maybe$map,
													function (_p58) {
														return _abadi199$datetimepicker$DateTimePicker_DateUtils$padding(
															_elm_lang$core$Basics$toString(_p58));
													},
													_p61.time.minute))),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
												A4(_abadi199$datetimepicker$AnalogTimePickerPanel$timeIndicatorHandler, config, _p60, currentDate, _abadi199$datetimepicker$DateTimePicker_Internal$AMPMIndicator)),
											_1: {
												ctor: '::',
												_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
													A4(_abadi199$datetimepicker$AnalogTimePickerPanel$timeIndicatorHandler, config, _p60, currentDate, _abadi199$datetimepicker$DateTimePicker_Internal$AMPMIndicator)),
												_1: {
													ctor: '::',
													_0: config.$class(
														{
															ctor: '::',
															_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$AMPM,
															_1: isActive(_abadi199$datetimepicker$DateTimePicker_Internal$AMPMIndicator)
														}),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_elm_lang$core$Maybe$withDefault, '--', _p61.time.amPm)),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: config.$class(
								{
									ctor: '::',
									_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$Body,
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: function () {
								var _p59 = _p61.activeTimeIndicator;
								if ((_p59.ctor === 'Just') && (_p59._0.ctor === 'AMPMIndicator')) {
									return amPmPicker(config);
								} else {
									return A4(_abadi199$datetimepicker$AnalogTimePickerPanel$clock, config, config.onChange, _p60, currentDate);
								}
							}(),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});

var _abadi199$datetimepicker$DateTimePicker_Svg$doubleArrow = function (orientation) {
	var rotation = function () {
		var _p0 = orientation;
		if (_p0.ctor === 'DoubleRight') {
			return '0';
		} else {
			return '180';
		}
	}();
	return A2(
		_elm_lang$svg$Svg$svg,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('16'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$height('12'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 32 16'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$style(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'transform: rotate(',
								A2(_elm_lang$core$Basics_ops['++'], rotation, 'deg);'))),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$polygon,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$points('0 0, 0 20, 16 10'),
					_1: {ctor: '[]'}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$polygon,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$points('16 0, 16 20, 32 10'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		});
};
var _abadi199$datetimepicker$DateTimePicker_Svg$arrow = function (orientation) {
	var rotation = function () {
		var _p1 = orientation;
		switch (_p1.ctor) {
			case 'Right':
				return '0';
			case 'Left':
				return '180';
			case 'Down':
				return '90';
			default:
				return '270';
		}
	}();
	return A2(
		_elm_lang$svg$Svg$svg,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('8'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$height('12'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 16 16'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$style(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'transform: rotate(',
								A2(_elm_lang$core$Basics_ops['++'], rotation, 'deg);'))),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$polygon,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$points('0 0, 0 20, 16 10'),
					_1: {ctor: '[]'}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _abadi199$datetimepicker$DateTimePicker_Svg$Right = {ctor: 'Right'};
var _abadi199$datetimepicker$DateTimePicker_Svg$rightArrow = _abadi199$datetimepicker$DateTimePicker_Svg$arrow(_abadi199$datetimepicker$DateTimePicker_Svg$Right);
var _abadi199$datetimepicker$DateTimePicker_Svg$Left = {ctor: 'Left'};
var _abadi199$datetimepicker$DateTimePicker_Svg$leftArrow = _abadi199$datetimepicker$DateTimePicker_Svg$arrow(_abadi199$datetimepicker$DateTimePicker_Svg$Left);
var _abadi199$datetimepicker$DateTimePicker_Svg$Down = {ctor: 'Down'};
var _abadi199$datetimepicker$DateTimePicker_Svg$downArrow = _abadi199$datetimepicker$DateTimePicker_Svg$arrow(_abadi199$datetimepicker$DateTimePicker_Svg$Down);
var _abadi199$datetimepicker$DateTimePicker_Svg$Up = {ctor: 'Up'};
var _abadi199$datetimepicker$DateTimePicker_Svg$upArrow = _abadi199$datetimepicker$DateTimePicker_Svg$arrow(_abadi199$datetimepicker$DateTimePicker_Svg$Up);
var _abadi199$datetimepicker$DateTimePicker_Svg$DoubleRight = {ctor: 'DoubleRight'};
var _abadi199$datetimepicker$DateTimePicker_Svg$doubleRightArrow = _abadi199$datetimepicker$DateTimePicker_Svg$doubleArrow(_abadi199$datetimepicker$DateTimePicker_Svg$DoubleRight);
var _abadi199$datetimepicker$DateTimePicker_Svg$DoubleLeft = {ctor: 'DoubleLeft'};
var _abadi199$datetimepicker$DateTimePicker_Svg$doubleLeftArrow = _abadi199$datetimepicker$DateTimePicker_Svg$doubleArrow(_abadi199$datetimepicker$DateTimePicker_Svg$DoubleLeft);

var _elm_lang$core$Set$foldr = F3(
	function (f, b, _p0) {
		var _p1 = _p0;
		return A3(
			_elm_lang$core$Dict$foldr,
			F3(
				function (k, _p2, b) {
					return A2(f, k, b);
				}),
			b,
			_p1._0);
	});
var _elm_lang$core$Set$foldl = F3(
	function (f, b, _p3) {
		var _p4 = _p3;
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, _p5, b) {
					return A2(f, k, b);
				}),
			b,
			_p4._0);
	});
var _elm_lang$core$Set$toList = function (_p6) {
	var _p7 = _p6;
	return _elm_lang$core$Dict$keys(_p7._0);
};
var _elm_lang$core$Set$size = function (_p8) {
	var _p9 = _p8;
	return _elm_lang$core$Dict$size(_p9._0);
};
var _elm_lang$core$Set$member = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Dict$member, k, _p11._0);
	});
var _elm_lang$core$Set$isEmpty = function (_p12) {
	var _p13 = _p12;
	return _elm_lang$core$Dict$isEmpty(_p13._0);
};
var _elm_lang$core$Set$Set_elm_builtin = function (a) {
	return {ctor: 'Set_elm_builtin', _0: a};
};
var _elm_lang$core$Set$empty = _elm_lang$core$Set$Set_elm_builtin(_elm_lang$core$Dict$empty);
var _elm_lang$core$Set$singleton = function (k) {
	return _elm_lang$core$Set$Set_elm_builtin(
		A2(
			_elm_lang$core$Dict$singleton,
			k,
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Set$insert = F2(
	function (k, _p14) {
		var _p15 = _p14;
		return _elm_lang$core$Set$Set_elm_builtin(
			A3(
				_elm_lang$core$Dict$insert,
				k,
				{ctor: '_Tuple0'},
				_p15._0));
	});
var _elm_lang$core$Set$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$insert, _elm_lang$core$Set$empty, xs);
};
var _elm_lang$core$Set$map = F2(
	function (f, s) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				f,
				_elm_lang$core$Set$toList(s)));
	});
var _elm_lang$core$Set$remove = F2(
	function (k, _p16) {
		var _p17 = _p16;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$remove, k, _p17._0));
	});
var _elm_lang$core$Set$union = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$union, _p20._0, _p21._0));
	});
var _elm_lang$core$Set$intersect = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p25 = _p22;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$intersect, _p24._0, _p25._0));
	});
var _elm_lang$core$Set$diff = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$diff, _p28._0, _p29._0));
	});
var _elm_lang$core$Set$filter = F2(
	function (p, _p30) {
		var _p31 = _p30;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(
				_elm_lang$core$Dict$filter,
				F2(
					function (k, _p32) {
						return p(k);
					}),
				_p31._0));
	});
var _elm_lang$core$Set$partition = F2(
	function (p, _p33) {
		var _p34 = _p33;
		var _p35 = A2(
			_elm_lang$core$Dict$partition,
			F2(
				function (k, _p36) {
					return p(k);
				}),
			_p34._0);
		var p1 = _p35._0;
		var p2 = _p35._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Set$Set_elm_builtin(p1),
			_1: _elm_lang$core$Set$Set_elm_builtin(p2)
		};
	});

var _elm_community$list_extra$List_Extra$greedyGroupsOfWithStep = F3(
	function (size, step, xs) {
		var okayXs = _elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(xs),
			0) > 0;
		var okayArgs = (_elm_lang$core$Native_Utils.cmp(size, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(step, 0) > 0);
		var xs_ = A2(_elm_lang$core$List$drop, step, xs);
		var group = A2(_elm_lang$core$List$take, size, xs);
		return (okayArgs && okayXs) ? {
			ctor: '::',
			_0: group,
			_1: A3(_elm_community$list_extra$List_Extra$greedyGroupsOfWithStep, size, step, xs_)
		} : {ctor: '[]'};
	});
var _elm_community$list_extra$List_Extra$greedyGroupsOf = F2(
	function (size, xs) {
		return A3(_elm_community$list_extra$List_Extra$greedyGroupsOfWithStep, size, size, xs);
	});
var _elm_community$list_extra$List_Extra$groupsOfWithStep = F3(
	function (size, step, xs) {
		var okayArgs = (_elm_lang$core$Native_Utils.cmp(size, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(step, 0) > 0);
		var xs_ = A2(_elm_lang$core$List$drop, step, xs);
		var group = A2(_elm_lang$core$List$take, size, xs);
		var okayLength = _elm_lang$core$Native_Utils.eq(
			size,
			_elm_lang$core$List$length(group));
		return (okayArgs && okayLength) ? {
			ctor: '::',
			_0: group,
			_1: A3(_elm_community$list_extra$List_Extra$groupsOfWithStep, size, step, xs_)
		} : {ctor: '[]'};
	});
var _elm_community$list_extra$List_Extra$groupsOf = F2(
	function (size, xs) {
		return A3(_elm_community$list_extra$List_Extra$groupsOfWithStep, size, size, xs);
	});
var _elm_community$list_extra$List_Extra$zip5 = _elm_lang$core$List$map5(
	F5(
		function (v0, v1, v2, v3, v4) {
			return {ctor: '_Tuple5', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4};
		}));
var _elm_community$list_extra$List_Extra$zip4 = _elm_lang$core$List$map4(
	F4(
		function (v0, v1, v2, v3) {
			return {ctor: '_Tuple4', _0: v0, _1: v1, _2: v2, _3: v3};
		}));
var _elm_community$list_extra$List_Extra$zip3 = _elm_lang$core$List$map3(
	F3(
		function (v0, v1, v2) {
			return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
		}));
var _elm_community$list_extra$List_Extra$zip = _elm_lang$core$List$map2(
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}));
var _elm_community$list_extra$List_Extra$isPrefixOf = F2(
	function (prefix, xs) {
		var _p0 = {ctor: '_Tuple2', _0: prefix, _1: xs};
		if (_p0._0.ctor === '[]') {
			return true;
		} else {
			if (_p0._1.ctor === '[]') {
				return false;
			} else {
				return _elm_lang$core$Native_Utils.eq(_p0._0._0, _p0._1._0) && A2(_elm_community$list_extra$List_Extra$isPrefixOf, _p0._0._1, _p0._1._1);
			}
		}
	});
var _elm_community$list_extra$List_Extra$isSuffixOf = F2(
	function (suffix, xs) {
		return A2(
			_elm_community$list_extra$List_Extra$isPrefixOf,
			_elm_lang$core$List$reverse(suffix),
			_elm_lang$core$List$reverse(xs));
	});
var _elm_community$list_extra$List_Extra$selectSplit = function (xs) {
	var _p1 = xs;
	if (_p1.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p5 = _p1._1;
		var _p4 = _p1._0;
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _p4,
				_2: _p5
			},
			_1: A2(
				_elm_lang$core$List$map,
				function (_p2) {
					var _p3 = _p2;
					return {
						ctor: '_Tuple3',
						_0: {ctor: '::', _0: _p4, _1: _p3._0},
						_1: _p3._1,
						_2: _p3._2
					};
				},
				_elm_community$list_extra$List_Extra$selectSplit(_p5))
		};
	}
};
var _elm_community$list_extra$List_Extra$select = function (xs) {
	var _p6 = xs;
	if (_p6.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p10 = _p6._1;
		var _p9 = _p6._0;
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _p9, _1: _p10},
			_1: A2(
				_elm_lang$core$List$map,
				function (_p7) {
					var _p8 = _p7;
					return {
						ctor: '_Tuple2',
						_0: _p8._0,
						_1: {ctor: '::', _0: _p9, _1: _p8._1}
					};
				},
				_elm_community$list_extra$List_Extra$select(_p10))
		};
	}
};
var _elm_community$list_extra$List_Extra$tailsHelp = F2(
	function (e, list) {
		var _p11 = list;
		if (_p11.ctor === '::') {
			var _p12 = _p11._0;
			return {
				ctor: '::',
				_0: {ctor: '::', _0: e, _1: _p12},
				_1: {ctor: '::', _0: _p12, _1: _p11._1}
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _elm_community$list_extra$List_Extra$tails = A2(
	_elm_lang$core$List$foldr,
	_elm_community$list_extra$List_Extra$tailsHelp,
	{
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	});
var _elm_community$list_extra$List_Extra$isInfixOf = F2(
	function (infix, xs) {
		return A2(
			_elm_lang$core$List$any,
			_elm_community$list_extra$List_Extra$isPrefixOf(infix),
			_elm_community$list_extra$List_Extra$tails(xs));
	});
var _elm_community$list_extra$List_Extra$inits = A2(
	_elm_lang$core$List$foldr,
	F2(
		function (e, acc) {
			return {
				ctor: '::',
				_0: {ctor: '[]'},
				_1: A2(
					_elm_lang$core$List$map,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})(e),
					acc)
			};
		}),
	{
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	});
var _elm_community$list_extra$List_Extra$groupWhileTransitively = F2(
	function (cmp, xs_) {
		var _p13 = xs_;
		if (_p13.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p13._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: _p13._0,
						_1: {ctor: '[]'}
					},
					_1: {ctor: '[]'}
				};
			} else {
				var _p15 = _p13._0;
				var _p14 = A2(_elm_community$list_extra$List_Extra$groupWhileTransitively, cmp, _p13._1);
				if (_p14.ctor === '::') {
					return A2(cmp, _p15, _p13._1._0) ? {
						ctor: '::',
						_0: {ctor: '::', _0: _p15, _1: _p14._0},
						_1: _p14._1
					} : {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: _p15,
							_1: {ctor: '[]'}
						},
						_1: _p14
					};
				} else {
					return {ctor: '[]'};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$stripPrefix = F2(
	function (prefix, xs) {
		var step = F2(
			function (e, m) {
				var _p16 = m;
				if (_p16.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_p16._0.ctor === '[]') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Native_Utils.eq(e, _p16._0._0) ? _elm_lang$core$Maybe$Just(_p16._0._1) : _elm_lang$core$Maybe$Nothing;
					}
				}
			});
		return A3(
			_elm_lang$core$List$foldl,
			step,
			_elm_lang$core$Maybe$Just(xs),
			prefix);
	});
var _elm_community$list_extra$List_Extra$dropWhileRight = function (p) {
	return A2(
		_elm_lang$core$List$foldr,
		F2(
			function (x, xs) {
				return (p(x) && _elm_lang$core$List$isEmpty(xs)) ? {ctor: '[]'} : {ctor: '::', _0: x, _1: xs};
			}),
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$takeWhileRight = function (p) {
	var step = F2(
		function (x, _p17) {
			var _p18 = _p17;
			var _p19 = _p18._0;
			return (p(x) && _p18._1) ? {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: x, _1: _p19},
				_1: true
			} : {ctor: '_Tuple2', _0: _p19, _1: false};
		});
	return function (_p20) {
		return _elm_lang$core$Tuple$first(
			A3(
				_elm_lang$core$List$foldr,
				step,
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: true
				},
				_p20));
	};
};
var _elm_community$list_extra$List_Extra$splitAt = F2(
	function (n, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$List$take, n, xs),
			_1: A2(_elm_lang$core$List$drop, n, xs)
		};
	});
var _elm_community$list_extra$List_Extra$groupsOfVarying_ = F3(
	function (listOflengths, list, accu) {
		groupsOfVarying_:
		while (true) {
			var _p21 = {ctor: '_Tuple2', _0: listOflengths, _1: list};
			if (((_p21.ctor === '_Tuple2') && (_p21._0.ctor === '::')) && (_p21._1.ctor === '::')) {
				var _p22 = A2(_elm_community$list_extra$List_Extra$splitAt, _p21._0._0, list);
				var head = _p22._0;
				var tail = _p22._1;
				var _v11 = _p21._0._1,
					_v12 = tail,
					_v13 = {ctor: '::', _0: head, _1: accu};
				listOflengths = _v11;
				list = _v12;
				accu = _v13;
				continue groupsOfVarying_;
			} else {
				return _elm_lang$core$List$reverse(accu);
			}
		}
	});
var _elm_community$list_extra$List_Extra$groupsOfVarying = F2(
	function (listOflengths, list) {
		return A3(
			_elm_community$list_extra$List_Extra$groupsOfVarying_,
			listOflengths,
			list,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$unfoldr = F2(
	function (f, seed) {
		var _p23 = f(seed);
		if (_p23.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: _p23._0._0,
				_1: A2(_elm_community$list_extra$List_Extra$unfoldr, f, _p23._0._1)
			};
		}
	});
var _elm_community$list_extra$List_Extra$scanr1 = F2(
	function (f, xs_) {
		var _p24 = xs_;
		if (_p24.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p24._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: _p24._0,
					_1: {ctor: '[]'}
				};
			} else {
				var _p25 = A2(_elm_community$list_extra$List_Extra$scanr1, f, _p24._1);
				if (_p25.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, _p24._0, _p25._0),
						_1: _p25
					};
				} else {
					return {ctor: '[]'};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$scanr = F3(
	function (f, acc, xs_) {
		var _p26 = xs_;
		if (_p26.ctor === '[]') {
			return {
				ctor: '::',
				_0: acc,
				_1: {ctor: '[]'}
			};
		} else {
			var _p27 = A3(_elm_community$list_extra$List_Extra$scanr, f, acc, _p26._1);
			if (_p27.ctor === '::') {
				return {
					ctor: '::',
					_0: A2(f, _p26._0, _p27._0),
					_1: _p27
				};
			} else {
				return {ctor: '[]'};
			}
		}
	});
var _elm_community$list_extra$List_Extra$scanl1 = F2(
	function (f, xs_) {
		var _p28 = xs_;
		if (_p28.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return A3(_elm_lang$core$List$scanl, f, _p28._0, _p28._1);
		}
	});
var _elm_community$list_extra$List_Extra$indexedFoldr = F3(
	function (func, acc, list) {
		var step = F2(
			function (x, _p29) {
				var _p30 = _p29;
				var _p31 = _p30._0;
				return {
					ctor: '_Tuple2',
					_0: _p31 - 1,
					_1: A3(func, _p31, x, _p30._1)
				};
			});
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldr,
				step,
				{
					ctor: '_Tuple2',
					_0: _elm_lang$core$List$length(list) - 1,
					_1: acc
				},
				list));
	});
var _elm_community$list_extra$List_Extra$indexedFoldl = F3(
	function (func, acc, list) {
		var step = F2(
			function (x, _p32) {
				var _p33 = _p32;
				var _p34 = _p33._0;
				return {
					ctor: '_Tuple2',
					_0: _p34 + 1,
					_1: A3(func, _p34, x, _p33._1)
				};
			});
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldl,
				step,
				{ctor: '_Tuple2', _0: 0, _1: acc},
				list));
	});
var _elm_community$list_extra$List_Extra$foldr1 = F2(
	function (f, xs) {
		var mf = F2(
			function (x, m) {
				return _elm_lang$core$Maybe$Just(
					function () {
						var _p35 = m;
						if (_p35.ctor === 'Nothing') {
							return x;
						} else {
							return A2(f, x, _p35._0);
						}
					}());
			});
		return A3(_elm_lang$core$List$foldr, mf, _elm_lang$core$Maybe$Nothing, xs);
	});
var _elm_community$list_extra$List_Extra$foldl1 = F2(
	function (f, xs) {
		var mf = F2(
			function (x, m) {
				return _elm_lang$core$Maybe$Just(
					function () {
						var _p36 = m;
						if (_p36.ctor === 'Nothing') {
							return x;
						} else {
							return A2(f, _p36._0, x);
						}
					}());
			});
		return A3(_elm_lang$core$List$foldl, mf, _elm_lang$core$Maybe$Nothing, xs);
	});
var _elm_community$list_extra$List_Extra$interweaveHelp = F3(
	function (l1, l2, acc) {
		interweaveHelp:
		while (true) {
			var _p37 = {ctor: '_Tuple2', _0: l1, _1: l2};
			_v24_1:
			do {
				if (_p37._0.ctor === '::') {
					if (_p37._1.ctor === '::') {
						var _v25 = _p37._0._1,
							_v26 = _p37._1._1,
							_v27 = A2(
							_elm_lang$core$Basics_ops['++'],
							acc,
							{
								ctor: '::',
								_0: _p37._0._0,
								_1: {
									ctor: '::',
									_0: _p37._1._0,
									_1: {ctor: '[]'}
								}
							});
						l1 = _v25;
						l2 = _v26;
						acc = _v27;
						continue interweaveHelp;
					} else {
						break _v24_1;
					}
				} else {
					if (_p37._1.ctor === '[]') {
						break _v24_1;
					} else {
						return A2(_elm_lang$core$Basics_ops['++'], acc, _p37._1);
					}
				}
			} while(false);
			return A2(_elm_lang$core$Basics_ops['++'], acc, _p37._0);
		}
	});
var _elm_community$list_extra$List_Extra$interweave = F2(
	function (l1, l2) {
		return A3(
			_elm_community$list_extra$List_Extra$interweaveHelp,
			l1,
			l2,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$permutations = function (xs_) {
	var _p38 = xs_;
	if (_p38.ctor === '[]') {
		return {
			ctor: '::',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		};
	} else {
		var f = function (_p39) {
			var _p40 = _p39;
			return A2(
				_elm_lang$core$List$map,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					})(_p40._0),
				_elm_community$list_extra$List_Extra$permutations(_p40._1));
		};
		return A2(
			_elm_lang$core$List$concatMap,
			f,
			_elm_community$list_extra$List_Extra$select(_p38));
	}
};
var _elm_community$list_extra$List_Extra$isPermutationOf = F2(
	function (permut, xs) {
		return A2(
			_elm_lang$core$List$member,
			permut,
			_elm_community$list_extra$List_Extra$permutations(xs));
	});
var _elm_community$list_extra$List_Extra$subsequencesNonEmpty = function (xs) {
	var _p41 = xs;
	if (_p41.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p42 = _p41._0;
		var f = F2(
			function (ys, r) {
				return {
					ctor: '::',
					_0: ys,
					_1: {
						ctor: '::',
						_0: {ctor: '::', _0: _p42, _1: ys},
						_1: r
					}
				};
			});
		return {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: _p42,
				_1: {ctor: '[]'}
			},
			_1: A3(
				_elm_lang$core$List$foldr,
				f,
				{ctor: '[]'},
				_elm_community$list_extra$List_Extra$subsequencesNonEmpty(_p41._1))
		};
	}
};
var _elm_community$list_extra$List_Extra$subsequences = function (xs) {
	return {
		ctor: '::',
		_0: {ctor: '[]'},
		_1: _elm_community$list_extra$List_Extra$subsequencesNonEmpty(xs)
	};
};
var _elm_community$list_extra$List_Extra$isSubsequenceOf = F2(
	function (subseq, xs) {
		return A2(
			_elm_lang$core$List$member,
			subseq,
			_elm_community$list_extra$List_Extra$subsequences(xs));
	});
var _elm_community$list_extra$List_Extra$transpose = function (ll) {
	transpose:
	while (true) {
		var _p43 = ll;
		if (_p43.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p43._0.ctor === '[]') {
				var _v32 = _p43._1;
				ll = _v32;
				continue transpose;
			} else {
				var _p44 = _p43._1;
				var tails = A2(_elm_lang$core$List$filterMap, _elm_lang$core$List$tail, _p44);
				var heads = A2(_elm_lang$core$List$filterMap, _elm_lang$core$List$head, _p44);
				return {
					ctor: '::',
					_0: {ctor: '::', _0: _p43._0._0, _1: heads},
					_1: _elm_community$list_extra$List_Extra$transpose(
						{ctor: '::', _0: _p43._0._1, _1: tails})
				};
			}
		}
	}
};
var _elm_community$list_extra$List_Extra$intercalate = function (xs) {
	return function (_p45) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$intersperse, xs, _p45));
	};
};
var _elm_community$list_extra$List_Extra$filterNot = F2(
	function (pred, list) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p46) {
				return !pred(_p46);
			},
			list);
	});
var _elm_community$list_extra$List_Extra$removeAt = F2(
	function (index, l) {
		if (_elm_lang$core$Native_Utils.cmp(index, 0) < 0) {
			return l;
		} else {
			var tail = _elm_lang$core$List$tail(
				A2(_elm_lang$core$List$drop, index, l));
			var head = A2(_elm_lang$core$List$take, index, l);
			var _p47 = tail;
			if (_p47.ctor === 'Nothing') {
				return l;
			} else {
				return A2(_elm_lang$core$List$append, head, _p47._0);
			}
		}
	});
var _elm_community$list_extra$List_Extra$stableSortWith = F2(
	function (pred, list) {
		var predWithIndex = F2(
			function (_p49, _p48) {
				var _p50 = _p49;
				var _p51 = _p48;
				var result = A2(pred, _p50._0, _p51._0);
				var _p52 = result;
				if (_p52.ctor === 'EQ') {
					return A2(_elm_lang$core$Basics$compare, _p50._1, _p51._1);
				} else {
					return result;
				}
			});
		var listWithIndex = A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, a) {
					return {ctor: '_Tuple2', _0: a, _1: i};
				}),
			list);
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			A2(_elm_lang$core$List$sortWith, predWithIndex, listWithIndex));
	});
var _elm_community$list_extra$List_Extra$setAt = F3(
	function (index, value, l) {
		if (_elm_lang$core$Native_Utils.cmp(index, 0) < 0) {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var tail = _elm_lang$core$List$tail(
				A2(_elm_lang$core$List$drop, index, l));
			var head = A2(_elm_lang$core$List$take, index, l);
			var _p53 = tail;
			if (_p53.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(
					A2(
						_elm_lang$core$List$append,
						head,
						{ctor: '::', _0: value, _1: _p53._0}));
			}
		}
	});
var _elm_community$list_extra$List_Extra$remove = F2(
	function (x, xs) {
		var _p54 = xs;
		if (_p54.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p56 = _p54._1;
			var _p55 = _p54._0;
			return _elm_lang$core$Native_Utils.eq(x, _p55) ? _p56 : {
				ctor: '::',
				_0: _p55,
				_1: A2(_elm_community$list_extra$List_Extra$remove, x, _p56)
			};
		}
	});
var _elm_community$list_extra$List_Extra$updateIfIndex = F3(
	function (predicate, update, list) {
		return A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, x) {
					return predicate(i) ? update(x) : x;
				}),
			list);
	});
var _elm_community$list_extra$List_Extra$updateAt = F3(
	function (index, update, list) {
		return ((_elm_lang$core$Native_Utils.cmp(index, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(
			index,
			_elm_lang$core$List$length(list)) > -1)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
			A3(
				_elm_community$list_extra$List_Extra$updateIfIndex,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					})(index),
				update,
				list));
	});
var _elm_community$list_extra$List_Extra$updateIf = F3(
	function (predicate, update, list) {
		return A2(
			_elm_lang$core$List$map,
			function (item) {
				return predicate(item) ? update(item) : item;
			},
			list);
	});
var _elm_community$list_extra$List_Extra$replaceIf = F3(
	function (predicate, replacement, list) {
		return A3(
			_elm_community$list_extra$List_Extra$updateIf,
			predicate,
			_elm_lang$core$Basics$always(replacement),
			list);
	});
var _elm_community$list_extra$List_Extra$findIndices = function (p) {
	return function (_p57) {
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			A2(
				_elm_lang$core$List$filter,
				function (_p58) {
					var _p59 = _p58;
					return p(_p59._1);
				},
				A2(
					_elm_lang$core$List$indexedMap,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					_p57)));
	};
};
var _elm_community$list_extra$List_Extra$findIndex = function (p) {
	return function (_p60) {
		return _elm_lang$core$List$head(
			A2(_elm_community$list_extra$List_Extra$findIndices, p, _p60));
	};
};
var _elm_community$list_extra$List_Extra$splitWhen = F2(
	function (predicate, list) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (i) {
				return A2(_elm_community$list_extra$List_Extra$splitAt, i, list);
			},
			A2(_elm_community$list_extra$List_Extra$findIndex, predicate, list));
	});
var _elm_community$list_extra$List_Extra$elemIndices = function (x) {
	return _elm_community$list_extra$List_Extra$findIndices(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(x));
};
var _elm_community$list_extra$List_Extra$elemIndex = function (x) {
	return _elm_community$list_extra$List_Extra$findIndex(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(x));
};
var _elm_community$list_extra$List_Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			var _p61 = list;
			if (_p61.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p62 = _p61._0;
				if (predicate(_p62)) {
					return _elm_lang$core$Maybe$Just(_p62);
				} else {
					var _v41 = predicate,
						_v42 = _p61._1;
					predicate = _v41;
					list = _v42;
					continue find;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$notMember = function (x) {
	return function (_p63) {
		return !A2(_elm_lang$core$List$member, x, _p63);
	};
};
var _elm_community$list_extra$List_Extra$andThen = _elm_lang$core$List$concatMap;
var _elm_community$list_extra$List_Extra$lift2 = F3(
	function (f, la, lb) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return {
							ctor: '::',
							_0: A2(f, a, b),
							_1: {ctor: '[]'}
						};
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$lift3 = F4(
	function (f, la, lb, lc) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return A2(
							_elm_community$list_extra$List_Extra$andThen,
							function (c) {
								return {
									ctor: '::',
									_0: A3(f, a, b, c),
									_1: {ctor: '[]'}
								};
							},
							lc);
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$lift4 = F5(
	function (f, la, lb, lc, ld) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return A2(
							_elm_community$list_extra$List_Extra$andThen,
							function (c) {
								return A2(
									_elm_community$list_extra$List_Extra$andThen,
									function (d) {
										return {
											ctor: '::',
											_0: A4(f, a, b, c, d),
											_1: {ctor: '[]'}
										};
									},
									ld);
							},
							lc);
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$andMap = F2(
	function (l, fl) {
		return A3(
			_elm_lang$core$List$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			fl,
			l);
	});
var _elm_community$list_extra$List_Extra$uniqueHelp = F3(
	function (f, existing, remaining) {
		uniqueHelp:
		while (true) {
			var _p64 = remaining;
			if (_p64.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var _p66 = _p64._1;
				var _p65 = _p64._0;
				var computedFirst = f(_p65);
				if (A2(_elm_lang$core$Set$member, computedFirst, existing)) {
					var _v44 = f,
						_v45 = existing,
						_v46 = _p66;
					f = _v44;
					existing = _v45;
					remaining = _v46;
					continue uniqueHelp;
				} else {
					return {
						ctor: '::',
						_0: _p65,
						_1: A3(
							_elm_community$list_extra$List_Extra$uniqueHelp,
							f,
							A2(_elm_lang$core$Set$insert, computedFirst, existing),
							_p66)
					};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$uniqueBy = F2(
	function (f, list) {
		return A3(_elm_community$list_extra$List_Extra$uniqueHelp, f, _elm_lang$core$Set$empty, list);
	});
var _elm_community$list_extra$List_Extra$allDifferentBy = F2(
	function (f, list) {
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(list),
			_elm_lang$core$List$length(
				A2(_elm_community$list_extra$List_Extra$uniqueBy, f, list)));
	});
var _elm_community$list_extra$List_Extra$allDifferent = function (list) {
	return A2(_elm_community$list_extra$List_Extra$allDifferentBy, _elm_lang$core$Basics$identity, list);
};
var _elm_community$list_extra$List_Extra$unique = function (list) {
	return A3(_elm_community$list_extra$List_Extra$uniqueHelp, _elm_lang$core$Basics$identity, _elm_lang$core$Set$empty, list);
};
var _elm_community$list_extra$List_Extra$dropWhile = F2(
	function (predicate, list) {
		dropWhile:
		while (true) {
			var _p67 = list;
			if (_p67.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				if (predicate(_p67._0)) {
					var _v48 = predicate,
						_v49 = _p67._1;
					predicate = _v48;
					list = _v49;
					continue dropWhile;
				} else {
					return list;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$takeWhile = function (predicate) {
	var takeWhileMemo = F2(
		function (memo, list) {
			takeWhileMemo:
			while (true) {
				var _p68 = list;
				if (_p68.ctor === '[]') {
					return _elm_lang$core$List$reverse(memo);
				} else {
					var _p69 = _p68._0;
					if (predicate(_p69)) {
						var _v51 = {ctor: '::', _0: _p69, _1: memo},
							_v52 = _p68._1;
						memo = _v51;
						list = _v52;
						continue takeWhileMemo;
					} else {
						return _elm_lang$core$List$reverse(memo);
					}
				}
			}
		});
	return takeWhileMemo(
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$span = F2(
	function (p, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_community$list_extra$List_Extra$takeWhile, p, xs),
			_1: A2(_elm_community$list_extra$List_Extra$dropWhile, p, xs)
		};
	});
var _elm_community$list_extra$List_Extra$break = function (p) {
	return _elm_community$list_extra$List_Extra$span(
		function (_p70) {
			return !p(_p70);
		});
};
var _elm_community$list_extra$List_Extra$groupWhile = F2(
	function (eq, xs_) {
		var _p71 = xs_;
		if (_p71.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p73 = _p71._0;
			var _p72 = A2(
				_elm_community$list_extra$List_Extra$span,
				eq(_p73),
				_p71._1);
			var ys = _p72._0;
			var zs = _p72._1;
			return {
				ctor: '::',
				_0: {ctor: '::', _0: _p73, _1: ys},
				_1: A2(_elm_community$list_extra$List_Extra$groupWhile, eq, zs)
			};
		}
	});
var _elm_community$list_extra$List_Extra$group = _elm_community$list_extra$List_Extra$groupWhile(
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		}));
var _elm_community$list_extra$List_Extra$minimumBy = F2(
	function (f, ls) {
		var minBy = F2(
			function (x, _p74) {
				var _p75 = _p74;
				var _p76 = _p75._1;
				var fx = f(x);
				return (_elm_lang$core$Native_Utils.cmp(fx, _p76) < 0) ? {ctor: '_Tuple2', _0: x, _1: fx} : {ctor: '_Tuple2', _0: _p75._0, _1: _p76};
			});
		var _p77 = ls;
		if (_p77.ctor === '::') {
			if (_p77._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p77._0);
			} else {
				var _p78 = _p77._0;
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Tuple$first(
						A3(
							_elm_lang$core$List$foldl,
							minBy,
							{
								ctor: '_Tuple2',
								_0: _p78,
								_1: f(_p78)
							},
							_p77._1)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$list_extra$List_Extra$maximumBy = F2(
	function (f, ls) {
		var maxBy = F2(
			function (x, _p79) {
				var _p80 = _p79;
				var _p81 = _p80._1;
				var fx = f(x);
				return (_elm_lang$core$Native_Utils.cmp(fx, _p81) > 0) ? {ctor: '_Tuple2', _0: x, _1: fx} : {ctor: '_Tuple2', _0: _p80._0, _1: _p81};
			});
		var _p82 = ls;
		if (_p82.ctor === '::') {
			if (_p82._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p82._0);
			} else {
				var _p83 = _p82._0;
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Tuple$first(
						A3(
							_elm_lang$core$List$foldl,
							maxBy,
							{
								ctor: '_Tuple2',
								_0: _p83,
								_1: f(_p83)
							},
							_p82._1)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$list_extra$List_Extra$uncons = function (xs) {
	var _p84 = xs;
	if (_p84.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: _p84._0, _1: _p84._1});
	}
};
var _elm_community$list_extra$List_Extra$swapAt = F3(
	function (index1, index2, l) {
		swapAt:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(index1, index2)) {
				return _elm_lang$core$Maybe$Just(l);
			} else {
				if (_elm_lang$core$Native_Utils.cmp(index1, index2) > 0) {
					var _v59 = index2,
						_v60 = index1,
						_v61 = l;
					index1 = _v59;
					index2 = _v60;
					l = _v61;
					continue swapAt;
				} else {
					if (_elm_lang$core$Native_Utils.cmp(index1, 0) < 0) {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						var _p85 = A2(_elm_community$list_extra$List_Extra$splitAt, index1, l);
						var part1 = _p85._0;
						var tail1 = _p85._1;
						var _p86 = A2(_elm_community$list_extra$List_Extra$splitAt, index2 - index1, tail1);
						var head2 = _p86._0;
						var tail2 = _p86._1;
						return A3(
							_elm_lang$core$Maybe$map2,
							F2(
								function (_p88, _p87) {
									var _p89 = _p88;
									var _p90 = _p87;
									return _elm_lang$core$List$concat(
										{
											ctor: '::',
											_0: part1,
											_1: {
												ctor: '::',
												_0: {ctor: '::', _0: _p90._0, _1: _p89._1},
												_1: {
													ctor: '::',
													_0: {ctor: '::', _0: _p89._0, _1: _p90._1},
													_1: {ctor: '[]'}
												}
											}
										});
								}),
							_elm_community$list_extra$List_Extra$uncons(head2),
							_elm_community$list_extra$List_Extra$uncons(tail2));
					}
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$iterate = F2(
	function (f, x) {
		var _p91 = f(x);
		if (_p91.ctor === 'Just') {
			return {
				ctor: '::',
				_0: x,
				_1: A2(_elm_community$list_extra$List_Extra$iterate, f, _p91._0)
			};
		} else {
			return {
				ctor: '::',
				_0: x,
				_1: {ctor: '[]'}
			};
		}
	});
var _elm_community$list_extra$List_Extra$getAt = F2(
	function (idx, xs) {
		return (_elm_lang$core$Native_Utils.cmp(idx, 0) < 0) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, idx, xs));
	});
var _elm_community$list_extra$List_Extra_ops = _elm_community$list_extra$List_Extra_ops || {};
_elm_community$list_extra$List_Extra_ops['!!'] = _elm_lang$core$Basics$flip(_elm_community$list_extra$List_Extra$getAt);
var _elm_community$list_extra$List_Extra$init = function () {
	var maybe = F2(
		function (d, f) {
			return function (_p92) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					d,
					A2(_elm_lang$core$Maybe$map, f, _p92));
			};
		});
	return A2(
		_elm_lang$core$List$foldr,
		function (x) {
			return function (_p93) {
				return _elm_lang$core$Maybe$Just(
					A3(
						maybe,
						{ctor: '[]'},
						F2(
							function (x, y) {
								return {ctor: '::', _0: x, _1: y};
							})(x),
						_p93));
			};
		},
		_elm_lang$core$Maybe$Nothing);
}();
var _elm_community$list_extra$List_Extra$last = _elm_community$list_extra$List_Extra$foldl1(
	_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always));

var _abadi199$datetimepicker$DatePickerPanel$dayNames = function (config) {
	var shiftAmount = A2(_abadi199$datetimepicker$DateTimePicker_DateUtils$dayToInt, _elm_lang$core$Date$Sun, config.firstDayOfWeek);
	var days = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$th,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(config.nameOfDays.sunday),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$th,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(config.nameOfDays.monday),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$th,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(config.nameOfDays.tuesday),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$th,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(config.nameOfDays.wednesday),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$th,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(config.nameOfDays.thursday),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$th,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(config.nameOfDays.friday),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$th,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(config.nameOfDays.saturday),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	};
	return function (_p0) {
		var _p1 = _p0;
		return A2(_elm_lang$core$Basics_ops['++'], _p1._1, _p1._0);
	}(
		A2(_elm_community$list_extra$List_Extra$splitAt, shiftAmount, days));
};
var _abadi199$datetimepicker$DatePickerPanel$noYearNavigationClass = function (config) {
	return config.allowYearNavigation ? {ctor: '[]'} : {
		ctor: '::',
		_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$NoYearNavigation,
		_1: {ctor: '[]'}
	};
};
var _abadi199$datetimepicker$DatePickerPanel$gotoPreviousYear = function (_p2) {
	var _p3 = _p2;
	var _p4 = _p3._0;
	var updatedTitleDate = A2(
		_elm_lang$core$Maybe$map,
		A2(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Year, -1),
		_p4.titleDate);
	return _abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
		_elm_lang$core$Native_Utils.update(
			_p4,
			{event: 'previousYear', titleDate: updatedTitleDate}));
};
var _abadi199$datetimepicker$DatePickerPanel$previousYearButton = F3(
	function (config, state, currentDate) {
		return config.allowYearNavigation ? A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: config.$class(
					{
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$DoubleArrowLeft,
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
						A2(
							config.onChange,
							_abadi199$datetimepicker$DatePickerPanel$gotoPreviousYear(state),
							currentDate)),
					_1: {
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
							A2(
								config.onChange,
								_abadi199$datetimepicker$DatePickerPanel$gotoPreviousYear(state),
								currentDate)),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _abadi199$datetimepicker$DateTimePicker_Svg$doubleLeftArrow,
				_1: {ctor: '[]'}
			}) : _elm_lang$html$Html$text('');
	});
var _abadi199$datetimepicker$DatePickerPanel$gotoPreviousMonth = function (_p5) {
	var _p6 = _p5;
	var _p7 = _p6._0;
	var updatedTitleDate = A2(
		_elm_lang$core$Maybe$map,
		A2(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Month, -1),
		_p7.titleDate);
	return _abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
		_elm_lang$core$Native_Utils.update(
			_p7,
			{event: 'previous', titleDate: updatedTitleDate}));
};
var _abadi199$datetimepicker$DatePickerPanel$previousButton = F3(
	function (config, state, currentDate) {
		return A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: config.$class(
					{
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$ArrowLeft,
						_1: _abadi199$datetimepicker$DatePickerPanel$noYearNavigationClass(config)
					}),
				_1: {
					ctor: '::',
					_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
						A2(
							config.onChange,
							_abadi199$datetimepicker$DatePickerPanel$gotoPreviousMonth(state),
							currentDate)),
					_1: {
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
							A2(
								config.onChange,
								_abadi199$datetimepicker$DatePickerPanel$gotoPreviousMonth(state),
								currentDate)),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _abadi199$datetimepicker$DateTimePicker_Svg$leftArrow,
				_1: {ctor: '[]'}
			});
	});
var _abadi199$datetimepicker$DatePickerPanel$gotoNextYear = function (_p8) {
	var _p9 = _p8;
	var _p10 = _p9._0;
	var updatedTitleDate = A2(
		_elm_lang$core$Maybe$map,
		A2(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Year, 1),
		_p10.titleDate);
	return _abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
		_elm_lang$core$Native_Utils.update(
			_p10,
			{event: 'nextYear', titleDate: updatedTitleDate}));
};
var _abadi199$datetimepicker$DatePickerPanel$nextYearButton = F3(
	function (config, state, currentDate) {
		return config.allowYearNavigation ? A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: config.$class(
					{
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$DoubleArrowRight,
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
						A2(
							config.onChange,
							_abadi199$datetimepicker$DatePickerPanel$gotoNextYear(state),
							currentDate)),
					_1: {
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
							A2(
								config.onChange,
								_abadi199$datetimepicker$DatePickerPanel$gotoNextYear(state),
								currentDate)),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _abadi199$datetimepicker$DateTimePicker_Svg$doubleRightArrow,
				_1: {ctor: '[]'}
			}) : _elm_lang$html$Html$text('');
	});
var _abadi199$datetimepicker$DatePickerPanel$gotoNextMonth = function (_p11) {
	var _p12 = _p11;
	var _p13 = _p12._0;
	var updatedTitleDate = A2(
		_elm_lang$core$Maybe$map,
		A2(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Month, 1),
		_p13.titleDate);
	return _abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
		_elm_lang$core$Native_Utils.update(
			_p13,
			{event: 'next', titleDate: updatedTitleDate}));
};
var _abadi199$datetimepicker$DatePickerPanel$nextButton = F3(
	function (config, state, currentDate) {
		return A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: config.$class(
					{
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$ArrowRight,
						_1: _abadi199$datetimepicker$DatePickerPanel$noYearNavigationClass(config)
					}),
				_1: {
					ctor: '::',
					_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
						A2(
							config.onChange,
							_abadi199$datetimepicker$DatePickerPanel$gotoNextMonth(state),
							currentDate)),
					_1: {
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
							A2(
								config.onChange,
								_abadi199$datetimepicker$DatePickerPanel$gotoNextMonth(state),
								currentDate)),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _abadi199$datetimepicker$DateTimePicker_Svg$rightArrow,
				_1: {ctor: '[]'}
			});
	});
var _abadi199$datetimepicker$DatePickerPanel$dateClickHandler = F5(
	function (config, _p14, year, month, day) {
		var _p15 = _p14;
		var _p17 = _p15._0;
		var selectedDate = _elm_lang$core$Maybe$Just(
			A3(_abadi199$datetimepicker$DateTimePicker_DateUtils$toDate, year, month, day));
		var updatedState = _abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
			_elm_lang$core$Native_Utils.update(
				_p17,
				{
					date: selectedDate,
					forceClose: true,
					activeTimeIndicator: _elm_lang$core$Native_Utils.eq(_p17.time.hour, _elm_lang$core$Maybe$Nothing) ? _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$HourIndicator) : (_elm_lang$core$Native_Utils.eq(_p17.time.minute, _elm_lang$core$Maybe$Nothing) ? _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$MinuteIndicator) : (_elm_lang$core$Native_Utils.eq(_p17.time.amPm, _elm_lang$core$Maybe$Nothing) ? _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$AMPMIndicator) : _elm_lang$core$Maybe$Nothing))
				}));
		var _p16 = day.monthType;
		switch (_p16.ctor) {
			case 'Previous':
				return A2(
					config.onChange,
					_abadi199$datetimepicker$DatePickerPanel$gotoPreviousMonth(updatedState),
					selectedDate);
			case 'Next':
				return A2(
					config.onChange,
					_abadi199$datetimepicker$DatePickerPanel$gotoNextMonth(updatedState),
					selectedDate);
			default:
				return A2(config.onChange, updatedState, selectedDate);
		}
	});
var _abadi199$datetimepicker$DatePickerPanel$calendar = F3(
	function (config, _p18, currentDate) {
		var _p19 = _p18;
		var _p23 = _p19._0;
		var _p20 = _p23.titleDate;
		if (_p20.ctor === 'Nothing') {
			return _elm_lang$html$Html$text('');
		} else {
			var _p22 = _p20._0;
			var header = A2(
				_elm_lang$html$Html$thead,
				{
					ctor: '::',
					_0: config.$class(
						{
							ctor: '::',
							_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$DaysOfWeek,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$tr,
						{ctor: '[]'},
						_abadi199$datetimepicker$DatePickerPanel$dayNames(config)),
					_1: {ctor: '[]'}
				});
			var year = _elm_lang$core$Date$year(_p22);
			var month = _elm_lang$core$Date$month(_p22);
			var days = A3(_abadi199$datetimepicker$DateTimePicker_DateUtils$generateCalendar, config.firstDayOfWeek, month, year);
			var isHighlighted = function (day) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					false,
					A2(
						_elm_lang$core$Maybe$map,
						function (current) {
							return _elm_lang$core$Native_Utils.eq(
								day.day,
								_elm_lang$core$Date$day(current)) && (_elm_lang$core$Native_Utils.eq(
								month,
								_elm_lang$core$Date$month(current)) && _elm_lang$core$Native_Utils.eq(
								year,
								_elm_lang$core$Date$year(current)));
						},
						_p23.date));
			};
			var isToday = function (day) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					false,
					A2(
						_elm_lang$core$Maybe$map,
						function (today) {
							return _elm_lang$core$Native_Utils.eq(
								day.day,
								_elm_lang$core$Date$day(today)) && (_elm_lang$core$Native_Utils.eq(
								month,
								_elm_lang$core$Date$month(today)) && _elm_lang$core$Native_Utils.eq(
								year,
								_elm_lang$core$Date$year(today)));
						},
						_p23.today));
			};
			var toCell = function (day) {
				var selectedDate = A3(_abadi199$datetimepicker$DateTimePicker_DateUtils$toDate, year, month, day);
				return A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: config.$class(
							function () {
								var _p21 = day.monthType;
								switch (_p21.ctor) {
									case 'Previous':
										return {
											ctor: '::',
											_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$PreviousMonth,
											_1: {ctor: '[]'}
										};
									case 'Current':
										return {
											ctor: '::',
											_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$CurrentMonth,
											_1: isHighlighted(day) ? {
												ctor: '::',
												_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$SelectedDate,
												_1: {ctor: '[]'}
											} : (isToday(day) ? {
												ctor: '::',
												_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$Today,
												_1: {ctor: '[]'}
											} : {ctor: '[]'})
										};
									default:
										return {
											ctor: '::',
											_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$NextMonth,
											_1: {ctor: '[]'}
										};
								}
							}()),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'button'),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html_Attributes$attribute,
									'aria-label',
									A3(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, '%e, %A %B %Y', selectedDate)),
								_1: {
									ctor: '::',
									_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
										A5(
											_abadi199$datetimepicker$DatePickerPanel$dateClickHandler,
											config,
											_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(_p23),
											year,
											month,
											day)),
									_1: {
										ctor: '::',
										_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
											A5(
												_abadi199$datetimepicker$DatePickerPanel$dateClickHandler,
												config,
												_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(_p23),
												year,
												month,
												day)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(day.day)),
						_1: {ctor: '[]'}
					});
			};
			var toWeekRow = function (week) {
				return A2(
					_elm_lang$html$Html$tr,
					{ctor: '[]'},
					A2(_elm_lang$core$List$map, toCell, week));
			};
			var body = A2(
				_elm_lang$html$Html$tbody,
				{
					ctor: '::',
					_0: config.$class(
						{
							ctor: '::',
							_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$Days,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$List$map,
					toWeekRow,
					A2(_elm_community$list_extra$List_Extra$groupsOf, 7, days)));
			var firstDay = A2(
				_abadi199$datetimepicker$DateTimePicker_DateUtils$dayToInt,
				config.firstDayOfWeek,
				_elm_lang$core$Date$dayOfWeek(
					_rluiten$elm_date_extra$Date_Extra_Core$toFirstOfMonth(_p22)));
			return A2(
				_elm_lang$html$Html$table,
				{
					ctor: '::',
					_0: config.$class(
						{
							ctor: '::',
							_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$Calendar,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: header,
					_1: {
						ctor: '::',
						_0: body,
						_1: {ctor: '[]'}
					}
				});
		}
	});
var _abadi199$datetimepicker$DatePickerPanel$switchMode = function (_p24) {
	var _p25 = _p24;
	return _abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
		_elm_lang$core$Native_Utils.update(
			_p25._0,
			{event: 'title'}));
};
var _abadi199$datetimepicker$DatePickerPanel$title = F3(
	function (config, _p26, currentDate) {
		var _p27 = _p26;
		var date = _p27._0.titleDate;
		return A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: config.$class(
					{
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$Title,
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
						A2(
							config.onChange,
							_abadi199$datetimepicker$DatePickerPanel$switchMode(_p27),
							currentDate)),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Maybe$withDefault,
						'N/A',
						A2(_elm_lang$core$Maybe$map, config.titleFormatter, date))),
				_1: {ctor: '[]'}
			});
	});
var _abadi199$datetimepicker$DatePickerPanel$navigation = F3(
	function (config, state, currentDate) {
		return {
			ctor: '::',
			_0: A3(_abadi199$datetimepicker$DatePickerPanel$previousYearButton, config, state, currentDate),
			_1: {
				ctor: '::',
				_0: A3(_abadi199$datetimepicker$DatePickerPanel$previousButton, config, state, currentDate),
				_1: {
					ctor: '::',
					_0: A3(_abadi199$datetimepicker$DatePickerPanel$title, config, state, currentDate),
					_1: {
						ctor: '::',
						_0: A3(_abadi199$datetimepicker$DatePickerPanel$nextButton, config, state, currentDate),
						_1: {
							ctor: '::',
							_0: A3(_abadi199$datetimepicker$DatePickerPanel$nextYearButton, config, state, currentDate),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		};
	});
var _abadi199$datetimepicker$DatePickerPanel$view = F3(
	function (config, _p28, currentDate) {
		var _p29 = _p28;
		var _p30 = _p29;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: config.$class(
					{
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$DatePickerDialog,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: config.$class(
							{
								ctor: '::',
								_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$Header,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					A3(_abadi199$datetimepicker$DatePickerPanel$navigation, config, _p30, currentDate)),
				_1: {
					ctor: '::',
					_0: A3(_abadi199$datetimepicker$DatePickerPanel$calendar, config, _p30, currentDate),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: config.$class(
									{
										ctor: '::',
										_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$Footer,
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(
										_elm_lang$core$Maybe$withDefault,
										'--',
										A2(_elm_lang$core$Maybe$map, config.footerFormatter, _p29._0.date))),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});

var _abadi199$datetimepicker$DigitalTimePickerPanel$minuteDownHandler = F3(
	function (config, _p0, currentDate) {
		var _p1 = _p0;
		var _p2 = _p1._0;
		var updatedState = (_elm_lang$core$Native_Utils.cmp(_p2.minutePickerStart + 6, 59) < 1) ? _elm_lang$core$Native_Utils.update(
			_p2,
			{minutePickerStart: _p2.minutePickerStart + 6}) : _p2;
		return A2(
			config.onChange,
			_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(updatedState),
			currentDate);
	});
var _abadi199$datetimepicker$DigitalTimePickerPanel$minuteUpHandler = F3(
	function (config, _p3, currentDate) {
		var _p4 = _p3;
		var _p5 = _p4._0;
		var updatedState = (_elm_lang$core$Native_Utils.cmp(_p5.minutePickerStart - 6, 0) > -1) ? _elm_lang$core$Native_Utils.update(
			_p5,
			{minutePickerStart: _p5.minutePickerStart - 6}) : _p5;
		return A2(
			config.onChange,
			_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(updatedState),
			currentDate);
	});
var _abadi199$datetimepicker$DigitalTimePickerPanel$hourDownHandler = F3(
	function (config, _p6, currentDate) {
		var _p7 = _p6;
		var _p8 = _p7._0;
		var updatedState = (_elm_lang$core$Native_Utils.cmp(_p8.hourPickerStart + 6, 12) < 1) ? _elm_lang$core$Native_Utils.update(
			_p8,
			{hourPickerStart: _p8.hourPickerStart + 6}) : _p8;
		return A2(
			config.onChange,
			_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(updatedState),
			currentDate);
	});
var _abadi199$datetimepicker$DigitalTimePickerPanel$hourUpHandler = F3(
	function (config, _p9, currentDate) {
		var _p10 = _p9;
		var _p11 = _p10._0;
		var updatedState = (_elm_lang$core$Native_Utils.cmp(_p11.hourPickerStart - 6, 1) > -1) ? _elm_lang$core$Native_Utils.update(
			_p11,
			{hourPickerStart: _p11.hourPickerStart - 6}) : _p11;
		return A2(
			config.onChange,
			_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(updatedState),
			currentDate);
	});
var _abadi199$datetimepicker$DigitalTimePickerPanel$amPmClickHandler = F3(
	function (config, _p12, amPm) {
		var _p13 = _p12;
		var _p16 = _p13._0;
		var time = _p16.time;
		var updatedStateValue = _elm_lang$core$Native_Utils.update(
			_p16,
			{
				time: _elm_lang$core$Native_Utils.update(
					time,
					{
						amPm: _elm_lang$core$String$isEmpty(amPm) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(amPm)
					}),
				event: 'amPmClickHandler'
			});
		var _p14 = function () {
			var _p15 = {ctor: '_Tuple2', _0: updatedStateValue.time.hour, _1: updatedStateValue.time.minute};
			if (((_p15.ctor === '_Tuple2') && (_p15._0.ctor === 'Just')) && (_p15._1.ctor === 'Just')) {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Just(
						A3(_abadi199$datetimepicker$DateTimePicker_DateUtils$toTime, _p15._0._0, _p15._1._0, amPm)),
					_1: true
				};
			} else {
				return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: false};
			}
		}();
		var updatedTime = _p14._0;
		var forceClose = _p14._1;
		return A2(
			config.onChange,
			_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
				_elm_lang$core$Native_Utils.update(
					updatedStateValue,
					{forceClose: forceClose})),
			updatedTime);
	});
var _abadi199$datetimepicker$DigitalTimePickerPanel$minuteClickHandler = F3(
	function (config, _p17, minute) {
		var _p18 = _p17;
		var _p21 = _p18._0;
		var time = _p21.time;
		var updatedStateValue = _elm_lang$core$Native_Utils.update(
			_p21,
			{
				time: _elm_lang$core$Native_Utils.update(
					time,
					{
						minute: _elm_lang$core$Maybe$Just(minute)
					}),
				event: 'minuteClickHandler'
			});
		var _p19 = function () {
			var _p20 = {ctor: '_Tuple2', _0: updatedStateValue.time.hour, _1: updatedStateValue.time.amPm};
			if (((_p20.ctor === '_Tuple2') && (_p20._0.ctor === 'Just')) && (_p20._1.ctor === 'Just')) {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Just(
						A3(_abadi199$datetimepicker$DateTimePicker_DateUtils$toTime, _p20._0._0, minute, _p20._1._0)),
					_1: true
				};
			} else {
				return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: false};
			}
		}();
		var updatedTime = _p19._0;
		var forceClose = _p19._1;
		return A2(
			config.onChange,
			_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
				_elm_lang$core$Native_Utils.update(
					updatedStateValue,
					{forceClose: forceClose})),
			updatedTime);
	});
var _abadi199$datetimepicker$DigitalTimePickerPanel$hourClickHandler = F3(
	function (config, _p22, hour) {
		var _p23 = _p22;
		var _p26 = _p23._0;
		var time = _p26.time;
		var updatedStateValue = _elm_lang$core$Native_Utils.update(
			_p26,
			{
				time: _elm_lang$core$Native_Utils.update(
					time,
					{
						hour: _elm_lang$core$Maybe$Just(hour)
					}),
				event: 'hourClickHandler'
			});
		var _p24 = function () {
			var _p25 = {ctor: '_Tuple2', _0: updatedStateValue.time.minute, _1: updatedStateValue.time.amPm};
			if (((_p25.ctor === '_Tuple2') && (_p25._0.ctor === 'Just')) && (_p25._1.ctor === 'Just')) {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Just(
						A3(_abadi199$datetimepicker$DateTimePicker_DateUtils$toTime, hour, _p25._0._0, _p25._1._0)),
					_1: true
				};
			} else {
				return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: false};
			}
		}();
		var updatedTime = _p24._0;
		var forceClose = _p24._1;
		return A2(
			config.onChange,
			_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
				_elm_lang$core$Native_Utils.update(
					updatedStateValue,
					{forceClose: forceClose})),
			updatedTime);
	});
var _abadi199$datetimepicker$DigitalTimePickerPanel$view = F3(
	function (config, _p27, currentDate) {
		var _p28 = _p27;
		var _p32 = _p28._0;
		var _p31 = _p28;
		var downArrows = function (config) {
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$tr,
					{
						ctor: '::',
						_0: config.$class(
							{
								ctor: '::',
								_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$ArrowDown,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{
								ctor: '::',
								_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
									A3(_abadi199$datetimepicker$DigitalTimePickerPanel$hourDownHandler, config, _p31, currentDate)),
								_1: {
									ctor: '::',
									_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
										A3(_abadi199$datetimepicker$DigitalTimePickerPanel$hourDownHandler, config, _p31, currentDate)),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _abadi199$datetimepicker$DateTimePicker_Svg$downArrow,
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{
									ctor: '::',
									_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
										A3(_abadi199$datetimepicker$DigitalTimePickerPanel$minuteDownHandler, config, _p31, currentDate)),
									_1: {
										ctor: '::',
										_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
											A3(_abadi199$datetimepicker$DigitalTimePickerPanel$minuteDownHandler, config, _p31, currentDate)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _abadi199$datetimepicker$DateTimePicker_Svg$downArrow,
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			};
		};
		var upArrows = function (config) {
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$tr,
					{
						ctor: '::',
						_0: config.$class(
							{
								ctor: '::',
								_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$ArrowUp,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{
								ctor: '::',
								_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
									A3(_abadi199$datetimepicker$DigitalTimePickerPanel$hourUpHandler, config, _p31, currentDate)),
								_1: {
									ctor: '::',
									_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
										A3(_abadi199$datetimepicker$DigitalTimePickerPanel$hourUpHandler, config, _p31, currentDate)),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _abadi199$datetimepicker$DateTimePicker_Svg$upArrow,
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{
									ctor: '::',
									_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
										A3(_abadi199$datetimepicker$DigitalTimePickerPanel$minuteUpHandler, config, _p31, currentDate)),
									_1: {
										ctor: '::',
										_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
											A3(_abadi199$datetimepicker$DigitalTimePickerPanel$minuteUpHandler, config, _p31, currentDate)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _abadi199$datetimepicker$DateTimePicker_Svg$upArrow,
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			};
		};
		var amPmCell = function (ampm) {
			var defaultClasses = config.$class(
				_elm_lang$core$Native_Utils.eq(ampm, '') ? {
					ctor: '::',
					_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$EmptyCell,
					_1: {ctor: '[]'}
				} : {ctor: '[]'});
			return A2(
				_elm_lang$html$Html$td,
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(
							_elm_lang$core$Maybe$withDefault,
							defaultClasses,
							A2(
								_elm_lang$core$Maybe$map,
								function (selected) {
									return selected ? config.$class(
										{
											ctor: '::',
											_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$SelectedAmPm,
											_1: {ctor: '[]'}
										}) : defaultClasses;
								},
								A2(
									_elm_lang$core$Maybe$map,
									F2(
										function (x, y) {
											return _elm_lang$core$Native_Utils.eq(x, y);
										})(ampm),
									_p32.time.amPm))),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'button'),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-label', ampm),
								_1: {ctor: '[]'}
							}
						}
					},
					_elm_lang$core$Native_Utils.eq(ampm, '') ? {ctor: '[]'} : {
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
							A3(_abadi199$datetimepicker$DigitalTimePickerPanel$amPmClickHandler, config, _p31, ampm)),
						_1: {
							ctor: '::',
							_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
								A3(_abadi199$datetimepicker$DigitalTimePickerPanel$amPmClickHandler, config, _p31, ampm)),
							_1: {ctor: '[]'}
						}
					}),
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(ampm),
					_1: {ctor: '[]'}
				});
		};
		var minuteCell = function (min) {
			return A2(
				_elm_lang$html$Html$td,
				{
					ctor: '::',
					_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
						A3(_abadi199$datetimepicker$DigitalTimePickerPanel$minuteClickHandler, config, _p31, min)),
					_1: {
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
							A3(_abadi199$datetimepicker$DigitalTimePickerPanel$minuteClickHandler, config, _p31, min)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Maybe$withDefault,
								config.$class(
									{ctor: '[]'}),
								A2(
									_elm_lang$core$Maybe$map,
									function (selected) {
										return selected ? config.$class(
											{
												ctor: '::',
												_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$SelectedMinute,
												_1: {ctor: '[]'}
											}) : config.$class(
											{ctor: '[]'});
									},
									A2(
										_elm_lang$core$Maybe$map,
										F2(
											function (x, y) {
												return _elm_lang$core$Native_Utils.eq(x, y);
											})(min),
										_p32.time.minute))),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'button'),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html_Attributes$attribute,
										'aria-label',
										A2(
											_elm_lang$core$Basics_ops['++'],
											'minute ',
											_elm_lang$core$Basics$toString(min))),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						function (_p29) {
							return _abadi199$datetimepicker$DateTimePicker_DateUtils$padding(
								_elm_lang$core$Basics$toString(_p29));
						}(min)),
					_1: {ctor: '[]'}
				});
		};
		var hourCell = function (hour) {
			return A2(
				_elm_lang$html$Html$td,
				{
					ctor: '::',
					_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
						A3(_abadi199$datetimepicker$DigitalTimePickerPanel$hourClickHandler, config, _p31, hour)),
					_1: {
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_Events$onTouchStartPreventDefault(
							A3(_abadi199$datetimepicker$DigitalTimePickerPanel$hourClickHandler, config, _p31, hour)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Maybe$withDefault,
								config.$class(
									{ctor: '[]'}),
								A2(
									_elm_lang$core$Maybe$map,
									function (selected) {
										return selected ? config.$class(
											{
												ctor: '::',
												_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$SelectedHour,
												_1: {ctor: '[]'}
											}) : config.$class(
											{ctor: '[]'});
									},
									A2(
										_elm_lang$core$Maybe$map,
										F2(
											function (x, y) {
												return _elm_lang$core$Native_Utils.eq(x, y);
											})(hour),
										_p32.time.hour))),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'button'),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html_Attributes$attribute,
										'aria-label',
										A2(
											_elm_lang$core$Basics_ops['++'],
											'hour ',
											_elm_lang$core$Basics$toString(hour))),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						function (_p30) {
							return _abadi199$datetimepicker$DateTimePicker_DateUtils$padding(
								_elm_lang$core$Basics$toString(_p30));
						}(hour)),
					_1: {ctor: '[]'}
				});
		};
		var toRow = F3(
			function (hour, min, ampm) {
				return A2(
					_elm_lang$html$Html$tr,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: hourCell(hour),
						_1: {
							ctor: '::',
							_0: minuteCell(min),
							_1: {
								ctor: '::',
								_0: amPmCell(ampm),
								_1: {ctor: '[]'}
							}
						}
					});
			});
		var ampmList = {
			ctor: '::',
			_0: 'AM',
			_1: {
				ctor: '::',
				_0: 'PM',
				_1: {ctor: '[]'}
			}
		};
		var minutes = A2(_elm_lang$core$List$range, _p32.minutePickerStart, _p32.minutePickerStart + 6);
		var hours = A2(_elm_lang$core$List$range, _p32.hourPickerStart, _p32.hourPickerStart + 6);
		var timeSelector = A4(
			_elm_lang$core$List$map3,
			toRow,
			hours,
			minutes,
			A2(
				_elm_lang$core$Basics_ops['++'],
				ampmList,
				A2(_elm_lang$core$List$repeat, 4, '')));
		var toListItem = function (str) {
			return A2(
				_elm_lang$html$Html$li,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(str),
					_1: {ctor: '[]'}
				});
		};
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: config.$class(
					{
						ctor: '::',
						_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$TimePickerDialog,
						_1: {
							ctor: '::',
							_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$DigitalTime,
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: config.$class(
							{
								ctor: '::',
								_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$Header,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Maybe$withDefault,
								'-- : --',
								A2(_elm_lang$core$Maybe$map, config.titleFormatter, currentDate))),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: config.$class(
								{
									ctor: '::',
									_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$Body,
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$table,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$tbody,
										{ctor: '[]'},
										A2(
											_elm_lang$core$Basics_ops['++'],
											upArrows(config),
											A2(
												_elm_lang$core$Basics_ops['++'],
												timeSelector,
												downArrows(config)))),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});

var _abadi199$datetimepicker$MultiPanel$view = F4(
	function (dateConfig, _p0, state, currentDate) {
		var _p1 = _p0;
		var safeOnChange = F2(
			function (_p3, _p2) {
				var _p4 = _p3;
				var _p6 = _p4._0;
				return A2(
					dateConfig.onChange,
					_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(_p6),
					function () {
						var _p5 = {ctor: '_Tuple4', _0: _p6.date, _1: _p6.time.hour, _2: _p6.time.minute, _3: _p6.time.amPm};
						if (((((_p5.ctor === '_Tuple4') && (_p5._0.ctor === 'Just')) && (_p5._1.ctor === 'Just')) && (_p5._2.ctor === 'Just')) && (_p5._3.ctor === 'Just')) {
							return _elm_lang$core$Maybe$Just(
								A4(_abadi199$datetimepicker$DateTimePicker_DateUtils$setTime, _p5._0._0, _p5._1._0, _p5._2._0, _p5._3._0));
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}());
			});
		var safeDateConfig = _elm_lang$core$Native_Utils.update(
			dateConfig,
			{onChange: safeOnChange});
		var safeTimeConfig = _elm_lang$core$Native_Utils.update(
			_p1._1,
			{onChange: safeOnChange});
		return {
			ctor: '::',
			_0: A3(_abadi199$datetimepicker$DatePickerPanel$view, safeDateConfig, state, currentDate),
			_1: {
				ctor: '::',
				_0: function () {
					var _p7 = _p1._0;
					if (_p7.ctor === 'Digital') {
						return A3(_abadi199$datetimepicker$DigitalTimePickerPanel$view, safeTimeConfig, state, currentDate);
					} else {
						return A3(_abadi199$datetimepicker$AnalogTimePickerPanel$view, safeTimeConfig, state, currentDate);
					}
				}(),
				_1: {ctor: '[]'}
			}
		};
	});

var _abadi199$datetimepicker$DateTimePicker$onChangeHandler = F3(
	function (pickerType, _p0, currentDate) {
		var _p1 = _p0;
		var _p5 = _p1._0;
		var _p4 = _p1;
		var withTimeHandler = function (config) {
			var _p2 = {ctor: '_Tuple4', _0: _p5.date, _1: _p5.time.hour, _2: _p5.time.minute, _3: _p5.time.amPm};
			if (((((_p2.ctor === '_Tuple4') && (_p2._0.ctor === 'Just')) && (_p2._1.ctor === 'Just')) && (_p2._2.ctor === 'Just')) && (_p2._3.ctor === 'Just')) {
				return A2(
					config.onChange,
					_p4,
					_elm_lang$core$Maybe$Just(
						A4(_abadi199$datetimepicker$DateTimePicker_DateUtils$setTime, _p2._0._0, _p2._1._0, _p2._2._0, _p2._3._0)));
			} else {
				return A2(config.onChange, _p4, _elm_lang$core$Maybe$Nothing);
			}
		};
		var justDateHandler = function (config) {
			return A2(config.onChange, _p4, _p5.date);
		};
		var _p3 = pickerType;
		switch (_p3.ctor) {
			case 'DateType':
				return justDateHandler(_p3._0);
			case 'DateTimeType':
				return withTimeHandler(_p3._0);
			default:
				return withTimeHandler(_p3._0);
		}
	});
var _abadi199$datetimepicker$DateTimePicker$datePickerFocused = F4(
	function (pickerType, config, _p6, currentDate) {
		var _p7 = _p6;
		var _p12 = _p7._0;
		var updateTime = function (time) {
			return _elm_lang$core$Native_Utils.update(
				time,
				{
					hour: A2(
						_elm_lang$core$Maybe$map,
						function (_p8) {
							return _abadi199$datetimepicker$DateTimePicker_DateUtils$fromMillitaryHour(
								_elm_lang$core$Date$hour(_p8));
						},
						currentDate),
					minute: A2(_elm_lang$core$Maybe$map, _elm_lang$core$Date$minute, currentDate),
					amPm: A2(
						_elm_lang$core$Maybe$map,
						function (_p9) {
							return _abadi199$datetimepicker$DateTimePicker_DateUtils$fromMillitaryAmPm(
								_elm_lang$core$Date$hour(_p9));
						},
						currentDate)
				});
		};
		var updatedTitleDate = function () {
			var _p10 = currentDate;
			if (_p10.ctor === 'Nothing') {
				return _p12.titleDate;
			} else {
				return currentDate;
			}
		}();
		return A2(
			config.onChange,
			_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
				_elm_lang$core$Native_Utils.update(
					_p12,
					{
						inputFocused: true,
						event: 'onFocus',
						titleDate: updatedTitleDate,
						date: currentDate,
						forceClose: false,
						time: updateTime(_p12.time),
						activeTimeIndicator: function () {
							var _p11 = pickerType;
							if (_p11.ctor === 'TimeType') {
								return _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$HourIndicator);
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						}()
					})),
			currentDate);
	});
var _abadi199$datetimepicker$DateTimePicker$dialog = F3(
	function (pickerType, _p13, currentDate) {
		var _p14 = _p13;
		var _p21 = _p14._0;
		var attributes = function (config) {
			return {
				ctor: '::',
				_0: _abadi199$datetimepicker$DateTimePicker_Events$onMouseDownPreventDefault(
					A2(
						config.onChange,
						_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
							_elm_lang$core$Native_Utils.update(
								_p21,
								{event: 'dialog.onMouseDownPreventDefault'})),
						currentDate)),
				_1: {
					ctor: '::',
					_0: config.$class(
						{
							ctor: '::',
							_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$Dialog,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			};
		};
		var withTimeAttributes = F2(
			function (config, timePickerType) {
				var _p15 = timePickerType;
				if (_p15.ctor === 'Analog') {
					return {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							A3(
								_abadi199$datetimepicker$DateTimePicker$onChangeHandler,
								pickerType,
								_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(_p21),
								currentDate)),
						_1: attributes(config)
					};
				} else {
					return attributes(config);
				}
			});
		var _p16 = pickerType;
		switch (_p16.ctor) {
			case 'DateType':
				var _p17 = _p16._0;
				return A2(
					_elm_lang$html$Html$div,
					attributes(_p17),
					{
						ctor: '::',
						_0: A3(
							_abadi199$datetimepicker$DatePickerPanel$view,
							{onChange: _p17.onChange, nameOfDays: _p17.nameOfDays, firstDayOfWeek: _p17.firstDayOfWeek, allowYearNavigation: _p17.allowYearNavigation, titleFormatter: _p17.i18n.titleFormatter, footerFormatter: _p17.i18n.footerFormatter, $class: _p17.$class},
							_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(_p21),
							currentDate),
						_1: {ctor: '[]'}
					});
			case 'TimeType':
				var _p19 = _p16._0;
				var dialog = function () {
					var _p18 = _p19.timePickerType;
					if (_p18.ctor === 'Digital') {
						return _abadi199$datetimepicker$DigitalTimePickerPanel$view;
					} else {
						return _abadi199$datetimepicker$AnalogTimePickerPanel$view;
					}
				}();
				return A2(
					_elm_lang$html$Html$div,
					A2(withTimeAttributes, _p19, _p19.timePickerType),
					{
						ctor: '::',
						_0: A3(
							dialog,
							{onChange: _p19.onChange, titleFormatter: _p19.i18n.timeTitleFormatter, $class: _p19.$class},
							_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(_p21),
							currentDate),
						_1: {ctor: '[]'}
					});
			default:
				var _p20 = _p16._0;
				return A2(
					_elm_lang$html$Html$div,
					A2(withTimeAttributes, _p20, _p20.timePickerType),
					A4(
						_abadi199$datetimepicker$MultiPanel$view,
						{onChange: _p20.onChange, nameOfDays: _p20.nameOfDays, firstDayOfWeek: _p20.firstDayOfWeek, allowYearNavigation: _p20.allowYearNavigation, titleFormatter: _p20.i18n.titleFormatter, footerFormatter: _p20.i18n.footerFormatter, $class: _p20.$class},
						{
							ctor: '_Tuple2',
							_0: _p20.timePickerType,
							_1: {onChange: _p20.onChange, titleFormatter: _p20.i18n.timeTitleFormatter, $class: _p20.$class}
						},
						_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(_p21),
						currentDate));
		}
	});
var _abadi199$datetimepicker$DateTimePicker$initialCmd = F2(
	function (onChange, _p22) {
		var _p23 = _p22;
		var setDate = function (now) {
			return _abadi199$datetimepicker$DateTimePicker_Internal$InternalState(
				_elm_lang$core$Native_Utils.update(
					_p23._0,
					{
						today: _elm_lang$core$Maybe$Just(now),
						titleDate: _elm_lang$core$Maybe$Just(
							_rluiten$elm_date_extra$Date_Extra_Core$toFirstOfMonth(now))
					}));
		};
		return A2(
			_elm_lang$core$Task$perform,
			_elm_lang$core$Basics$flip(
				function (_p24) {
					return onChange(
						setDate(_p24));
				})(_elm_lang$core$Maybe$Nothing),
			_elm_lang$core$Date$now);
	});
var _abadi199$datetimepicker$DateTimePicker$initialStateWithToday = function (today) {
	return _abadi199$datetimepicker$DateTimePicker_Internal$initialStateWithToday(today);
};
var _abadi199$datetimepicker$DateTimePicker$initialState = _abadi199$datetimepicker$DateTimePicker_Internal$initialState;
var _abadi199$datetimepicker$DateTimePicker$inputChangeHandler = F4(
	function (config, _p25, currentDate, maybeDate) {
		var _p26 = _p25;
		var _p32 = _p26._0;
		var _p27 = _abadi199$datetimepicker$DateTimePicker$initialState;
		var initialStateValue = _p27._0;
		var _p28 = maybeDate;
		if (_p28.ctor === 'Just') {
			var _p29 = _p28._0;
			var updateTime = function (time) {
				return _elm_lang$core$Native_Utils.update(
					time,
					{
						hour: _elm_lang$core$Maybe$Just(
							_abadi199$datetimepicker$DateTimePicker_DateUtils$fromMillitaryHour(
								_elm_lang$core$Date$hour(_p29))),
						minute: _elm_lang$core$Maybe$Just(
							_elm_lang$core$Date$minute(_p29)),
						amPm: _elm_lang$core$Maybe$Just(
							_abadi199$datetimepicker$DateTimePicker_DateUtils$fromMillitaryAmPm(
								_elm_lang$core$Date$hour(_p29)))
					});
			};
			var updatedValue = _elm_lang$core$Native_Utils.update(
				_p32,
				{
					date: _elm_lang$core$Maybe$Just(_p29),
					time: updateTime(_p32.time),
					inputFocused: false,
					event: 'inputChangeHandler'
				});
			return A2(
				config.onChange,
				_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(updatedValue),
				maybeDate);
		} else {
			var _p30 = function () {
				var _p31 = currentDate;
				if (_p31.ctor === 'Just') {
					return {
						ctor: '_Tuple3',
						_0: {hour: _elm_lang$core$Maybe$Nothing, minute: _elm_lang$core$Maybe$Nothing, amPm: _elm_lang$core$Maybe$Nothing},
						_1: _elm_lang$core$Maybe$Just(_abadi199$datetimepicker$DateTimePicker_Internal$HourIndicator),
						_2: _elm_lang$core$Maybe$Nothing
					};
				} else {
					return {ctor: '_Tuple3', _0: _p32.time, _1: _p32.activeTimeIndicator, _2: _p32.date};
				}
			}();
			var updatedTime = _p30._0;
			var updatedActiveTimeIndicator = _p30._1;
			var updatedDate = _p30._2;
			var updatedValue = _elm_lang$core$Native_Utils.update(
				_p32,
				{date: updatedDate, time: updatedTime, hourPickerStart: initialStateValue.hourPickerStart, minutePickerStart: initialStateValue.minutePickerStart, inputFocused: false, event: 'inputChangeHandler', activeTimeIndicator: updatedActiveTimeIndicator});
			return A2(
				config.onChange,
				_abadi199$datetimepicker$DateTimePicker_Internal$InternalState(updatedValue),
				maybeDate);
		}
	});
var _abadi199$datetimepicker$DateTimePicker$view = F4(
	function (pickerType, attributes, _p33, currentDate) {
		var _p34 = _p33;
		var _p40 = _p34._0;
		var _p39 = _p34;
		var shouldForceClose = function (config) {
			return config.autoClose && _p40.forceClose;
		};
		var inputAttributes = function (config) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				attributes,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onFocus(
						A4(_abadi199$datetimepicker$DateTimePicker$datePickerFocused, pickerType, config, _p39, currentDate)),
					_1: {
						ctor: '::',
						_0: A2(
							_abadi199$datetimepicker$DateTimePicker_Events$onBlurWithChange,
							config.i18n.inputFormat.inputParser,
							A3(_abadi199$datetimepicker$DateTimePicker$inputChangeHandler, config, _p39, currentDate)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$value(
								A2(
									_elm_lang$core$Maybe$withDefault,
									'',
									A2(_elm_lang$core$Maybe$map, config.i18n.inputFormat.inputFormatter, currentDate))),
							_1: {ctor: '[]'}
						}
					}
				});
		};
		var html = F2(
			function (config, cssClasses) {
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '::', _0: cssClasses, _1: config.attributes},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							inputAttributes(config),
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: (config.usePicker && (_p40.inputFocused && (!shouldForceClose(config)))) ? A3(_abadi199$datetimepicker$DateTimePicker$dialog, pickerType, _p39, currentDate) : _elm_lang$html$Html$text(''),
							_1: {ctor: '[]'}
						}
					});
			});
		var timeFormatter = function (dateTimePickerConfig) {
			return dateTimePickerConfig.timeFormatter;
		};
		var _p35 = pickerType;
		switch (_p35.ctor) {
			case 'DateType':
				var _p36 = _p35._0;
				return A2(
					html,
					_p36,
					_p36.$class(
						{
							ctor: '::',
							_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$DatePicker,
							_1: {ctor: '[]'}
						}));
			case 'DateTimeType':
				var _p37 = _p35._0;
				return A2(
					html,
					_p37,
					_p37.$class(
						{
							ctor: '::',
							_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$DatePicker,
							_1: {
								ctor: '::',
								_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$TimePicker,
								_1: {ctor: '[]'}
							}
						}));
			default:
				var _p38 = _p35._0;
				return A2(
					html,
					_p38,
					_p38.$class(
						{
							ctor: '::',
							_0: _abadi199$datetimepicker$DateTimePicker_SharedStyles$TimePicker,
							_1: {ctor: '[]'}
						}));
		}
	});
var _abadi199$datetimepicker$DateTimePicker$datePickerWithConfig = function (config) {
	return _abadi199$datetimepicker$DateTimePicker$view(
		_abadi199$datetimepicker$DateTimePicker_Config$DateType(config));
};
var _abadi199$datetimepicker$DateTimePicker$datePicker = function (onChange) {
	return _abadi199$datetimepicker$DateTimePicker$datePickerWithConfig(
		_abadi199$datetimepicker$DateTimePicker_Config$defaultDatePickerConfig(onChange));
};
var _abadi199$datetimepicker$DateTimePicker$dateTimePickerWithConfig = function (config) {
	return _abadi199$datetimepicker$DateTimePicker$view(
		_abadi199$datetimepicker$DateTimePicker_Config$DateTimeType(config));
};
var _abadi199$datetimepicker$DateTimePicker$dateTimePicker = function (onChange) {
	return _abadi199$datetimepicker$DateTimePicker$dateTimePickerWithConfig(
		_abadi199$datetimepicker$DateTimePicker_Config$defaultDateTimePickerConfig(onChange));
};
var _abadi199$datetimepicker$DateTimePicker$timePickerWithConfig = function (config) {
	return _abadi199$datetimepicker$DateTimePicker$view(
		_abadi199$datetimepicker$DateTimePicker_Config$TimeType(config));
};
var _abadi199$datetimepicker$DateTimePicker$timePicker = function (onChange) {
	return _abadi199$datetimepicker$DateTimePicker$timePickerWithConfig(
		_abadi199$datetimepicker$DateTimePicker_Config$defaultTimePickerConfig(onChange));
};

var _elm_community$json_extra$Json_Decode_Extra$combine = A2(
	_elm_lang$core$List$foldr,
	_elm_lang$core$Json_Decode$map2(
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			})),
	_elm_lang$core$Json_Decode$succeed(
		{ctor: '[]'}));
var _elm_community$json_extra$Json_Decode_Extra$collection = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (length) {
			return _elm_community$json_extra$Json_Decode_Extra$combine(
				A2(
					_elm_lang$core$List$map,
					function (index) {
						return A2(
							_elm_lang$core$Json_Decode$field,
							_elm_lang$core$Basics$toString(index),
							decoder);
					},
					A2(_elm_lang$core$List$range, 0, length - 1)));
		},
		A2(_elm_lang$core$Json_Decode$field, 'length', _elm_lang$core$Json_Decode$int));
};
var _elm_community$json_extra$Json_Decode_Extra$fromResult = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Json_Decode$succeed(_p0._0);
	} else {
		return _elm_lang$core$Json_Decode$fail(_p0._0);
	}
};
var _elm_community$json_extra$Json_Decode_Extra$parseInt = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p1) {
		return _elm_community$json_extra$Json_Decode_Extra$fromResult(
			_elm_lang$core$String$toInt(_p1));
	},
	_elm_lang$core$Json_Decode$string);
var _elm_community$json_extra$Json_Decode_Extra$parseFloat = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p2) {
		return _elm_community$json_extra$Json_Decode_Extra$fromResult(
			_elm_lang$core$String$toFloat(_p2));
	},
	_elm_lang$core$Json_Decode$string);
var _elm_community$json_extra$Json_Decode_Extra$doubleEncoded = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (_p3) {
			return _elm_community$json_extra$Json_Decode_Extra$fromResult(
				A2(_elm_lang$core$Json_Decode$decodeString, decoder, _p3));
		},
		_elm_lang$core$Json_Decode$string);
};
var _elm_community$json_extra$Json_Decode_Extra$keys = A2(
	_elm_lang$core$Json_Decode$map,
	A2(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, acc) {
				var _p5 = _p4;
				return {ctor: '::', _0: _p5._0, _1: acc};
			}),
		{ctor: '[]'}),
	_elm_lang$core$Json_Decode$keyValuePairs(
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'})));
var _elm_community$json_extra$Json_Decode_Extra$sequenceHelp = F2(
	function (decoders, jsonValues) {
		return (!_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(jsonValues),
			_elm_lang$core$List$length(decoders))) ? _elm_lang$core$Json_Decode$fail('Number of decoders does not match number of values') : _elm_community$json_extra$Json_Decode_Extra$fromResult(
			A3(
				_elm_lang$core$List$foldr,
				_elm_lang$core$Result$map2(
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})),
				_elm_lang$core$Result$Ok(
					{ctor: '[]'}),
				A3(_elm_lang$core$List$map2, _elm_lang$core$Json_Decode$decodeValue, decoders, jsonValues)));
	});
var _elm_community$json_extra$Json_Decode_Extra$sequence = function (decoders) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		_elm_community$json_extra$Json_Decode_Extra$sequenceHelp(decoders),
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value));
};
var _elm_community$json_extra$Json_Decode_Extra$indexedList = function (indexedDecoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (values) {
			return _elm_community$json_extra$Json_Decode_Extra$sequence(
				A2(
					_elm_lang$core$List$map,
					indexedDecoder,
					A2(
						_elm_lang$core$List$range,
						0,
						_elm_lang$core$List$length(values) - 1)));
		},
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value));
};
var _elm_community$json_extra$Json_Decode_Extra$optionalField = F2(
	function (fieldName, decoder) {
		var finishDecoding = function (json) {
			var _p6 = A2(
				_elm_lang$core$Json_Decode$decodeValue,
				A2(_elm_lang$core$Json_Decode$field, fieldName, _elm_lang$core$Json_Decode$value),
				json);
			if (_p6.ctor === 'Ok') {
				return A2(
					_elm_lang$core$Json_Decode$map,
					_elm_lang$core$Maybe$Just,
					A2(_elm_lang$core$Json_Decode$field, fieldName, decoder));
			} else {
				return _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Maybe$Nothing);
			}
		};
		return A2(_elm_lang$core$Json_Decode$andThen, finishDecoding, _elm_lang$core$Json_Decode$value);
	});
var _elm_community$json_extra$Json_Decode_Extra$withDefault = F2(
	function (fallback, decoder) {
		return A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$Maybe$withDefault(fallback),
			_elm_lang$core$Json_Decode$maybe(decoder));
	});
var _elm_community$json_extra$Json_Decode_Extra$decodeDictFromTuples = F2(
	function (keyDecoder, tuples) {
		var _p7 = tuples;
		if (_p7.ctor === '[]') {
			return _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Dict$empty);
		} else {
			var _p8 = A2(_elm_lang$core$Json_Decode$decodeString, keyDecoder, _p7._0._0);
			if (_p8.ctor === 'Ok') {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					function (_p9) {
						return _elm_lang$core$Json_Decode$succeed(
							A3(_elm_lang$core$Dict$insert, _p8._0, _p7._0._1, _p9));
					},
					A2(_elm_community$json_extra$Json_Decode_Extra$decodeDictFromTuples, keyDecoder, _p7._1));
			} else {
				return _elm_lang$core$Json_Decode$fail(_p8._0);
			}
		}
	});
var _elm_community$json_extra$Json_Decode_Extra$dict2 = F2(
	function (keyDecoder, valueDecoder) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			_elm_community$json_extra$Json_Decode_Extra$decodeDictFromTuples(keyDecoder),
			_elm_lang$core$Json_Decode$keyValuePairs(valueDecoder));
	});
var _elm_community$json_extra$Json_Decode_Extra$set = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Set$fromList,
		_elm_lang$core$Json_Decode$list(decoder));
};
var _elm_community$json_extra$Json_Decode_Extra$date = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p10) {
		return _elm_community$json_extra$Json_Decode_Extra$fromResult(
			_elm_lang$core$Date$fromString(_p10));
	},
	_elm_lang$core$Json_Decode$string);
var _elm_community$json_extra$Json_Decode_Extra$andMap = _elm_lang$core$Json_Decode$map2(
	F2(
		function (x, y) {
			return y(x);
		}));
var _elm_community$json_extra$Json_Decode_Extra_ops = _elm_community$json_extra$Json_Decode_Extra_ops || {};
_elm_community$json_extra$Json_Decode_Extra_ops['|:'] = _elm_lang$core$Basics$flip(_elm_community$json_extra$Json_Decode_Extra$andMap);

var _elm_lang$core$Process$kill = _elm_lang$core$Native_Scheduler.kill;
var _elm_lang$core$Process$sleep = _elm_lang$core$Native_Scheduler.sleep;
var _elm_lang$core$Process$spawn = _elm_lang$core$Native_Scheduler.spawn;

var _elm_lang$dom$Native_Dom = function() {

var fakeNode = {
	addEventListener: function() {},
	removeEventListener: function() {}
};

var onDocument = on(typeof document !== 'undefined' ? document : fakeNode);
var onWindow = on(typeof window !== 'undefined' ? window : fakeNode);

function on(node)
{
	return function(eventName, decoder, toTask)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {

			function performTask(event)
			{
				var result = A2(_elm_lang$core$Json_Decode$decodeValue, decoder, event);
				if (result.ctor === 'Ok')
				{
					_elm_lang$core$Native_Scheduler.rawSpawn(toTask(result._0));
				}
			}

			node.addEventListener(eventName, performTask);

			return function()
			{
				node.removeEventListener(eventName, performTask);
			};
		});
	};
}

var rAF = typeof requestAnimationFrame !== 'undefined'
	? requestAnimationFrame
	: function(callback) { callback(); };

function withNode(id, doStuff)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		rAF(function()
		{
			var node = document.getElementById(id);
			if (node === null)
			{
				callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NotFound', _0: id }));
				return;
			}
			callback(_elm_lang$core$Native_Scheduler.succeed(doStuff(node)));
		});
	});
}


// FOCUS

function focus(id)
{
	return withNode(id, function(node) {
		node.focus();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function blur(id)
{
	return withNode(id, function(node) {
		node.blur();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SCROLLING

function getScrollTop(id)
{
	return withNode(id, function(node) {
		return node.scrollTop;
	});
}

function setScrollTop(id, desiredScrollTop)
{
	return withNode(id, function(node) {
		node.scrollTop = desiredScrollTop;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toBottom(id)
{
	return withNode(id, function(node) {
		node.scrollTop = node.scrollHeight;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function getScrollLeft(id)
{
	return withNode(id, function(node) {
		return node.scrollLeft;
	});
}

function setScrollLeft(id, desiredScrollLeft)
{
	return withNode(id, function(node) {
		node.scrollLeft = desiredScrollLeft;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toRight(id)
{
	return withNode(id, function(node) {
		node.scrollLeft = node.scrollWidth;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SIZE

function width(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollWidth;
			case 'VisibleContent':
				return node.clientWidth;
			case 'VisibleContentWithBorders':
				return node.offsetWidth;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.right - rect.left;
		}
	});
}

function height(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollHeight;
			case 'VisibleContent':
				return node.clientHeight;
			case 'VisibleContentWithBorders':
				return node.offsetHeight;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.bottom - rect.top;
		}
	});
}

return {
	onDocument: F3(onDocument),
	onWindow: F3(onWindow),

	focus: focus,
	blur: blur,

	getScrollTop: getScrollTop,
	setScrollTop: F2(setScrollTop),
	getScrollLeft: getScrollLeft,
	setScrollLeft: F2(setScrollLeft),
	toBottom: toBottom,
	toRight: toRight,

	height: F2(height),
	width: F2(width)
};

}();

var _elm_lang$dom$Dom_LowLevel$onWindow = _elm_lang$dom$Native_Dom.onWindow;
var _elm_lang$dom$Dom_LowLevel$onDocument = _elm_lang$dom$Native_Dom.onDocument;

var _elm_lang$html$Html_Keyed$node = _elm_lang$virtual_dom$VirtualDom$keyedNode;
var _elm_lang$html$Html_Keyed$ol = _elm_lang$html$Html_Keyed$node('ol');
var _elm_lang$html$Html_Keyed$ul = _elm_lang$html$Html_Keyed$node('ul');

var _elm_lang$http$Native_Http = function() {


// ENCODING AND DECODING

function encodeUri(string)
{
	return encodeURIComponent(string);
}

function decodeUri(string)
{
	try
	{
		return _elm_lang$core$Maybe$Just(decodeURIComponent(string));
	}
	catch(e)
	{
		return _elm_lang$core$Maybe$Nothing;
	}
}


// SEND REQUEST

function toTask(request, maybeProgress)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var xhr = new XMLHttpRequest();

		configureProgress(xhr, maybeProgress);

		xhr.addEventListener('error', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NetworkError' }));
		});
		xhr.addEventListener('timeout', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'Timeout' }));
		});
		xhr.addEventListener('load', function() {
			callback(handleResponse(xhr, request.expect.responseToResult));
		});

		try
		{
			xhr.open(request.method, request.url, true);
		}
		catch (e)
		{
			return callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'BadUrl', _0: request.url }));
		}

		configureRequest(xhr, request);
		send(xhr, request.body);

		return function() { xhr.abort(); };
	});
}

function configureProgress(xhr, maybeProgress)
{
	if (maybeProgress.ctor === 'Nothing')
	{
		return;
	}

	xhr.addEventListener('progress', function(event) {
		if (!event.lengthComputable)
		{
			return;
		}
		_elm_lang$core$Native_Scheduler.rawSpawn(maybeProgress._0({
			bytes: event.loaded,
			bytesExpected: event.total
		}));
	});
}

function configureRequest(xhr, request)
{
	function setHeader(pair)
	{
		xhr.setRequestHeader(pair._0, pair._1);
	}

	A2(_elm_lang$core$List$map, setHeader, request.headers);
	xhr.responseType = request.expect.responseType;
	xhr.withCredentials = request.withCredentials;

	if (request.timeout.ctor === 'Just')
	{
		xhr.timeout = request.timeout._0;
	}
}

function send(xhr, body)
{
	switch (body.ctor)
	{
		case 'EmptyBody':
			xhr.send();
			return;

		case 'StringBody':
			xhr.setRequestHeader('Content-Type', body._0);
			xhr.send(body._1);
			return;

		case 'FormDataBody':
			xhr.send(body._0);
			return;
	}
}


// RESPONSES

function handleResponse(xhr, responseToResult)
{
	var response = toResponse(xhr);

	if (xhr.status < 200 || 300 <= xhr.status)
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadStatus',
			_0: response
		});
	}

	var result = responseToResult(response);

	if (result.ctor === 'Ok')
	{
		return _elm_lang$core$Native_Scheduler.succeed(result._0);
	}
	else
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadPayload',
			_0: result._0,
			_1: response
		});
	}
}

function toResponse(xhr)
{
	return {
		status: { code: xhr.status, message: xhr.statusText },
		headers: parseHeaders(xhr.getAllResponseHeaders()),
		url: xhr.responseURL,
		body: xhr.response
	};
}

function parseHeaders(rawHeaders)
{
	var headers = _elm_lang$core$Dict$empty;

	if (!rawHeaders)
	{
		return headers;
	}

	var headerPairs = rawHeaders.split('\u000d\u000a');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf('\u003a\u0020');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3(_elm_lang$core$Dict$update, key, function(oldValue) {
				if (oldValue.ctor === 'Just')
				{
					return _elm_lang$core$Maybe$Just(value + ', ' + oldValue._0);
				}
				return _elm_lang$core$Maybe$Just(value);
			}, headers);
		}
	}

	return headers;
}


// EXPECTORS

function expectStringResponse(responseToResult)
{
	return {
		responseType: 'text',
		responseToResult: responseToResult
	};
}

function mapExpect(func, expect)
{
	return {
		responseType: expect.responseType,
		responseToResult: function(response) {
			var convertedResponse = expect.responseToResult(response);
			return A2(_elm_lang$core$Result$map, func, convertedResponse);
		}
	};
}


// BODY

function multipart(parts)
{
	var formData = new FormData();

	while (parts.ctor !== '[]')
	{
		var part = parts._0;
		formData.append(part._0, part._1);
		parts = parts._1;
	}

	return { ctor: 'FormDataBody', _0: formData };
}

return {
	toTask: F2(toTask),
	expectStringResponse: expectStringResponse,
	mapExpect: F2(mapExpect),
	multipart: multipart,
	encodeUri: encodeUri,
	decodeUri: decodeUri
};

}();

var _elm_lang$http$Http_Internal$map = F2(
	function (func, request) {
		return _elm_lang$core$Native_Utils.update(
			request,
			{
				expect: A2(_elm_lang$http$Native_Http.mapExpect, func, request.expect)
			});
	});
var _elm_lang$http$Http_Internal$RawRequest = F7(
	function (a, b, c, d, e, f, g) {
		return {method: a, headers: b, url: c, body: d, expect: e, timeout: f, withCredentials: g};
	});
var _elm_lang$http$Http_Internal$Request = function (a) {
	return {ctor: 'Request', _0: a};
};
var _elm_lang$http$Http_Internal$Expect = {ctor: 'Expect'};
var _elm_lang$http$Http_Internal$FormDataBody = {ctor: 'FormDataBody'};
var _elm_lang$http$Http_Internal$StringBody = F2(
	function (a, b) {
		return {ctor: 'StringBody', _0: a, _1: b};
	});
var _elm_lang$http$Http_Internal$EmptyBody = {ctor: 'EmptyBody'};
var _elm_lang$http$Http_Internal$Header = F2(
	function (a, b) {
		return {ctor: 'Header', _0: a, _1: b};
	});

var _elm_lang$http$Http$decodeUri = _elm_lang$http$Native_Http.decodeUri;
var _elm_lang$http$Http$encodeUri = _elm_lang$http$Native_Http.encodeUri;
var _elm_lang$http$Http$expectStringResponse = _elm_lang$http$Native_Http.expectStringResponse;
var _elm_lang$http$Http$expectJson = function (decoder) {
	return _elm_lang$http$Http$expectStringResponse(
		function (response) {
			return A2(_elm_lang$core$Json_Decode$decodeString, decoder, response.body);
		});
};
var _elm_lang$http$Http$expectString = _elm_lang$http$Http$expectStringResponse(
	function (response) {
		return _elm_lang$core$Result$Ok(response.body);
	});
var _elm_lang$http$Http$multipartBody = _elm_lang$http$Native_Http.multipart;
var _elm_lang$http$Http$stringBody = _elm_lang$http$Http_Internal$StringBody;
var _elm_lang$http$Http$jsonBody = function (value) {
	return A2(
		_elm_lang$http$Http_Internal$StringBody,
		'application/json',
		A2(_elm_lang$core$Json_Encode$encode, 0, value));
};
var _elm_lang$http$Http$emptyBody = _elm_lang$http$Http_Internal$EmptyBody;
var _elm_lang$http$Http$header = _elm_lang$http$Http_Internal$Header;
var _elm_lang$http$Http$request = _elm_lang$http$Http_Internal$Request;
var _elm_lang$http$Http$post = F3(
	function (url, body, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {ctor: '[]'},
				url: url,
				body: body,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$get = F2(
	function (url, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'GET',
				headers: {ctor: '[]'},
				url: url,
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$getString = function (url) {
	return _elm_lang$http$Http$request(
		{
			method: 'GET',
			headers: {ctor: '[]'},
			url: url,
			body: _elm_lang$http$Http$emptyBody,
			expect: _elm_lang$http$Http$expectString,
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
var _elm_lang$http$Http$toTask = function (_p0) {
	var _p1 = _p0;
	return A2(_elm_lang$http$Native_Http.toTask, _p1._0, _elm_lang$core$Maybe$Nothing);
};
var _elm_lang$http$Http$send = F2(
	function (resultToMessage, request) {
		return A2(
			_elm_lang$core$Task$attempt,
			resultToMessage,
			_elm_lang$http$Http$toTask(request));
	});
var _elm_lang$http$Http$Response = F4(
	function (a, b, c, d) {
		return {url: a, status: b, headers: c, body: d};
	});
var _elm_lang$http$Http$BadPayload = F2(
	function (a, b) {
		return {ctor: 'BadPayload', _0: a, _1: b};
	});
var _elm_lang$http$Http$BadStatus = function (a) {
	return {ctor: 'BadStatus', _0: a};
};
var _elm_lang$http$Http$NetworkError = {ctor: 'NetworkError'};
var _elm_lang$http$Http$Timeout = {ctor: 'Timeout'};
var _elm_lang$http$Http$BadUrl = function (a) {
	return {ctor: 'BadUrl', _0: a};
};
var _elm_lang$http$Http$StringPart = F2(
	function (a, b) {
		return {ctor: 'StringPart', _0: a, _1: b};
	});
var _elm_lang$http$Http$stringPart = _elm_lang$http$Http$StringPart;

var _elm_lang$keyboard$Keyboard$onSelfMsg = F3(
	function (router, _p0, state) {
		var _p1 = _p0;
		var _p2 = A2(_elm_lang$core$Dict$get, _p1.category, state);
		if (_p2.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (tagger) {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					tagger(_p1.keyCode));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p3) {
					return _elm_lang$core$Task$succeed(state);
				},
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p2._0.taggers)));
		}
	});
var _elm_lang$keyboard$Keyboard_ops = _elm_lang$keyboard$Keyboard_ops || {};
_elm_lang$keyboard$Keyboard_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p4) {
				return task2;
			},
			task1);
	});
var _elm_lang$keyboard$Keyboard$init = _elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty);
var _elm_lang$keyboard$Keyboard$categorizeHelpHelp = F2(
	function (value, maybeValues) {
		var _p5 = maybeValues;
		if (_p5.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: value,
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$core$Maybe$Just(
				{ctor: '::', _0: value, _1: _p5._0});
		}
	});
var _elm_lang$keyboard$Keyboard$categorizeHelp = F2(
	function (subs, subDict) {
		categorizeHelp:
		while (true) {
			var _p6 = subs;
			if (_p6.ctor === '[]') {
				return subDict;
			} else {
				var _v4 = _p6._1,
					_v5 = A3(
					_elm_lang$core$Dict$update,
					_p6._0._0,
					_elm_lang$keyboard$Keyboard$categorizeHelpHelp(_p6._0._1),
					subDict);
				subs = _v4;
				subDict = _v5;
				continue categorizeHelp;
			}
		}
	});
var _elm_lang$keyboard$Keyboard$categorize = function (subs) {
	return A2(_elm_lang$keyboard$Keyboard$categorizeHelp, subs, _elm_lang$core$Dict$empty);
};
var _elm_lang$keyboard$Keyboard$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$keyboard$Keyboard$subscription = _elm_lang$core$Native_Platform.leaf('Keyboard');
var _elm_lang$keyboard$Keyboard$Watcher = F2(
	function (a, b) {
		return {taggers: a, pid: b};
	});
var _elm_lang$keyboard$Keyboard$Msg = F2(
	function (a, b) {
		return {category: a, keyCode: b};
	});
var _elm_lang$keyboard$Keyboard$onEffects = F3(
	function (router, newSubs, oldState) {
		var rightStep = F3(
			function (category, taggers, task) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (pid) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$core$Dict$insert,
										category,
										A2(_elm_lang$keyboard$Keyboard$Watcher, taggers, pid),
										state));
							},
							_elm_lang$core$Process$spawn(
								A3(
									_elm_lang$dom$Dom_LowLevel$onDocument,
									category,
									_elm_lang$keyboard$Keyboard$keyCode,
									function (_p7) {
										return A2(
											_elm_lang$core$Platform$sendToSelf,
											router,
											A2(_elm_lang$keyboard$Keyboard$Msg, category, _p7));
									})));
					},
					task);
			});
		var bothStep = F4(
			function (category, _p8, taggers, task) {
				var _p9 = _p8;
				return A2(
					_elm_lang$core$Task$map,
					A2(
						_elm_lang$core$Dict$insert,
						category,
						A2(_elm_lang$keyboard$Keyboard$Watcher, taggers, _p9.pid)),
					task);
			});
		var leftStep = F3(
			function (category, _p10, task) {
				var _p11 = _p10;
				return A2(
					_elm_lang$keyboard$Keyboard_ops['&>'],
					_elm_lang$core$Process$kill(_p11.pid),
					task);
			});
		return A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			oldState,
			_elm_lang$keyboard$Keyboard$categorize(newSubs),
			_elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty));
	});
var _elm_lang$keyboard$Keyboard$MySub = F2(
	function (a, b) {
		return {ctor: 'MySub', _0: a, _1: b};
	});
var _elm_lang$keyboard$Keyboard$presses = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keypress', tagger));
};
var _elm_lang$keyboard$Keyboard$downs = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keydown', tagger));
};
var _elm_lang$keyboard$Keyboard$ups = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keyup', tagger));
};
var _elm_lang$keyboard$Keyboard$subMap = F2(
	function (func, _p12) {
		var _p13 = _p12;
		return A2(
			_elm_lang$keyboard$Keyboard$MySub,
			_p13._0,
			function (_p14) {
				return func(
					_p13._1(_p14));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Keyboard'] = {pkg: 'elm-lang/keyboard', init: _elm_lang$keyboard$Keyboard$init, onEffects: _elm_lang$keyboard$Keyboard$onEffects, onSelfMsg: _elm_lang$keyboard$Keyboard$onSelfMsg, tag: 'sub', subMap: _elm_lang$keyboard$Keyboard$subMap};

var _elm_lang$navigation$Native_Navigation = function() {


// FAKE NAVIGATION

function go(n)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		if (n !== 0)
		{
			history.go(n);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function pushState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.pushState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}

function replaceState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.replaceState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}


// REAL NAVIGATION

function reloadPage(skipCache)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		document.location.reload(skipCache);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function setLocation(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		try
		{
			window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			document.location.reload(false);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


// GET LOCATION

function getLocation()
{
	var location = document.location;

	return {
		href: location.href,
		host: location.host,
		hostname: location.hostname,
		protocol: location.protocol,
		origin: location.origin,
		port_: location.port,
		pathname: location.pathname,
		search: location.search,
		hash: location.hash,
		username: location.username,
		password: location.password
	};
}


// DETECT IE11 PROBLEMS

function isInternetExplorer11()
{
	return window.navigator.userAgent.indexOf('Trident') !== -1;
}


return {
	go: go,
	setLocation: setLocation,
	reloadPage: reloadPage,
	pushState: pushState,
	replaceState: replaceState,
	getLocation: getLocation,
	isInternetExplorer11: isInternetExplorer11
};

}();

var _elm_lang$navigation$Navigation$replaceState = _elm_lang$navigation$Native_Navigation.replaceState;
var _elm_lang$navigation$Navigation$pushState = _elm_lang$navigation$Native_Navigation.pushState;
var _elm_lang$navigation$Navigation$go = _elm_lang$navigation$Native_Navigation.go;
var _elm_lang$navigation$Navigation$reloadPage = _elm_lang$navigation$Native_Navigation.reloadPage;
var _elm_lang$navigation$Navigation$setLocation = _elm_lang$navigation$Native_Navigation.setLocation;
var _elm_lang$navigation$Navigation_ops = _elm_lang$navigation$Navigation_ops || {};
_elm_lang$navigation$Navigation_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return task2;
			},
			task1);
	});
var _elm_lang$navigation$Navigation$notify = F3(
	function (router, subs, location) {
		var send = function (_p1) {
			var _p2 = _p1;
			return A2(
				_elm_lang$core$Platform$sendToApp,
				router,
				_p2._0(location));
		};
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(_elm_lang$core$List$map, send, subs)),
			_elm_lang$core$Task$succeed(
				{ctor: '_Tuple0'}));
	});
var _elm_lang$navigation$Navigation$cmdHelp = F3(
	function (router, subs, cmd) {
		var _p3 = cmd;
		switch (_p3.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$go(_p3._0);
			case 'New':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$pushState(_p3._0));
			case 'Modify':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$replaceState(_p3._0));
			case 'Visit':
				return _elm_lang$navigation$Navigation$setLocation(_p3._0);
			default:
				return _elm_lang$navigation$Navigation$reloadPage(_p3._0);
		}
	});
var _elm_lang$navigation$Navigation$killPopWatcher = function (popWatcher) {
	var _p4 = popWatcher;
	if (_p4.ctor === 'Normal') {
		return _elm_lang$core$Process$kill(_p4._0);
	} else {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Process$kill(_p4._0),
			_elm_lang$core$Process$kill(_p4._1));
	}
};
var _elm_lang$navigation$Navigation$onSelfMsg = F3(
	function (router, location, state) {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			A3(_elm_lang$navigation$Navigation$notify, router, state.subs, location),
			_elm_lang$core$Task$succeed(state));
	});
var _elm_lang$navigation$Navigation$subscription = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$command = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$Location = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {href: a, host: b, hostname: c, protocol: d, origin: e, port_: f, pathname: g, search: h, hash: i, username: j, password: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$navigation$Navigation$State = F2(
	function (a, b) {
		return {subs: a, popWatcher: b};
	});
var _elm_lang$navigation$Navigation$init = _elm_lang$core$Task$succeed(
	A2(
		_elm_lang$navigation$Navigation$State,
		{ctor: '[]'},
		_elm_lang$core$Maybe$Nothing));
var _elm_lang$navigation$Navigation$Reload = function (a) {
	return {ctor: 'Reload', _0: a};
};
var _elm_lang$navigation$Navigation$reload = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(false));
var _elm_lang$navigation$Navigation$reloadAndSkipCache = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(true));
var _elm_lang$navigation$Navigation$Visit = function (a) {
	return {ctor: 'Visit', _0: a};
};
var _elm_lang$navigation$Navigation$load = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Visit(url));
};
var _elm_lang$navigation$Navigation$Modify = function (a) {
	return {ctor: 'Modify', _0: a};
};
var _elm_lang$navigation$Navigation$modifyUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Modify(url));
};
var _elm_lang$navigation$Navigation$New = function (a) {
	return {ctor: 'New', _0: a};
};
var _elm_lang$navigation$Navigation$newUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$New(url));
};
var _elm_lang$navigation$Navigation$Jump = function (a) {
	return {ctor: 'Jump', _0: a};
};
var _elm_lang$navigation$Navigation$back = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(0 - n));
};
var _elm_lang$navigation$Navigation$forward = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(n));
};
var _elm_lang$navigation$Navigation$cmdMap = F2(
	function (_p5, myCmd) {
		var _p6 = myCmd;
		switch (_p6.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$Jump(_p6._0);
			case 'New':
				return _elm_lang$navigation$Navigation$New(_p6._0);
			case 'Modify':
				return _elm_lang$navigation$Navigation$Modify(_p6._0);
			case 'Visit':
				return _elm_lang$navigation$Navigation$Visit(_p6._0);
			default:
				return _elm_lang$navigation$Navigation$Reload(_p6._0);
		}
	});
var _elm_lang$navigation$Navigation$Monitor = function (a) {
	return {ctor: 'Monitor', _0: a};
};
var _elm_lang$navigation$Navigation$program = F2(
	function (locationToMessage, stuff) {
		var init = stuff.init(
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$program(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$programWithFlags = F2(
	function (locationToMessage, stuff) {
		var init = function (flags) {
			return A2(
				stuff.init,
				flags,
				_elm_lang$navigation$Native_Navigation.getLocation(
					{ctor: '_Tuple0'}));
		};
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$programWithFlags(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$subMap = F2(
	function (func, _p7) {
		var _p8 = _p7;
		return _elm_lang$navigation$Navigation$Monitor(
			function (_p9) {
				return func(
					_p8._0(_p9));
			});
	});
var _elm_lang$navigation$Navigation$InternetExplorer = F2(
	function (a, b) {
		return {ctor: 'InternetExplorer', _0: a, _1: b};
	});
var _elm_lang$navigation$Navigation$Normal = function (a) {
	return {ctor: 'Normal', _0: a};
};
var _elm_lang$navigation$Navigation$spawnPopWatcher = function (router) {
	var reportLocation = function (_p10) {
		return A2(
			_elm_lang$core$Platform$sendToSelf,
			router,
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
	};
	return _elm_lang$navigation$Native_Navigation.isInternetExplorer11(
		{ctor: '_Tuple0'}) ? A3(
		_elm_lang$core$Task$map2,
		_elm_lang$navigation$Navigation$InternetExplorer,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)),
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'hashchange', _elm_lang$core$Json_Decode$value, reportLocation))) : A2(
		_elm_lang$core$Task$map,
		_elm_lang$navigation$Navigation$Normal,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)));
};
var _elm_lang$navigation$Navigation$onEffects = F4(
	function (router, cmds, subs, _p11) {
		var _p12 = _p11;
		var _p15 = _p12.popWatcher;
		var stepState = function () {
			var _p13 = {ctor: '_Tuple2', _0: subs, _1: _p15};
			_v6_2:
			do {
				if (_p13._0.ctor === '[]') {
					if (_p13._1.ctor === 'Just') {
						return A2(
							_elm_lang$navigation$Navigation_ops['&>'],
							_elm_lang$navigation$Navigation$killPopWatcher(_p13._1._0),
							_elm_lang$core$Task$succeed(
								A2(_elm_lang$navigation$Navigation$State, subs, _elm_lang$core$Maybe$Nothing)));
					} else {
						break _v6_2;
					}
				} else {
					if (_p13._1.ctor === 'Nothing') {
						return A2(
							_elm_lang$core$Task$map,
							function (_p14) {
								return A2(
									_elm_lang$navigation$Navigation$State,
									subs,
									_elm_lang$core$Maybe$Just(_p14));
							},
							_elm_lang$navigation$Navigation$spawnPopWatcher(router));
					} else {
						break _v6_2;
					}
				}
			} while(false);
			return _elm_lang$core$Task$succeed(
				A2(_elm_lang$navigation$Navigation$State, subs, _p15));
		}();
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					A2(_elm_lang$navigation$Navigation$cmdHelp, router, subs),
					cmds)),
			stepState);
	});
_elm_lang$core$Native_Platform.effectManagers['Navigation'] = {pkg: 'elm-lang/navigation', init: _elm_lang$navigation$Navigation$init, onEffects: _elm_lang$navigation$Navigation$onEffects, onSelfMsg: _elm_lang$navigation$Navigation$onSelfMsg, tag: 'fx', cmdMap: _elm_lang$navigation$Navigation$cmdMap, subMap: _elm_lang$navigation$Navigation$subMap};

// import Native.Scheduler, Utils //

var _elm_lang$page_visibility$Native_PageVisibility = function() {


// sort out the prefixes

var hidden, change;
if (typeof document.hidden !== 'undefined')
{
	hidden = 'hidden';
	change = 'visibilitychange';
}
else if (typeof document.mozHidden !== 'undefined')
{
	hidden = 'mozHidden';
	change = 'mozvisibilitychange';
}
else if (typeof document.msHidden !== 'undefined')
{
	hidden = 'msHidden';
	change = 'msvisibilitychange';
}
else if (typeof document.webkitHidden !== 'undefined')
{
	hidden = 'webkitHidden';
	change = 'webkitvisibilitychange';
}


// actually provide functionality

function visibilityChange(toTask)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {

		function performTask()
		{
			_elm_lang$core$Native_Scheduler.rawSpawn(toTask(document[hidden]));
		}

		document.addEventListener(change, performTask);

		return function()
		{
			document.removeEventListener(change, performTask);
		};
	});
}

var isHidden = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
	callback(_elm_lang$core$Native_Scheduler.succeed(document[hidden]));
});


return {
	visibilityChange: visibilityChange,
	isHidden: isHidden
};

}();

var _elm_lang$page_visibility$PageVisibility$onVisibilityChange = _elm_lang$page_visibility$Native_PageVisibility.visibilityChange;
var _elm_lang$page_visibility$PageVisibility$onEffects = F3(
	function (router, newSubs, state) {
		var _p0 = {ctor: '_Tuple2', _0: state, _1: newSubs};
		if (_p0._0.ctor === 'Nothing') {
			if (_p0._1.ctor === '[]') {
				return _elm_lang$core$Task$succeed(state);
			} else {
				return A2(
					_elm_lang$core$Task$andThen,
					function (pid) {
						return _elm_lang$core$Task$succeed(
							_elm_lang$core$Maybe$Just(
								{subs: newSubs, pid: pid}));
					},
					_elm_lang$core$Process$spawn(
						_elm_lang$page_visibility$PageVisibility$onVisibilityChange(
							_elm_lang$core$Platform$sendToSelf(router))));
			}
		} else {
			if (_p0._1.ctor === '[]') {
				return A2(
					_elm_lang$core$Task$andThen,
					function (_p1) {
						return _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
					},
					_elm_lang$core$Process$kill(_p0._0._0.pid));
			} else {
				return _elm_lang$core$Task$succeed(
					_elm_lang$core$Maybe$Just(
						{subs: newSubs, pid: _p0._0._0.pid}));
			}
		}
	});
var _elm_lang$page_visibility$PageVisibility$init = _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
var _elm_lang$page_visibility$PageVisibility$isHidden = _elm_lang$page_visibility$Native_PageVisibility.isHidden;
var _elm_lang$page_visibility$PageVisibility$isVisible = A2(_elm_lang$core$Task$map, _elm_lang$core$Basics$not, _elm_lang$page_visibility$PageVisibility$isHidden);
var _elm_lang$page_visibility$PageVisibility$subscription = _elm_lang$core$Native_Platform.leaf('PageVisibility');
var _elm_lang$page_visibility$PageVisibility$Hidden = {ctor: 'Hidden'};
var _elm_lang$page_visibility$PageVisibility$Visible = {ctor: 'Visible'};
var _elm_lang$page_visibility$PageVisibility$hiddenToVisibility = function (hidden) {
	return hidden ? _elm_lang$page_visibility$PageVisibility$Hidden : _elm_lang$page_visibility$PageVisibility$Visible;
};
var _elm_lang$page_visibility$PageVisibility$visibility = A2(_elm_lang$core$Task$map, _elm_lang$page_visibility$PageVisibility$hiddenToVisibility, _elm_lang$page_visibility$PageVisibility$isHidden);
var _elm_lang$page_visibility$PageVisibility$onSelfMsg = F3(
	function (router, hidden, state) {
		var _p2 = state;
		if (_p2.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (_p3) {
				var _p4 = _p3;
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p4._0(
						_elm_lang$page_visibility$PageVisibility$hiddenToVisibility(hidden)));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p5) {
					return _elm_lang$core$Task$succeed(state);
				},
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p2._0.subs)));
		}
	});
var _elm_lang$page_visibility$PageVisibility$Tagger = function (a) {
	return {ctor: 'Tagger', _0: a};
};
var _elm_lang$page_visibility$PageVisibility$visibilityChanges = function (tagger) {
	return _elm_lang$page_visibility$PageVisibility$subscription(
		_elm_lang$page_visibility$PageVisibility$Tagger(tagger));
};
var _elm_lang$page_visibility$PageVisibility$subMap = F2(
	function (func, _p6) {
		var _p7 = _p6;
		return _elm_lang$page_visibility$PageVisibility$Tagger(
			function (_p8) {
				return func(
					_p7._0(_p8));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['PageVisibility'] = {pkg: 'elm-lang/page-visibility', init: _elm_lang$page_visibility$PageVisibility$init, onEffects: _elm_lang$page_visibility$PageVisibility$onEffects, onSelfMsg: _elm_lang$page_visibility$PageVisibility$onSelfMsg, tag: 'sub', subMap: _elm_lang$page_visibility$PageVisibility$subMap};

var _evancz$url_parser$UrlParser$toKeyValuePair = function (segment) {
	var _p0 = A2(_elm_lang$core$String$split, '=', segment);
	if (((_p0.ctor === '::') && (_p0._1.ctor === '::')) && (_p0._1._1.ctor === '[]')) {
		return A3(
			_elm_lang$core$Maybe$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			_elm_lang$http$Http$decodeUri(_p0._0),
			_elm_lang$http$Http$decodeUri(_p0._1._0));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _evancz$url_parser$UrlParser$parseParams = function (queryString) {
	return _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$filterMap,
			_evancz$url_parser$UrlParser$toKeyValuePair,
			A2(
				_elm_lang$core$String$split,
				'&',
				A2(_elm_lang$core$String$dropLeft, 1, queryString))));
};
var _evancz$url_parser$UrlParser$splitUrl = function (url) {
	var _p1 = A2(_elm_lang$core$String$split, '/', url);
	if ((_p1.ctor === '::') && (_p1._0 === '')) {
		return _p1._1;
	} else {
		return _p1;
	}
};
var _evancz$url_parser$UrlParser$parseHelp = function (states) {
	parseHelp:
	while (true) {
		var _p2 = states;
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p4 = _p2._0;
			var _p3 = _p4.unvisited;
			if (_p3.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p4.value);
			} else {
				if ((_p3._0 === '') && (_p3._1.ctor === '[]')) {
					return _elm_lang$core$Maybe$Just(_p4.value);
				} else {
					var _v4 = _p2._1;
					states = _v4;
					continue parseHelp;
				}
			}
		}
	}
};
var _evancz$url_parser$UrlParser$parse = F3(
	function (_p5, url, params) {
		var _p6 = _p5;
		return _evancz$url_parser$UrlParser$parseHelp(
			_p6._0(
				{
					visited: {ctor: '[]'},
					unvisited: _evancz$url_parser$UrlParser$splitUrl(url),
					params: params,
					value: _elm_lang$core$Basics$identity
				}));
	});
var _evancz$url_parser$UrlParser$parseHash = F2(
	function (parser, location) {
		return A3(
			_evancz$url_parser$UrlParser$parse,
			parser,
			A2(_elm_lang$core$String$dropLeft, 1, location.hash),
			_evancz$url_parser$UrlParser$parseParams(location.search));
	});
var _evancz$url_parser$UrlParser$parsePath = F2(
	function (parser, location) {
		return A3(
			_evancz$url_parser$UrlParser$parse,
			parser,
			location.pathname,
			_evancz$url_parser$UrlParser$parseParams(location.search));
	});
var _evancz$url_parser$UrlParser$intParamHelp = function (maybeValue) {
	var _p7 = maybeValue;
	if (_p7.ctor === 'Nothing') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Result$toMaybe(
			_elm_lang$core$String$toInt(_p7._0));
	}
};
var _evancz$url_parser$UrlParser$mapHelp = F2(
	function (func, _p8) {
		var _p9 = _p8;
		return {
			visited: _p9.visited,
			unvisited: _p9.unvisited,
			params: _p9.params,
			value: func(_p9.value)
		};
	});
var _evancz$url_parser$UrlParser$State = F4(
	function (a, b, c, d) {
		return {visited: a, unvisited: b, params: c, value: d};
	});
var _evancz$url_parser$UrlParser$Parser = function (a) {
	return {ctor: 'Parser', _0: a};
};
var _evancz$url_parser$UrlParser$s = function (str) {
	return _evancz$url_parser$UrlParser$Parser(
		function (_p10) {
			var _p11 = _p10;
			var _p12 = _p11.unvisited;
			if (_p12.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var _p13 = _p12._0;
				return _elm_lang$core$Native_Utils.eq(_p13, str) ? {
					ctor: '::',
					_0: A4(
						_evancz$url_parser$UrlParser$State,
						{ctor: '::', _0: _p13, _1: _p11.visited},
						_p12._1,
						_p11.params,
						_p11.value),
					_1: {ctor: '[]'}
				} : {ctor: '[]'};
			}
		});
};
var _evancz$url_parser$UrlParser$custom = F2(
	function (tipe, stringToSomething) {
		return _evancz$url_parser$UrlParser$Parser(
			function (_p14) {
				var _p15 = _p14;
				var _p16 = _p15.unvisited;
				if (_p16.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					var _p18 = _p16._0;
					var _p17 = stringToSomething(_p18);
					if (_p17.ctor === 'Ok') {
						return {
							ctor: '::',
							_0: A4(
								_evancz$url_parser$UrlParser$State,
								{ctor: '::', _0: _p18, _1: _p15.visited},
								_p16._1,
								_p15.params,
								_p15.value(_p17._0)),
							_1: {ctor: '[]'}
						};
					} else {
						return {ctor: '[]'};
					}
				}
			});
	});
var _evancz$url_parser$UrlParser$string = A2(_evancz$url_parser$UrlParser$custom, 'STRING', _elm_lang$core$Result$Ok);
var _evancz$url_parser$UrlParser$int = A2(_evancz$url_parser$UrlParser$custom, 'NUMBER', _elm_lang$core$String$toInt);
var _evancz$url_parser$UrlParser_ops = _evancz$url_parser$UrlParser_ops || {};
_evancz$url_parser$UrlParser_ops['</>'] = F2(
	function (_p20, _p19) {
		var _p21 = _p20;
		var _p22 = _p19;
		return _evancz$url_parser$UrlParser$Parser(
			function (state) {
				return A2(
					_elm_lang$core$List$concatMap,
					_p22._0,
					_p21._0(state));
			});
	});
var _evancz$url_parser$UrlParser$map = F2(
	function (subValue, _p23) {
		var _p24 = _p23;
		return _evancz$url_parser$UrlParser$Parser(
			function (_p25) {
				var _p26 = _p25;
				return A2(
					_elm_lang$core$List$map,
					_evancz$url_parser$UrlParser$mapHelp(_p26.value),
					_p24._0(
						{visited: _p26.visited, unvisited: _p26.unvisited, params: _p26.params, value: subValue}));
			});
	});
var _evancz$url_parser$UrlParser$oneOf = function (parsers) {
	return _evancz$url_parser$UrlParser$Parser(
		function (state) {
			return A2(
				_elm_lang$core$List$concatMap,
				function (_p27) {
					var _p28 = _p27;
					return _p28._0(state);
				},
				parsers);
		});
};
var _evancz$url_parser$UrlParser$top = _evancz$url_parser$UrlParser$Parser(
	function (state) {
		return {
			ctor: '::',
			_0: state,
			_1: {ctor: '[]'}
		};
	});
var _evancz$url_parser$UrlParser_ops = _evancz$url_parser$UrlParser_ops || {};
_evancz$url_parser$UrlParser_ops['<?>'] = F2(
	function (_p30, _p29) {
		var _p31 = _p30;
		var _p32 = _p29;
		return _evancz$url_parser$UrlParser$Parser(
			function (state) {
				return A2(
					_elm_lang$core$List$concatMap,
					_p32._0,
					_p31._0(state));
			});
	});
var _evancz$url_parser$UrlParser$QueryParser = function (a) {
	return {ctor: 'QueryParser', _0: a};
};
var _evancz$url_parser$UrlParser$customParam = F2(
	function (key, func) {
		return _evancz$url_parser$UrlParser$QueryParser(
			function (_p33) {
				var _p34 = _p33;
				var _p35 = _p34.params;
				return {
					ctor: '::',
					_0: A4(
						_evancz$url_parser$UrlParser$State,
						_p34.visited,
						_p34.unvisited,
						_p35,
						_p34.value(
							func(
								A2(_elm_lang$core$Dict$get, key, _p35)))),
					_1: {ctor: '[]'}
				};
			});
	});
var _evancz$url_parser$UrlParser$stringParam = function (name) {
	return A2(_evancz$url_parser$UrlParser$customParam, name, _elm_lang$core$Basics$identity);
};
var _evancz$url_parser$UrlParser$intParam = function (name) {
	return A2(_evancz$url_parser$UrlParser$customParam, name, _evancz$url_parser$UrlParser$intParamHelp);
};

var _ryannhg$elm_date_format$DateFormat$toSuffix = function (num) {
	var suffix = function () {
		var _p0 = num;
		switch (_p0) {
			case 11:
				return 'th';
			case 12:
				return 'th';
			case 13:
				return 'th';
			default:
				var _p1 = A2(_elm_lang$core$Basics_ops['%'], num, 10);
				switch (_p1) {
					case 1:
						return 'st';
					case 2:
						return 'nd';
					case 3:
						return 'rd';
					default:
						return 'th';
				}
		}
	}();
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(num),
		suffix);
};
var _ryannhg$elm_date_format$DateFormat$toFixedLength = function (num) {
	return (_elm_lang$core$Native_Utils.cmp(num, 10) < 0) ? A2(
		_elm_lang$core$Basics_ops['++'],
		'0',
		_elm_lang$core$Basics$toString(num)) : _elm_lang$core$Basics$toString(num);
};
var _ryannhg$elm_date_format$DateFormat$toNonMilitary = function (num) {
	return _elm_lang$core$Native_Utils.eq(num, 0) ? 12 : ((_elm_lang$core$Native_Utils.cmp(num, 12) < 0) ? num : (num - 12));
};
var _ryannhg$elm_date_format$DateFormat$amPm = function (date) {
	return (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$Date$hour(date),
		11) > 0) ? 'pm' : 'am';
};
var _ryannhg$elm_date_format$DateFormat$year = function (date) {
	return _elm_lang$core$Basics$toString(
		_elm_lang$core$Date$year(date));
};
var _ryannhg$elm_date_format$DateFormat$firstDayOfYear = function (date) {
	var _p2 = _elm_lang$core$Date$fromString(
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(
				_elm_lang$core$Date$year(date)),
			'-01-01T00:00:00.000Z'));
	if (_p2.ctor === 'Ok') {
		return _p2._0;
	} else {
		return date;
	}
};
var _ryannhg$elm_date_format$DateFormat$dayOfWeekName = function (date) {
	var _p3 = _elm_lang$core$Date$dayOfWeek(date);
	switch (_p3.ctor) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var _ryannhg$elm_date_format$DateFormat$dayOfMonth = _elm_lang$core$Date$day;
var _ryannhg$elm_date_format$DateFormat$daysInMonth = F2(
	function (year, month) {
		var _p4 = month;
		switch (_p4.ctor) {
			case 'Jan':
				return 31;
			case 'Feb':
				return _elm_lang$core$Native_Utils.eq(
					A2(_elm_lang$core$Basics_ops['%'], year, 4),
					0) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var _ryannhg$elm_date_format$DateFormat$fullMonthName = function (date) {
	var _p5 = _elm_lang$core$Date$month(date);
	switch (_p5.ctor) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var _ryannhg$elm_date_format$DateFormat$days = {
	ctor: '::',
	_0: _elm_lang$core$Date$Sun,
	_1: {
		ctor: '::',
		_0: _elm_lang$core$Date$Mon,
		_1: {
			ctor: '::',
			_0: _elm_lang$core$Date$Tue,
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Date$Wed,
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Date$Thu,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Date$Fri,
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Date$Sat,
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	}
};
var _ryannhg$elm_date_format$DateFormat$dayOfWeek = function (date) {
	return function (_p6) {
		var _p7 = _p6;
		return _p7._0;
	}(
		A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '_Tuple2', _0: 0, _1: _elm_lang$core$Date$Sun},
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$filter,
					function (_p8) {
						var _p9 = _p8;
						return _elm_lang$core$Native_Utils.eq(
							_p9._1,
							_elm_lang$core$Date$dayOfWeek(date));
					},
					A2(
						_elm_lang$core$List$indexedMap,
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							}),
						_ryannhg$elm_date_format$DateFormat$days)))));
};
var _ryannhg$elm_date_format$DateFormat$months = {
	ctor: '::',
	_0: _elm_lang$core$Date$Jan,
	_1: {
		ctor: '::',
		_0: _elm_lang$core$Date$Feb,
		_1: {
			ctor: '::',
			_0: _elm_lang$core$Date$Mar,
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Date$Apr,
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Date$May,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Date$Jun,
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Date$Jul,
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Date$Aug,
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Date$Sep,
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Date$Nov,
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Date$Dec,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _ryannhg$elm_date_format$DateFormat$monthPair = function (date) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		{ctor: '_Tuple2', _0: 0, _1: _elm_lang$core$Date$Jan},
		_elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$filter,
				function (_p10) {
					var _p11 = _p10;
					return _elm_lang$core$Native_Utils.eq(
						_p11._1,
						_elm_lang$core$Date$month(date));
				},
				A2(
					_elm_lang$core$List$indexedMap,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					_ryannhg$elm_date_format$DateFormat$months))));
};
var _ryannhg$elm_date_format$DateFormat$monthNumber_ = function (date) {
	return A2(
		F2(
			function (x, y) {
				return x + y;
			}),
		1,
		function (_p12) {
			var _p13 = _p12;
			return _p13._0;
		}(
			_ryannhg$elm_date_format$DateFormat$monthPair(date)));
};
var _ryannhg$elm_date_format$DateFormat$quarter = function (date) {
	return (_ryannhg$elm_date_format$DateFormat$monthNumber_(date) / 4) | 0;
};
var _ryannhg$elm_date_format$DateFormat$dayOfYear = function (date) {
	var monthsBeforeThisOne = A2(
		_elm_lang$core$List$take,
		_ryannhg$elm_date_format$DateFormat$monthNumber_(date) - 1,
		_ryannhg$elm_date_format$DateFormat$months);
	var daysBeforeThisMonth = _elm_lang$core$List$sum(
		A2(
			_elm_lang$core$List$map,
			_ryannhg$elm_date_format$DateFormat$daysInMonth(
				_elm_lang$core$Date$year(date)),
			monthsBeforeThisOne));
	return daysBeforeThisMonth + _ryannhg$elm_date_format$DateFormat$dayOfMonth(date);
};
var _ryannhg$elm_date_format$DateFormat$weekOfYear = function (date) {
	var firstDay = _ryannhg$elm_date_format$DateFormat$firstDayOfYear(date);
	var firstDayOffset = _ryannhg$elm_date_format$DateFormat$dayOfWeek(firstDay);
	var daysSoFar = _ryannhg$elm_date_format$DateFormat$dayOfYear(date);
	return (((daysSoFar + firstDayOffset) / 7) | 0) + 1;
};
var _ryannhg$elm_date_format$DateFormat$piece = F2(
	function (date, token) {
		var _p14 = token;
		switch (_p14.ctor) {
			case 'MonthNumber':
				return _elm_lang$core$Basics$toString(
					_ryannhg$elm_date_format$DateFormat$monthNumber_(date));
			case 'MonthSuffix':
				return _ryannhg$elm_date_format$DateFormat$toSuffix(
					_ryannhg$elm_date_format$DateFormat$monthNumber_(date));
			case 'MonthFixed':
				return _ryannhg$elm_date_format$DateFormat$toFixedLength(
					_ryannhg$elm_date_format$DateFormat$monthNumber_(date));
			case 'MonthNameFirst':
				return A2(
					_elm_lang$core$String$left,
					_p14._0,
					_ryannhg$elm_date_format$DateFormat$fullMonthName(date));
			case 'MonthNameFull':
				return _ryannhg$elm_date_format$DateFormat$fullMonthName(date);
			case 'QuarterNumber':
				return _elm_lang$core$Basics$toString(
					_ryannhg$elm_date_format$DateFormat$quarter(date));
			case 'QuarterSuffix':
				return _ryannhg$elm_date_format$DateFormat$toSuffix(
					_ryannhg$elm_date_format$DateFormat$quarter(date));
			case 'DayOfMonthNumber':
				return _elm_lang$core$Basics$toString(
					_ryannhg$elm_date_format$DateFormat$dayOfMonth(date));
			case 'DayOfMonthSuffix':
				return _ryannhg$elm_date_format$DateFormat$toSuffix(
					_ryannhg$elm_date_format$DateFormat$dayOfMonth(date));
			case 'DayOfMonthFixed':
				return _ryannhg$elm_date_format$DateFormat$toFixedLength(
					_ryannhg$elm_date_format$DateFormat$dayOfMonth(date));
			case 'DayOfYearNumber':
				return _elm_lang$core$Basics$toString(
					_ryannhg$elm_date_format$DateFormat$dayOfYear(date));
			case 'DayOfYearSuffix':
				return _ryannhg$elm_date_format$DateFormat$toSuffix(
					_ryannhg$elm_date_format$DateFormat$dayOfYear(date));
			case 'DayOfYearFixed':
				return _ryannhg$elm_date_format$DateFormat$toFixedLength(
					_ryannhg$elm_date_format$DateFormat$dayOfYear(date));
			case 'DayOfWeekNumber':
				return _elm_lang$core$Basics$toString(
					_ryannhg$elm_date_format$DateFormat$dayOfWeek(date));
			case 'DayOfWeekSuffix':
				return _ryannhg$elm_date_format$DateFormat$toSuffix(
					_ryannhg$elm_date_format$DateFormat$dayOfWeek(date));
			case 'DayOfWeekNameFirst':
				return A2(
					_elm_lang$core$String$left,
					_p14._0,
					_ryannhg$elm_date_format$DateFormat$dayOfWeekName(date));
			case 'DayOfWeekNameFull':
				return _ryannhg$elm_date_format$DateFormat$dayOfWeekName(date);
			case 'WeekOfYearNumber':
				return _elm_lang$core$Basics$toString(
					_ryannhg$elm_date_format$DateFormat$weekOfYear(date));
			case 'WeekOfYearSuffix':
				return _ryannhg$elm_date_format$DateFormat$toSuffix(
					_ryannhg$elm_date_format$DateFormat$weekOfYear(date));
			case 'WeekOfYearFixed':
				return _ryannhg$elm_date_format$DateFormat$toFixedLength(
					_ryannhg$elm_date_format$DateFormat$weekOfYear(date));
			case 'YearNumberLastTwo':
				return A2(
					_elm_lang$core$String$right,
					2,
					_ryannhg$elm_date_format$DateFormat$year(date));
			case 'YearNumber':
				return _ryannhg$elm_date_format$DateFormat$year(date);
			case 'AmPmUppercase':
				return _elm_lang$core$String$toUpper(
					_ryannhg$elm_date_format$DateFormat$amPm(date));
			case 'AmPmLowercase':
				return _elm_lang$core$String$toLower(
					_ryannhg$elm_date_format$DateFormat$amPm(date));
			case 'HourMilitaryNumber':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$hour(date));
			case 'HourMilitaryFixed':
				return _ryannhg$elm_date_format$DateFormat$toFixedLength(
					_elm_lang$core$Date$hour(date));
			case 'HourNumber':
				return _elm_lang$core$Basics$toString(
					_ryannhg$elm_date_format$DateFormat$toNonMilitary(
						_elm_lang$core$Date$hour(date)));
			case 'HourFixed':
				return _ryannhg$elm_date_format$DateFormat$toFixedLength(
					_ryannhg$elm_date_format$DateFormat$toNonMilitary(
						_elm_lang$core$Date$hour(date)));
			case 'HourMilitaryFromOneNumber':
				return _elm_lang$core$Basics$toString(
					A2(
						F2(
							function (x, y) {
								return x + y;
							}),
						1,
						_elm_lang$core$Date$hour(date)));
			case 'HourMilitaryFromOneFixed':
				return _ryannhg$elm_date_format$DateFormat$toFixedLength(
					A2(
						F2(
							function (x, y) {
								return x + y;
							}),
						1,
						_elm_lang$core$Date$hour(date)));
			case 'MinuteNumber':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$minute(date));
			case 'MinuteFixed':
				return _ryannhg$elm_date_format$DateFormat$toFixedLength(
					_elm_lang$core$Date$minute(date));
			case 'SecondNumber':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$second(date));
			case 'SecondFixed':
				return _ryannhg$elm_date_format$DateFormat$toFixedLength(
					_elm_lang$core$Date$second(date));
			default:
				return _p14._0;
		}
	});
var _ryannhg$elm_date_format$DateFormat$format = F2(
	function (tokens, date) {
		return A2(
			_elm_lang$core$String$join,
			'',
			A2(
				_elm_lang$core$List$map,
				_ryannhg$elm_date_format$DateFormat$piece(date),
				tokens));
	});
var _ryannhg$elm_date_format$DateFormat$SimpleDate = F3(
	function (a, b, c) {
		return {month: a, day: b, year: c};
	});
var _ryannhg$elm_date_format$DateFormat$Text = function (a) {
	return {ctor: 'Text', _0: a};
};
var _ryannhg$elm_date_format$DateFormat$text = _ryannhg$elm_date_format$DateFormat$Text;
var _ryannhg$elm_date_format$DateFormat$SecondFixed = {ctor: 'SecondFixed'};
var _ryannhg$elm_date_format$DateFormat$secondFixed = _ryannhg$elm_date_format$DateFormat$SecondFixed;
var _ryannhg$elm_date_format$DateFormat$SecondNumber = {ctor: 'SecondNumber'};
var _ryannhg$elm_date_format$DateFormat$secondNumber = _ryannhg$elm_date_format$DateFormat$SecondNumber;
var _ryannhg$elm_date_format$DateFormat$MinuteFixed = {ctor: 'MinuteFixed'};
var _ryannhg$elm_date_format$DateFormat$minuteFixed = _ryannhg$elm_date_format$DateFormat$MinuteFixed;
var _ryannhg$elm_date_format$DateFormat$MinuteNumber = {ctor: 'MinuteNumber'};
var _ryannhg$elm_date_format$DateFormat$minuteNumber = _ryannhg$elm_date_format$DateFormat$MinuteNumber;
var _ryannhg$elm_date_format$DateFormat$HourMilitaryFromOneFixed = {ctor: 'HourMilitaryFromOneFixed'};
var _ryannhg$elm_date_format$DateFormat$hourMilitaryFromOneFixed = _ryannhg$elm_date_format$DateFormat$HourMilitaryFromOneFixed;
var _ryannhg$elm_date_format$DateFormat$HourMilitaryFromOneNumber = {ctor: 'HourMilitaryFromOneNumber'};
var _ryannhg$elm_date_format$DateFormat$hourMilitaryFromOneNumber = _ryannhg$elm_date_format$DateFormat$HourMilitaryFromOneNumber;
var _ryannhg$elm_date_format$DateFormat$HourFixed = {ctor: 'HourFixed'};
var _ryannhg$elm_date_format$DateFormat$hourFixed = _ryannhg$elm_date_format$DateFormat$HourFixed;
var _ryannhg$elm_date_format$DateFormat$HourNumber = {ctor: 'HourNumber'};
var _ryannhg$elm_date_format$DateFormat$hourNumber = _ryannhg$elm_date_format$DateFormat$HourNumber;
var _ryannhg$elm_date_format$DateFormat$HourMilitaryFixed = {ctor: 'HourMilitaryFixed'};
var _ryannhg$elm_date_format$DateFormat$hourMilitaryFixed = _ryannhg$elm_date_format$DateFormat$HourMilitaryFixed;
var _ryannhg$elm_date_format$DateFormat$HourMilitaryNumber = {ctor: 'HourMilitaryNumber'};
var _ryannhg$elm_date_format$DateFormat$hourMilitaryNumber = _ryannhg$elm_date_format$DateFormat$HourMilitaryNumber;
var _ryannhg$elm_date_format$DateFormat$AmPmLowercase = {ctor: 'AmPmLowercase'};
var _ryannhg$elm_date_format$DateFormat$amPmLowercase = _ryannhg$elm_date_format$DateFormat$AmPmLowercase;
var _ryannhg$elm_date_format$DateFormat$AmPmUppercase = {ctor: 'AmPmUppercase'};
var _ryannhg$elm_date_format$DateFormat$amPmUppercase = _ryannhg$elm_date_format$DateFormat$AmPmUppercase;
var _ryannhg$elm_date_format$DateFormat$WeekOfYearFixed = {ctor: 'WeekOfYearFixed'};
var _ryannhg$elm_date_format$DateFormat$weekOfYearFixed = _ryannhg$elm_date_format$DateFormat$WeekOfYearFixed;
var _ryannhg$elm_date_format$DateFormat$WeekOfYearSuffix = {ctor: 'WeekOfYearSuffix'};
var _ryannhg$elm_date_format$DateFormat$weekOfYearSuffix = _ryannhg$elm_date_format$DateFormat$WeekOfYearSuffix;
var _ryannhg$elm_date_format$DateFormat$WeekOfYearNumber = {ctor: 'WeekOfYearNumber'};
var _ryannhg$elm_date_format$DateFormat$weekOfYearNumber = _ryannhg$elm_date_format$DateFormat$WeekOfYearNumber;
var _ryannhg$elm_date_format$DateFormat$QuarterSuffix = {ctor: 'QuarterSuffix'};
var _ryannhg$elm_date_format$DateFormat$quarterSuffix = _ryannhg$elm_date_format$DateFormat$QuarterSuffix;
var _ryannhg$elm_date_format$DateFormat$QuarterNumber = {ctor: 'QuarterNumber'};
var _ryannhg$elm_date_format$DateFormat$quarterNumber = _ryannhg$elm_date_format$DateFormat$QuarterNumber;
var _ryannhg$elm_date_format$DateFormat$YearNumber = {ctor: 'YearNumber'};
var _ryannhg$elm_date_format$DateFormat$yearNumber = _ryannhg$elm_date_format$DateFormat$YearNumber;
var _ryannhg$elm_date_format$DateFormat$YearNumberLastTwo = {ctor: 'YearNumberLastTwo'};
var _ryannhg$elm_date_format$DateFormat$yearNumberLastTwo = _ryannhg$elm_date_format$DateFormat$YearNumberLastTwo;
var _ryannhg$elm_date_format$DateFormat$DayOfWeekNameFull = {ctor: 'DayOfWeekNameFull'};
var _ryannhg$elm_date_format$DateFormat$dayOfWeekNameFull = _ryannhg$elm_date_format$DateFormat$DayOfWeekNameFull;
var _ryannhg$elm_date_format$DateFormat$DayOfWeekNameFirst = function (a) {
	return {ctor: 'DayOfWeekNameFirst', _0: a};
};
var _ryannhg$elm_date_format$DateFormat$dayOfWeekNameFirstTwo = _ryannhg$elm_date_format$DateFormat$DayOfWeekNameFirst(2);
var _ryannhg$elm_date_format$DateFormat$dayOfWeekNameFirstThree = _ryannhg$elm_date_format$DateFormat$DayOfWeekNameFirst(3);
var _ryannhg$elm_date_format$DateFormat$DayOfWeekSuffix = {ctor: 'DayOfWeekSuffix'};
var _ryannhg$elm_date_format$DateFormat$dayOfWeekSuffix = _ryannhg$elm_date_format$DateFormat$DayOfWeekSuffix;
var _ryannhg$elm_date_format$DateFormat$DayOfWeekNumber = {ctor: 'DayOfWeekNumber'};
var _ryannhg$elm_date_format$DateFormat$dayOfWeekNumber = _ryannhg$elm_date_format$DateFormat$DayOfWeekNumber;
var _ryannhg$elm_date_format$DateFormat$DayOfYearFixed = {ctor: 'DayOfYearFixed'};
var _ryannhg$elm_date_format$DateFormat$dayOfYearFixed = _ryannhg$elm_date_format$DateFormat$DayOfYearFixed;
var _ryannhg$elm_date_format$DateFormat$DayOfYearSuffix = {ctor: 'DayOfYearSuffix'};
var _ryannhg$elm_date_format$DateFormat$dayOfYearSuffix = _ryannhg$elm_date_format$DateFormat$DayOfYearSuffix;
var _ryannhg$elm_date_format$DateFormat$DayOfYearNumber = {ctor: 'DayOfYearNumber'};
var _ryannhg$elm_date_format$DateFormat$dayOfYearNumber = _ryannhg$elm_date_format$DateFormat$DayOfYearNumber;
var _ryannhg$elm_date_format$DateFormat$DayOfMonthFixed = {ctor: 'DayOfMonthFixed'};
var _ryannhg$elm_date_format$DateFormat$dayOfMonthFixed = _ryannhg$elm_date_format$DateFormat$DayOfMonthFixed;
var _ryannhg$elm_date_format$DateFormat$DayOfMonthSuffix = {ctor: 'DayOfMonthSuffix'};
var _ryannhg$elm_date_format$DateFormat$dayOfMonthSuffix = _ryannhg$elm_date_format$DateFormat$DayOfMonthSuffix;
var _ryannhg$elm_date_format$DateFormat$DayOfMonthNumber = {ctor: 'DayOfMonthNumber'};
var _ryannhg$elm_date_format$DateFormat$dayOfMonthNumber = _ryannhg$elm_date_format$DateFormat$DayOfMonthNumber;
var _ryannhg$elm_date_format$DateFormat$MonthNameFull = {ctor: 'MonthNameFull'};
var _ryannhg$elm_date_format$DateFormat$monthNameFull = _ryannhg$elm_date_format$DateFormat$MonthNameFull;
var _ryannhg$elm_date_format$DateFormat$MonthNameFirst = function (a) {
	return {ctor: 'MonthNameFirst', _0: a};
};
var _ryannhg$elm_date_format$DateFormat$monthNameFirstThree = _ryannhg$elm_date_format$DateFormat$MonthNameFirst(3);
var _ryannhg$elm_date_format$DateFormat$MonthFixed = {ctor: 'MonthFixed'};
var _ryannhg$elm_date_format$DateFormat$monthFixed = _ryannhg$elm_date_format$DateFormat$MonthFixed;
var _ryannhg$elm_date_format$DateFormat$MonthSuffix = {ctor: 'MonthSuffix'};
var _ryannhg$elm_date_format$DateFormat$monthSuffix = _ryannhg$elm_date_format$DateFormat$MonthSuffix;
var _ryannhg$elm_date_format$DateFormat$MonthNumber = {ctor: 'MonthNumber'};
var _ryannhg$elm_date_format$DateFormat$monthNumber = _ryannhg$elm_date_format$DateFormat$MonthNumber;

var _monty5811$apostello$Encode$encodeDate = function (date) {
	return _elm_lang$core$Json_Encode$string(
		A2(
			_ryannhg$elm_date_format$DateFormat$format,
			{
				ctor: '::',
				_0: _ryannhg$elm_date_format$DateFormat$yearNumber,
				_1: {
					ctor: '::',
					_0: _ryannhg$elm_date_format$DateFormat$text('-'),
					_1: {
						ctor: '::',
						_0: _ryannhg$elm_date_format$DateFormat$monthFixed,
						_1: {
							ctor: '::',
							_0: _ryannhg$elm_date_format$DateFormat$text('-'),
							_1: {
								ctor: '::',
								_0: _ryannhg$elm_date_format$DateFormat$dayOfMonthFixed,
								_1: {
									ctor: '::',
									_0: _ryannhg$elm_date_format$DateFormat$text(' '),
									_1: {
										ctor: '::',
										_0: _ryannhg$elm_date_format$DateFormat$hourMilitaryFixed,
										_1: {
											ctor: '::',
											_0: _ryannhg$elm_date_format$DateFormat$text(':'),
											_1: {
												ctor: '::',
												_0: _ryannhg$elm_date_format$DateFormat$minuteFixed,
												_1: {
													ctor: '::',
													_0: _ryannhg$elm_date_format$DateFormat$text(':'),
													_1: {
														ctor: '::',
														_0: _ryannhg$elm_date_format$DateFormat$secondFixed,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			date));
};
var _monty5811$apostello$Encode$encodeMaybe = F2(
	function (encoder, ms) {
		var _p0 = ms;
		if (_p0.ctor === 'Nothing') {
			return _elm_lang$core$Json_Encode$null;
		} else {
			return encoder(_p0._0);
		}
	});
var _monty5811$apostello$Encode$encodeMaybeDate = function (date) {
	return A2(
		_monty5811$apostello$Encode$encodeMaybe,
		_elm_lang$core$Json_Encode$string,
		A2(
			_elm_lang$core$Maybe$map,
			_ryannhg$elm_date_format$DateFormat$format(
				{
					ctor: '::',
					_0: _ryannhg$elm_date_format$DateFormat$yearNumber,
					_1: {
						ctor: '::',
						_0: _ryannhg$elm_date_format$DateFormat$text('-'),
						_1: {
							ctor: '::',
							_0: _ryannhg$elm_date_format$DateFormat$monthFixed,
							_1: {
								ctor: '::',
								_0: _ryannhg$elm_date_format$DateFormat$text('-'),
								_1: {
									ctor: '::',
									_0: _ryannhg$elm_date_format$DateFormat$dayOfMonthFixed,
									_1: {
										ctor: '::',
										_0: _ryannhg$elm_date_format$DateFormat$text(' '),
										_1: {
											ctor: '::',
											_0: _ryannhg$elm_date_format$DateFormat$hourMilitaryFixed,
											_1: {
												ctor: '::',
												_0: _ryannhg$elm_date_format$DateFormat$text(':'),
												_1: {
													ctor: '::',
													_0: _ryannhg$elm_date_format$DateFormat$minuteFixed,
													_1: {
														ctor: '::',
														_0: _ryannhg$elm_date_format$DateFormat$text(':'),
														_1: {
															ctor: '::',
															_0: _ryannhg$elm_date_format$DateFormat$secondFixed,
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}),
			date));
};
var _monty5811$apostello$Encode$encodeMaybeDateOnly = function (date) {
	return A2(
		_monty5811$apostello$Encode$encodeMaybe,
		_elm_lang$core$Json_Encode$string,
		A2(
			_elm_lang$core$Maybe$map,
			_ryannhg$elm_date_format$DateFormat$format(
				{
					ctor: '::',
					_0: _ryannhg$elm_date_format$DateFormat$yearNumber,
					_1: {
						ctor: '::',
						_0: _ryannhg$elm_date_format$DateFormat$text('-'),
						_1: {
							ctor: '::',
							_0: _ryannhg$elm_date_format$DateFormat$monthFixed,
							_1: {
								ctor: '::',
								_0: _ryannhg$elm_date_format$DateFormat$text('-'),
								_1: {
									ctor: '::',
									_0: _ryannhg$elm_date_format$DateFormat$dayOfMonthFixed,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			date));
};

var _monty5811$apostello$Data$encodeUser = function (user) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'pk',
				_1: _elm_lang$core$Json_Encode$int(user.pk)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'email',
					_1: _elm_lang$core$Json_Encode$string(user.email)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'username',
						_1: _elm_lang$core$Json_Encode$string(user.username)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'is_staff',
							_1: _elm_lang$core$Json_Encode$bool(user.is_staff)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'is_social',
								_1: _elm_lang$core$Json_Encode$bool(user.is_social)
							},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _monty5811$apostello$Data$encodeUserProfile = function (record) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'pk',
				_1: _elm_lang$core$Json_Encode$int(record.pk)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'user',
					_1: _monty5811$apostello$Data$encodeUser(record.user)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'approved',
						_1: _elm_lang$core$Json_Encode$bool(record.approved)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'message_cost_limit',
							_1: _elm_lang$core$Json_Encode$float(record.message_cost_limit)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'can_see_groups',
								_1: _elm_lang$core$Json_Encode$bool(record.can_see_groups)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'can_see_contact_names',
									_1: _elm_lang$core$Json_Encode$bool(record.can_see_contact_names)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'can_see_keywords',
										_1: _elm_lang$core$Json_Encode$bool(record.can_see_keywords)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'can_see_outgoing',
											_1: _elm_lang$core$Json_Encode$bool(record.can_see_outgoing)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'can_see_incoming',
												_1: _elm_lang$core$Json_Encode$bool(record.can_see_incoming)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'can_send_sms',
													_1: _elm_lang$core$Json_Encode$bool(record.can_send_sms)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'can_see_contact_nums',
														_1: _elm_lang$core$Json_Encode$bool(record.can_see_contact_nums)
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'can_see_contact_notes',
															_1: _elm_lang$core$Json_Encode$bool(record.can_see_contact_notes)
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: 'can_import',
																_1: _elm_lang$core$Json_Encode$bool(record.can_import)
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: 'can_archive',
																	_1: _elm_lang$core$Json_Encode$bool(record.can_archive)
																},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _monty5811$apostello$Data$encodeElvantoGroup = function (group) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'name',
				_1: _elm_lang$core$Json_Encode$string(group.name)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'pk',
					_1: _elm_lang$core$Json_Encode$int(group.pk)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'sync',
						_1: _elm_lang$core$Json_Encode$bool(group.sync)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'last_synced',
							_1: _monty5811$apostello$Encode$encodeMaybeDate(group.last_synced)
						},
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _monty5811$apostello$Data$encodeKeyword = function (keyword) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'keyword',
				_1: _elm_lang$core$Json_Encode$string(keyword.keyword)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'pk',
					_1: _elm_lang$core$Json_Encode$int(keyword.pk)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'description',
						_1: _elm_lang$core$Json_Encode$string(keyword.description)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'current_response',
							_1: _elm_lang$core$Json_Encode$string(keyword.current_response)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'is_live',
								_1: _elm_lang$core$Json_Encode$bool(keyword.is_live)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'num_replies',
									_1: _elm_lang$core$Json_Encode$string(keyword.num_replies)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'num_archived_replies',
										_1: _elm_lang$core$Json_Encode$string(keyword.num_archived_replies)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'is_archived',
											_1: _elm_lang$core$Json_Encode$bool(keyword.is_archived)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'disable_all_replies',
												_1: _elm_lang$core$Json_Encode$bool(keyword.disable_all_replies)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'custom_response',
													_1: _elm_lang$core$Json_Encode$string(keyword.custom_response)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'custom_response_new_person',
														_1: _elm_lang$core$Json_Encode$string(keyword.custom_response_new_person)
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'deactivated_response',
															_1: _elm_lang$core$Json_Encode$string(keyword.deactivated_response)
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: 'too_early_response',
																_1: _elm_lang$core$Json_Encode$string(keyword.too_early_response)
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: 'activate_time',
																	_1: _monty5811$apostello$Encode$encodeDate(keyword.activate_time)
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: 'deactivate_time',
																		_1: _monty5811$apostello$Encode$encodeMaybeDate(keyword.deactivate_time)
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '_Tuple2',
																			_0: 'linked_groups',
																			_1: _elm_lang$core$Json_Encode$list(
																				A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$int, keyword.linked_groups))
																		},
																		_1: {
																			ctor: '::',
																			_0: {
																				ctor: '_Tuple2',
																				_0: 'owners',
																				_1: _elm_lang$core$Json_Encode$list(
																					A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$int, keyword.owners))
																			},
																			_1: {
																				ctor: '::',
																				_0: {
																					ctor: '_Tuple2',
																					_0: 'subscribed_to_digest',
																					_1: _elm_lang$core$Json_Encode$list(
																						A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$int, keyword.subscribed_to_digest))
																				},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _monty5811$apostello$Data$encodeRecipientSimple = function (contact) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'full_name',
				_1: _elm_lang$core$Json_Encode$string(contact.full_name)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'pk',
					_1: _elm_lang$core$Json_Encode$int(contact.pk)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _monty5811$apostello$Data$encodeRecipientGroup = function (group) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'name',
				_1: _elm_lang$core$Json_Encode$string(group.name)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'pk',
					_1: _elm_lang$core$Json_Encode$int(group.pk)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'description',
						_1: _elm_lang$core$Json_Encode$string(group.description)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'members',
							_1: _elm_lang$core$Json_Encode$list(
								A2(_elm_lang$core$List$map, _monty5811$apostello$Data$encodeRecipientSimple, group.members))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'nonmembers',
								_1: _elm_lang$core$Json_Encode$list(
									A2(_elm_lang$core$List$map, _monty5811$apostello$Data$encodeRecipientSimple, group.nonmembers))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'cost',
									_1: _elm_lang$core$Json_Encode$float(group.cost)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'is_archived',
										_1: _elm_lang$core$Json_Encode$bool(group.is_archived)
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		});
};
var _monty5811$apostello$Data$stringFromMDStatus = function (status) {
	var _p0 = status;
	switch (_p0.ctor) {
		case 'Accepted':
			return 'Accepted';
		case 'Queued':
			return 'Queued';
		case 'Sending':
			return 'Sending';
		case 'Sent':
			return 'Sent';
		case 'Receiving':
			return 'Receiving';
		case 'Received':
			return 'Received';
		case 'Delivered':
			return 'Delivered';
		case 'Undelivered':
			return 'Undelivered';
		case 'Failed':
			return 'Failed';
		default:
			return 'Unknown';
	}
};
var _monty5811$apostello$Data$encodeSmsOutbound = function (sms) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'content',
				_1: _elm_lang$core$Json_Encode$string(sms.content)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'pk',
					_1: _elm_lang$core$Json_Encode$int(sms.pk)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'time_sent',
						_1: _monty5811$apostello$Encode$encodeMaybeDate(sms.time_sent)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'sent_by',
							_1: _elm_lang$core$Json_Encode$string(sms.sent_by)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'recipient',
								_1: A2(_monty5811$apostello$Encode$encodeMaybe, _monty5811$apostello$Data$encodeRecipientSimple, sms.recipient)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'status',
									_1: _elm_lang$core$Json_Encode$string(
										_elm_lang$core$String$toLower(
											_monty5811$apostello$Data$stringFromMDStatus(sms.status)))
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};
var _monty5811$apostello$Data$encodeSmsInbound = function (sms) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'sid',
				_1: _elm_lang$core$Json_Encode$string(sms.sid)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'pk',
					_1: _elm_lang$core$Json_Encode$int(sms.pk)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'sender_name',
						_1: _elm_lang$core$Json_Encode$string(sms.sender_name)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'content',
							_1: _elm_lang$core$Json_Encode$string(sms.content)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'time_received',
								_1: _monty5811$apostello$Encode$encodeMaybeDate(sms.time_received)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'dealt_with',
									_1: _elm_lang$core$Json_Encode$bool(sms.dealt_with)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'is_archived',
										_1: _elm_lang$core$Json_Encode$bool(sms.is_archived)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'display_on_wall',
											_1: _elm_lang$core$Json_Encode$bool(sms.display_on_wall)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'matched_keyword',
												_1: _elm_lang$core$Json_Encode$string(sms.matched_keyword)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'matched_colour',
													_1: _elm_lang$core$Json_Encode$string(sms.matched_colour)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'sender_pk',
														_1: A2(_monty5811$apostello$Encode$encodeMaybe, _elm_lang$core$Json_Encode$int, sms.sender_pk)
													},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _monty5811$apostello$Data$encodeRecipient = function (contact) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'first_name',
				_1: _elm_lang$core$Json_Encode$string(contact.first_name)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'last_name',
					_1: _elm_lang$core$Json_Encode$string(contact.last_name)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'number',
						_1: A2(_monty5811$apostello$Encode$encodeMaybe, _elm_lang$core$Json_Encode$string, contact.number)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'pk',
							_1: _elm_lang$core$Json_Encode$int(contact.pk)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'full_name',
								_1: _elm_lang$core$Json_Encode$string(contact.full_name)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'is_archived',
									_1: _elm_lang$core$Json_Encode$bool(contact.is_archived)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'is_blocking',
										_1: _elm_lang$core$Json_Encode$bool(contact.is_blocking)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'do_not_reply',
											_1: _elm_lang$core$Json_Encode$bool(contact.do_not_reply)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'notes',
												_1: _elm_lang$core$Json_Encode$string(contact.notes)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'last_sms',
													_1: A2(_monty5811$apostello$Encode$encodeMaybe, _monty5811$apostello$Data$encodeSmsInbound, contact.last_sms)
												},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _monty5811$apostello$Data$encodeQueuedSms = function (sms) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'pk',
				_1: _elm_lang$core$Json_Encode$int(sms.pk)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'time_to_send',
					_1: _monty5811$apostello$Encode$encodeMaybeDate(sms.time_to_send)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'time_to_send_formatted',
						_1: _elm_lang$core$Json_Encode$string(sms.time_to_send_formatted)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'sent',
							_1: _elm_lang$core$Json_Encode$bool(sms.sent)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'failed',
								_1: _elm_lang$core$Json_Encode$bool(sms.failed)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'content',
									_1: _elm_lang$core$Json_Encode$string(sms.content)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'recipient',
										_1: _monty5811$apostello$Data$encodeRecipient(sms.recipient)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'recipient_group',
											_1: A2(_monty5811$apostello$Encode$encodeMaybe, _monty5811$apostello$Data$encodeRecipientGroup, sms.recipient_group)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'sent_by',
												_1: _elm_lang$core$Json_Encode$string(sms.sent_by)
											},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _monty5811$apostello$Data$SmsInbound = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {sid: a, pk: b, sender_name: c, content: d, time_received: e, dealt_with: f, is_archived: g, display_on_wall: h, matched_keyword: i, matched_colour: j, sender_pk: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _monty5811$apostello$Data$decodeSmsInbound = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'sender_pk',
	_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$int),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'matched_colour',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'matched_keyword',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'display_on_wall',
				_elm_lang$core$Json_Decode$bool,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'is_archived',
					_elm_lang$core$Json_Decode$bool,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'dealt_with',
						_elm_lang$core$Json_Decode$bool,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'time_received',
							_elm_lang$core$Json_Decode$maybe(_elm_community$json_extra$Json_Decode_Extra$date),
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'content',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'sender_name',
									_elm_lang$core$Json_Decode$string,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'pk',
										_elm_lang$core$Json_Decode$int,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'sid',
											_elm_lang$core$Json_Decode$string,
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Data$SmsInbound))))))))))));
var _monty5811$apostello$Data$SmsOutbound = F6(
	function (a, b, c, d, e, f) {
		return {content: a, pk: b, time_sent: c, sent_by: d, recipient: e, status: f};
	});
var _monty5811$apostello$Data$Recipient = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {first_name: a, last_name: b, number: c, pk: d, full_name: e, is_archived: f, is_blocking: g, do_not_reply: h, notes: i, last_sms: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _monty5811$apostello$Data$decodeRecipient = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'last_sms',
	_elm_lang$core$Json_Decode$maybe(_monty5811$apostello$Data$decodeSmsInbound),
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'notes',
		_elm_lang$core$Json_Decode$string,
		'',
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'do_not_reply',
			_elm_lang$core$Json_Decode$bool,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'is_blocking',
				_elm_lang$core$Json_Decode$bool,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'is_archived',
					_elm_lang$core$Json_Decode$bool,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'full_name',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'pk',
							_elm_lang$core$Json_Decode$int,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'number',
								_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'last_name',
									_elm_lang$core$Json_Decode$string,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'first_name',
										_elm_lang$core$Json_Decode$string,
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Data$Recipient)))))))))));
var _monty5811$apostello$Data$RecipientSimple = F2(
	function (a, b) {
		return {full_name: a, pk: b};
	});
var _monty5811$apostello$Data$decodeRecipientSimple = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'pk',
	_elm_lang$core$Json_Decode$int,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'full_name',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Data$RecipientSimple)));
var _monty5811$apostello$Data$RecipientGroup = F7(
	function (a, b, c, d, e, f, g) {
		return {name: a, pk: b, description: c, members: d, nonmembers: e, cost: f, is_archived: g};
	});
var _monty5811$apostello$Data$nullGroup = A7(
	_monty5811$apostello$Data$RecipientGroup,
	'',
	0,
	'',
	{ctor: '[]'},
	{ctor: '[]'},
	0,
	false);
var _monty5811$apostello$Data$decodeRecipientGroup = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'is_archived',
	_elm_lang$core$Json_Decode$bool,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'cost',
		_elm_lang$core$Json_Decode$float,
		A4(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
			'nonmembers',
			_elm_lang$core$Json_Decode$list(_monty5811$apostello$Data$decodeRecipientSimple),
			{ctor: '[]'},
			A4(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
				'members',
				_elm_lang$core$Json_Decode$list(_monty5811$apostello$Data$decodeRecipientSimple),
				{ctor: '[]'},
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'description',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'pk',
						_elm_lang$core$Json_Decode$int,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'name',
							_elm_lang$core$Json_Decode$string,
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Data$RecipientGroup))))))));
var _monty5811$apostello$Data$Keyword = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return {keyword: a, pk: b, description: c, current_response: d, is_live: e, num_replies: f, num_archived_replies: g, is_archived: h, disable_all_replies: i, custom_response: j, custom_response_new_person: k, deactivated_response: l, too_early_response: m, activate_time: n, deactivate_time: o, linked_groups: p, owners: q, subscribed_to_digest: r};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _monty5811$apostello$Data$decodeKeyword = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'subscribed_to_digest',
	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$int),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'owners',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$int),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'linked_groups',
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$int),
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'deactivate_time',
				_elm_lang$core$Json_Decode$maybe(_elm_community$json_extra$Json_Decode_Extra$date),
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'activate_time',
					_elm_community$json_extra$Json_Decode_Extra$date,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'too_early_response',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'deactivated_response',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'custom_response_new_person',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'custom_response',
									_elm_lang$core$Json_Decode$string,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'disable_all_replies',
										_elm_lang$core$Json_Decode$bool,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'is_archived',
											_elm_lang$core$Json_Decode$bool,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'num_archived_replies',
												_elm_lang$core$Json_Decode$string,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'num_replies',
													_elm_lang$core$Json_Decode$string,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'is_live',
														_elm_lang$core$Json_Decode$bool,
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
															'current_response',
															_elm_lang$core$Json_Decode$string,
															A3(
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																'description',
																_elm_lang$core$Json_Decode$string,
																A3(
																	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																	'pk',
																	_elm_lang$core$Json_Decode$int,
																	A3(
																		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																		'keyword',
																		_elm_lang$core$Json_Decode$string,
																		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Data$Keyword)))))))))))))))))));
var _monty5811$apostello$Data$QueuedSms = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {pk: a, time_to_send: b, time_to_send_formatted: c, sent: d, failed: e, content: f, recipient: g, recipient_group: h, sent_by: i};
	});
var _monty5811$apostello$Data$decodeQueuedSms = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'sent_by',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'recipient_group',
		_elm_lang$core$Json_Decode$maybe(_monty5811$apostello$Data$decodeRecipientGroup),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'recipient',
			_monty5811$apostello$Data$decodeRecipient,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'content',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'failed',
					_elm_lang$core$Json_Decode$bool,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'sent',
						_elm_lang$core$Json_Decode$bool,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'time_to_send_formatted',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'time_to_send',
								_elm_lang$core$Json_Decode$maybe(_elm_community$json_extra$Json_Decode_Extra$date),
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'pk',
									_elm_lang$core$Json_Decode$int,
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Data$QueuedSms))))))))));
var _monty5811$apostello$Data$ElvantoGroup = F4(
	function (a, b, c, d) {
		return {name: a, pk: b, sync: c, last_synced: d};
	});
var _monty5811$apostello$Data$decodeElvantoGroup = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'last_synced',
	_elm_lang$core$Json_Decode$maybe(_elm_community$json_extra$Json_Decode_Extra$date),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'sync',
		_elm_lang$core$Json_Decode$bool,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'pk',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'name',
				_elm_lang$core$Json_Decode$string,
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Data$ElvantoGroup)))));
var _monty5811$apostello$Data$UserProfile = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return {pk: a, user: b, approved: c, message_cost_limit: d, can_see_groups: e, can_see_contact_names: f, can_see_keywords: g, can_see_outgoing: h, can_see_incoming: i, can_send_sms: j, can_see_contact_nums: k, can_see_contact_notes: l, can_import: m, can_archive: n};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _monty5811$apostello$Data$User = F5(
	function (a, b, c, d, e) {
		return {pk: a, email: b, username: c, is_staff: d, is_social: e};
	});
var _monty5811$apostello$Data$decodeUser = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'is_social',
	_elm_lang$core$Json_Decode$bool,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'is_staff',
		_elm_lang$core$Json_Decode$bool,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'username',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'email',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'pk',
					_elm_lang$core$Json_Decode$int,
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Data$User))))));
var _monty5811$apostello$Data$decodeUserProfile = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'can_archive',
	_elm_lang$core$Json_Decode$bool,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'can_import',
		_elm_lang$core$Json_Decode$bool,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'can_see_contact_notes',
			_elm_lang$core$Json_Decode$bool,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'can_see_contact_nums',
				_elm_lang$core$Json_Decode$bool,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'can_send_sms',
					_elm_lang$core$Json_Decode$bool,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'can_see_incoming',
						_elm_lang$core$Json_Decode$bool,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'can_see_outgoing',
							_elm_lang$core$Json_Decode$bool,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'can_see_keywords',
								_elm_lang$core$Json_Decode$bool,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'can_see_contact_names',
									_elm_lang$core$Json_Decode$bool,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'can_see_groups',
										_elm_lang$core$Json_Decode$bool,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'message_cost_limit',
											_elm_lang$core$Json_Decode$float,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'approved',
												_elm_lang$core$Json_Decode$bool,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'user',
													_monty5811$apostello$Data$decodeUser,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'pk',
														_elm_lang$core$Json_Decode$int,
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Data$UserProfile)))))))))))))));
var _monty5811$apostello$Data$Unknown = {ctor: 'Unknown'};
var _monty5811$apostello$Data$Failed = {ctor: 'Failed'};
var _monty5811$apostello$Data$Undelivered = {ctor: 'Undelivered'};
var _monty5811$apostello$Data$Delivered = {ctor: 'Delivered'};
var _monty5811$apostello$Data$Received = {ctor: 'Received'};
var _monty5811$apostello$Data$Receiving = {ctor: 'Receiving'};
var _monty5811$apostello$Data$Sent = {ctor: 'Sent'};
var _monty5811$apostello$Data$Sending = {ctor: 'Sending'};
var _monty5811$apostello$Data$Queued = {ctor: 'Queued'};
var _monty5811$apostello$Data$Accepted = {ctor: 'Accepted'};
var _monty5811$apostello$Data$mdStatusFromString = function (str) {
	var _p1 = str;
	switch (_p1) {
		case 'accepted':
			return _monty5811$apostello$Data$Accepted;
		case 'queued':
			return _monty5811$apostello$Data$Queued;
		case 'sending':
			return _monty5811$apostello$Data$Sending;
		case 'sent':
			return _monty5811$apostello$Data$Sent;
		case 'receiving':
			return _monty5811$apostello$Data$Receiving;
		case 'received':
			return _monty5811$apostello$Data$Received;
		case 'delivered':
			return _monty5811$apostello$Data$Delivered;
		case 'undelivered':
			return _monty5811$apostello$Data$Undelivered;
		case 'failed':
			return _monty5811$apostello$Data$Failed;
		default:
			return _monty5811$apostello$Data$Unknown;
	}
};
var _monty5811$apostello$Data$decodeStatus = function (status) {
	return _elm_lang$core$Json_Decode$succeed(
		_monty5811$apostello$Data$mdStatusFromString(status));
};
var _monty5811$apostello$Data$decodeSmsOutbound = A2(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'status',
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$Json_Decode$andThen, _monty5811$apostello$Data$decodeStatus, _elm_lang$core$Json_Decode$string)),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'recipient',
		_elm_lang$core$Json_Decode$maybe(_monty5811$apostello$Data$decodeRecipientSimple),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'sent_by',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'time_sent',
				_elm_lang$core$Json_Decode$maybe(_elm_community$json_extra$Json_Decode_Extra$date),
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'pk',
					_elm_lang$core$Json_Decode$int,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'content',
						_elm_lang$core$Json_Decode$string,
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Data$SmsOutbound)))))));

var _monty5811$apostello$DjangoSend$encodeBody = function (data) {
	return _elm_lang$http$Http$jsonBody(
		_elm_lang$core$Json_Encode$object(data));
};
var _monty5811$apostello$DjangoSend$rawPost = F3(
	function (_p0, url, body) {
		var _p1 = _p0;
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {
					ctor: '::',
					_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', _p1._0),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$http$Http$header, 'Accept', 'application/json'),
						_1: {ctor: '[]'}
					}
				},
				url: url,
				body: _monty5811$apostello$DjangoSend$encodeBody(body),
				expect: _elm_lang$http$Http$expectStringResponse(
					function (a) {
						return _elm_lang$core$Result$Ok(
							{code: a.status.code, body: a.body});
					}),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: true
			});
	});
var _monty5811$apostello$DjangoSend$archivePostRaw = F3(
	function (csrftoken, url, isArchived) {
		return A3(
			_monty5811$apostello$DjangoSend$rawPost,
			csrftoken,
			url,
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'archived',
					_1: _elm_lang$core$Json_Encode$bool(isArchived)
				},
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$DjangoSend$post = F4(
	function (_p2, url, body, decoder) {
		var _p3 = _p2;
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {
					ctor: '::',
					_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', _p3._0),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$http$Http$header, 'Accept', 'application/json'),
						_1: {ctor: '[]'}
					}
				},
				url: url,
				body: _monty5811$apostello$DjangoSend$encodeBody(body),
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: true
			});
	});
var _monty5811$apostello$DjangoSend$archivePost = F3(
	function (csrftoken, url, isArchived) {
		return A3(
			_monty5811$apostello$DjangoSend$post,
			csrftoken,
			url,
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'archived',
					_1: _elm_lang$core$Json_Encode$bool(isArchived)
				},
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$DjangoSend$CSRFToken = function (a) {
	return {ctor: 'CSRFToken', _0: a};
};

var _monty5811$apostello$Pages_Fragments_Loader$loader = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('spinner'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('dot1'),
				_1: {ctor: '[]'}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('dot2'),
					_1: {ctor: '[]'}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});

var _monty5811$remote_list$RemoteList$toList = function (rl) {
	var _p0 = rl;
	switch (_p0.ctor) {
		case 'NotAsked':
			return _p0._0;
		case 'WaitingForFirstResp':
			return _p0._0;
		case 'WaitingForPage':
			return _p0._0;
		case 'FinalPageReceived':
			return _p0._0;
		case 'WaitingOnRefresh':
			return _p0._0;
		default:
			return _p0._1;
	}
};
var _monty5811$remote_list$RemoteList$hasFinished = function (ls) {
	var _p1 = ls;
	if (_p1.ctor === 'FinalPageReceived') {
		return true;
	} else {
		return false;
	}
};
var _monty5811$remote_list$RemoteList$hasFailed = function (ls) {
	var _p2 = ls;
	if (_p2.ctor === 'RespFailed') {
		return true;
	} else {
		return false;
	}
};
var _monty5811$remote_list$RemoteList$RespFailed = F2(
	function (a, b) {
		return {ctor: 'RespFailed', _0: a, _1: b};
	});
var _monty5811$remote_list$RemoteList$WaitingOnRefresh = function (a) {
	return {ctor: 'WaitingOnRefresh', _0: a};
};
var _monty5811$remote_list$RemoteList$FinalPageReceived = function (a) {
	return {ctor: 'FinalPageReceived', _0: a};
};
var _monty5811$remote_list$RemoteList$WaitingForPage = function (a) {
	return {ctor: 'WaitingForPage', _0: a};
};
var _monty5811$remote_list$RemoteList$WaitingForFirstResp = function (a) {
	return {ctor: 'WaitingForFirstResp', _0: a};
};
var _monty5811$remote_list$RemoteList$NotAsked = function (a) {
	return {ctor: 'NotAsked', _0: a};
};
var _monty5811$remote_list$RemoteList$apply = F2(
	function (fn, rl) {
		var _p3 = rl;
		switch (_p3.ctor) {
			case 'NotAsked':
				return _monty5811$remote_list$RemoteList$NotAsked(
					fn(_p3._0));
			case 'WaitingForFirstResp':
				return _monty5811$remote_list$RemoteList$WaitingForFirstResp(
					fn(_p3._0));
			case 'WaitingForPage':
				return _monty5811$remote_list$RemoteList$WaitingForPage(
					fn(_p3._0));
			case 'FinalPageReceived':
				return _monty5811$remote_list$RemoteList$FinalPageReceived(
					fn(_p3._0));
			case 'WaitingOnRefresh':
				return _monty5811$remote_list$RemoteList$WaitingOnRefresh(
					fn(_p3._0));
			default:
				return A2(
					_monty5811$remote_list$RemoteList$RespFailed,
					_p3._0,
					fn(_p3._1));
		}
	});
var _monty5811$remote_list$RemoteList$map = F2(
	function (fn, rl) {
		return A2(
			_monty5811$remote_list$RemoteList$apply,
			_elm_lang$core$List$map(fn),
			rl);
	});
var _monty5811$remote_list$RemoteList$filter = F2(
	function (fn, rl) {
		return A2(
			_monty5811$remote_list$RemoteList$apply,
			_elm_lang$core$List$filter(fn),
			rl);
	});

var _monty5811$apostello$FilteringTable$clampPage = F2(
	function (numPages, page) {
		return A3(_elm_lang$core$Basics$clamp, 1, numPages, page);
	});
var _monty5811$apostello$FilteringTable$getPage = F2(
	function (page, rows) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(_elm_community$list_extra$List_Extra$getAt, page - 1, rows));
	});
var _monty5811$apostello$FilteringTable$paginate = function (rows) {
	return A2(_elm_community$list_extra$List_Extra$greedyGroupsOf, 100, rows);
};
var _monty5811$apostello$FilteringTable$filterInput = function (msg) {
	return A2(
		_elm_lang$html$Html$input,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$type_('text'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$placeholder('Filter...'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '1rem'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onInput(msg),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{ctor: '[]'});
};
var _monty5811$apostello$FilteringTable$emptyView = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('alert alert-info'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: _elm_lang$html$Html$text('No data to display'),
		_1: {ctor: '[]'}
	});
var _monty5811$apostello$FilteringTable$textToRegex = function (t) {
	return _elm_lang$core$Regex$caseInsensitive(
		_elm_lang$core$Regex$regex(
			_elm_lang$core$Regex$escape(t)));
};
var _monty5811$apostello$FilteringTable$filterRecord = F2(
	function (regex, record) {
		return A2(
			_elm_lang$core$Regex$contains,
			regex,
			_elm_lang$core$Basics$toString(record));
	});
var _monty5811$apostello$FilteringTable$update = F2(
	function (msg, model) {
		var _p0 = msg;
		if (_p0.ctor === 'UpdateFilter') {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					filter: _monty5811$apostello$FilteringTable$textToRegex(_p0._0)
				});
		} else {
			return _elm_lang$core$Native_Utils.update(
				model,
				{page: _p0._0});
		}
	});
var _monty5811$apostello$FilteringTable$initialModel = {
	filter: _elm_lang$core$Regex$regex(''),
	page: 1
};
var _monty5811$apostello$FilteringTable$Model = F2(
	function (a, b) {
		return {filter: a, page: b};
	});
var _monty5811$apostello$FilteringTable$Messages = function (a) {
	return {top: a};
};
var _monty5811$apostello$FilteringTable$GoToPage = function (a) {
	return {ctor: 'GoToPage', _0: a};
};
var _monty5811$apostello$FilteringTable$prevButton = F2(
	function (msgs, curPage) {
		var attrs = function () {
			var _p1 = _elm_lang$core$Native_Utils.eq(curPage, 1);
			if (_p1 === true) {
				return {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('button button-white'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$disabled(true),
						_1: {ctor: '[]'}
					}
				};
			} else {
				return {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('button button-white'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$disabled(false),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								msgs.top(
									_monty5811$apostello$FilteringTable$GoToPage(curPage - 1))),
							_1: {ctor: '[]'}
						}
					}
				};
			}
		}();
		return A2(
			_elm_lang$html$Html$button,
			attrs,
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('fa fa-chevron-left'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$FilteringTable$nextButton = F3(
	function (msgs, curPage, numPages) {
		var attrs = function () {
			var _p2 = _elm_lang$core$Native_Utils.eq(curPage, numPages);
			if (_p2 === true) {
				return {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('button button-white'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$disabled(true),
						_1: {ctor: '[]'}
					}
				};
			} else {
				return {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('button button-white'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							msgs.top(
								_monty5811$apostello$FilteringTable$GoToPage(curPage + 1))),
						_1: {ctor: '[]'}
					}
				};
			}
		}();
		return A2(
			_elm_lang$html$Html$button,
			attrs,
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('fa fa-chevron-right'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$FilteringTable$pageButton = F3(
	function (msgs, goToPage, curPage) {
		var $class = function () {
			var _p3 = _elm_lang$core$Native_Utils.eq(curPage, goToPage);
			if (_p3 === true) {
				return 'button';
			} else {
				return 'button button-white';
			}
		}();
		return A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class($class),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						msgs.top(
							_monty5811$apostello$FilteringTable$GoToPage(goToPage))),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_elm_lang$core$Basics$toString(goToPage)),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$FilteringTable$leftButtons = F2(
	function (msgs, curPage) {
		return _elm_lang$core$Native_Utils.eq(curPage, 2) ? {
			ctor: '::',
			_0: _elm_lang$html$Html$text(''),
			_1: {ctor: '[]'}
		} : {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('button'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$disabled(true),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('...'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A3(_monty5811$apostello$FilteringTable$pageButton, msgs, curPage - 1, curPage),
				_1: {ctor: '[]'}
			}
		};
	});
var _monty5811$apostello$FilteringTable$rightButtons = F3(
	function (msgs, curPage, numPages) {
		return _elm_lang$core$Native_Utils.eq(curPage, numPages - 1) ? {
			ctor: '::',
			_0: _elm_lang$html$Html$text(''),
			_1: {ctor: '[]'}
		} : {
			ctor: '::',
			_0: A3(_monty5811$apostello$FilteringTable$pageButton, msgs, curPage + 1, curPage),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('button'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$disabled(true),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('...'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		};
	});
var _monty5811$apostello$FilteringTable$buttons = F3(
	function (msgs, curPage, numPages) {
		var middleButtons = _elm_lang$core$Native_Utils.eq(curPage, 1) ? _elm_lang$core$List$concat(
			{
				ctor: '::',
				_0: {
					ctor: '::',
					_0: A3(_monty5811$apostello$FilteringTable$pageButton, msgs, 1, curPage),
					_1: {ctor: '[]'}
				},
				_1: {
					ctor: '::',
					_0: A3(_monty5811$apostello$FilteringTable$rightButtons, msgs, curPage, numPages),
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: A3(_monty5811$apostello$FilteringTable$pageButton, msgs, numPages, curPage),
							_1: {ctor: '[]'}
						},
						_1: {ctor: '[]'}
					}
				}
			}) : (_elm_lang$core$Native_Utils.eq(curPage, numPages) ? _elm_lang$core$List$concat(
			{
				ctor: '::',
				_0: {
					ctor: '::',
					_0: A3(_monty5811$apostello$FilteringTable$pageButton, msgs, 1, curPage),
					_1: {ctor: '[]'}
				},
				_1: {
					ctor: '::',
					_0: A2(_monty5811$apostello$FilteringTable$leftButtons, msgs, curPage),
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: A3(_monty5811$apostello$FilteringTable$pageButton, msgs, numPages, curPage),
							_1: {ctor: '[]'}
						},
						_1: {ctor: '[]'}
					}
				}
			}) : _elm_lang$core$List$concat(
			{
				ctor: '::',
				_0: {
					ctor: '::',
					_0: A3(_monty5811$apostello$FilteringTable$pageButton, msgs, 1, curPage),
					_1: {ctor: '[]'}
				},
				_1: {
					ctor: '::',
					_0: A2(_monty5811$apostello$FilteringTable$leftButtons, msgs, curPage),
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: A3(_monty5811$apostello$FilteringTable$pageButton, msgs, curPage, curPage),
							_1: {ctor: '[]'}
						},
						_1: {
							ctor: '::',
							_0: A3(_monty5811$apostello$FilteringTable$rightButtons, msgs, curPage, numPages),
							_1: {
								ctor: '::',
								_0: {
									ctor: '::',
									_0: A3(_monty5811$apostello$FilteringTable$pageButton, msgs, numPages, curPage),
									_1: {ctor: '[]'}
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}));
		return _elm_lang$core$List$concat(
			{
				ctor: '::',
				_0: {
					ctor: '::',
					_0: A2(_monty5811$apostello$FilteringTable$prevButton, msgs, curPage),
					_1: {ctor: '[]'}
				},
				_1: {
					ctor: '::',
					_0: middleButtons,
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: A3(_monty5811$apostello$FilteringTable$nextButton, msgs, curPage, numPages),
							_1: {ctor: '[]'}
						},
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _monty5811$apostello$FilteringTable$pageControls = F3(
	function (msgs, page, numPages) {
		var _p4 = _elm_lang$core$Native_Utils.cmp(numPages, 2) < 0;
		if (_p4 === true) {
			return _elm_lang$html$Html$text('');
		} else {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				A3(_monty5811$apostello$FilteringTable$buttons, msgs, page, numPages));
		}
	});
var _monty5811$apostello$FilteringTable$UpdateFilter = function (a) {
	return {ctor: 'UpdateFilter', _0: a};
};
var _monty5811$apostello$FilteringTable$table = F6(
	function (msgs, tableClass, tableHead, model, rowConstructor, data) {
		var items = _monty5811$remote_list$RemoteList$toList(data);
		var filteredItems = A2(
			_elm_lang$core$List$filter,
			_monty5811$apostello$FilteringTable$filterRecord(model.filter),
			items);
		var pages = _monty5811$apostello$FilteringTable$paginate(filteredItems);
		var numPages = _elm_lang$core$List$length(pages);
		var curPage = A2(_monty5811$apostello$FilteringTable$clampPage, numPages, model.page);
		var _p5 = _elm_lang$core$List$length(items);
		if (_p5 === 0) {
			var _p6 = data;
			switch (_p6.ctor) {
				case 'NotAsked':
					return _monty5811$apostello$Pages_Fragments_Loader$loader;
				case 'WaitingForFirstResp':
					return _monty5811$apostello$Pages_Fragments_Loader$loader;
				default:
					return _monty5811$apostello$FilteringTable$emptyView;
			}
		} else {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('xOverflow'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _monty5811$apostello$FilteringTable$filterInput(
						function (_p7) {
							return msgs.top(
								_monty5811$apostello$FilteringTable$UpdateFilter(_p7));
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$table,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class(tableClass),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: tableHead,
								_1: {
									ctor: '::',
									_0: A3(
										_elm_lang$html$Html_Keyed$node,
										'tbody',
										{ctor: '[]'},
										A2(
											_elm_lang$core$List$map,
											rowConstructor,
											A2(_monty5811$apostello$FilteringTable$getPage, curPage, pages))),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A3(_monty5811$apostello$FilteringTable$pageControls, msgs, curPage, numPages),
							_1: {ctor: '[]'}
						}
					}
				});
		}
	});
var _monty5811$apostello$FilteringTable$defaultTable = F5(
	function (msgs, tableHead, tableModel, rowConstructor, data) {
		return A6(_monty5811$apostello$FilteringTable$table, msgs, '', tableHead, tableModel, rowConstructor, data);
	});

var _monty5811$apostello$Notification$removeHelp = F2(
	function (notifToRemove, curNotif) {
		return !_elm_lang$core$Native_Utils.eq(notifToRemove, curNotif);
	});
var _monty5811$apostello$Notification$remove = F2(
	function (notification, notifications) {
		return A2(
			_elm_lang$core$List$filter,
			_monty5811$apostello$Notification$removeHelp(notification),
			notifications);
	});
var _monty5811$apostello$Notification$empty = {ctor: '[]'};
var _monty5811$apostello$Notification$update = F2(
	function (msg, notifs) {
		var _p0 = msg;
		return A2(_monty5811$apostello$Notification$remove, _p0._0, notifs);
	});
var _monty5811$apostello$Notification$Notification = F3(
	function (a, b, c) {
		return {type_: a, text: b, showClose: c};
	});
var _monty5811$apostello$Notification$create = F3(
	function (notifications, text, type_) {
		return {
			ctor: '::',
			_0: A3(_monty5811$apostello$Notification$Notification, type_, text, true),
			_1: notifications
		};
	});
var _monty5811$apostello$Notification$DjangoMessage = F2(
	function (a, b) {
		return {type_: a, text: b};
	});
var _monty5811$apostello$Notification$decodeDjangoMessage = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'text',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'type_',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Notification$DjangoMessage)));
var _monty5811$apostello$Notification$refreshNotifMessage = A2(_monty5811$apostello$Notification$DjangoMessage, 'error', 'Something went wrong there, try refreshing the page and going again.');
var _monty5811$apostello$Notification$Remove = function (a) {
	return {ctor: 'Remove', _0: a};
};
var _monty5811$apostello$Notification$tView = function (notification) {
	var icon = notification.showClose ? {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$i,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('fa fa-close float-right'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						_monty5811$apostello$Notification$Remove(notification)),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	} : {ctor: '[]'};
	var text = A2(
		_elm_lang$core$List$intersperse,
		A2(
			_elm_lang$html$Html$br,
			{ctor: '[]'},
			{ctor: '[]'}),
		A2(
			_elm_lang$core$List$map,
			_elm_lang$html$Html$text,
			A2(_elm_lang$core$String$split, '\n', notification.text)));
	var messageType = function () {
		var _p1 = notification.type_;
		switch (_p1.ctor) {
			case 'SuccessNotification':
				return 'success';
			case 'WarningNotification':
				return 'warning';
			case 'InfoNotification':
				return 'info';
			default:
				return 'danger';
		}
	}();
	var className = A2(_elm_lang$core$Basics_ops['++'], 'alert alert-', messageType);
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class(className),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$Basics_ops['++'], icon, text));
};
var _monty5811$apostello$Notification$view = function (notifications) {
	return A2(_elm_lang$core$List$map, _monty5811$apostello$Notification$tView, notifications);
};
var _monty5811$apostello$Notification$ErrorNotification = {ctor: 'ErrorNotification'};
var _monty5811$apostello$Notification$createError = F2(
	function (notifications, text) {
		return A3(_monty5811$apostello$Notification$create, notifications, text, _monty5811$apostello$Notification$ErrorNotification);
	});
var _monty5811$apostello$Notification$WarningNotification = {ctor: 'WarningNotification'};
var _monty5811$apostello$Notification$createWarning = F2(
	function (notifications, text) {
		return A3(_monty5811$apostello$Notification$create, notifications, text, _monty5811$apostello$Notification$WarningNotification);
	});
var _monty5811$apostello$Notification$createNotSaved = function (notifications) {
	return A2(_monty5811$apostello$Notification$createWarning, notifications, 'Something went wrong, there :-( Your changes may not have been saved');
};
var _monty5811$apostello$Notification$createLoadingFailed = F2(
	function (msg, notifications) {
		return A2(_monty5811$apostello$Notification$createWarning, notifications, msg);
	});
var _monty5811$apostello$Notification$SuccessNotification = {ctor: 'SuccessNotification'};
var _monty5811$apostello$Notification$createSuccess = F2(
	function (notifications, text) {
		return A3(_monty5811$apostello$Notification$create, notifications, text, _monty5811$apostello$Notification$SuccessNotification);
	});
var _monty5811$apostello$Notification$InfoNotification = {ctor: 'InfoNotification'};
var _monty5811$apostello$Notification$createFromDjangoMessage = F2(
	function (dm, notifications) {
		var type_ = function () {
			var _p2 = dm.type_;
			switch (_p2) {
				case 'info':
					return _monty5811$apostello$Notification$InfoNotification;
				case 'success':
					return _monty5811$apostello$Notification$SuccessNotification;
				case 'warning':
					return _monty5811$apostello$Notification$WarningNotification;
				case 'error':
					return _monty5811$apostello$Notification$ErrorNotification;
				default:
					return _monty5811$apostello$Notification$WarningNotification;
			}
		}();
		return A3(_monty5811$apostello$Notification$create, notifications, dm.text, type_);
	});
var _monty5811$apostello$Notification$addListOfDjangoMessages = F2(
	function (msgs, notifications) {
		return A3(_elm_lang$core$List$foldl, _monty5811$apostello$Notification$createFromDjangoMessage, notifications, msgs);
	});
var _monty5811$apostello$Notification$addRefreshNotif = function (notifications) {
	return A2(
		_monty5811$apostello$Notification$addListOfDjangoMessages,
		{
			ctor: '::',
			_0: _monty5811$apostello$Notification$refreshNotifMessage,
			_1: {ctor: '[]'}
		},
		notifications);
};
var _monty5811$apostello$Notification$createInfo = F2(
	function (notifications, text) {
		return A3(_monty5811$apostello$Notification$create, notifications, text, _monty5811$apostello$Notification$InfoNotification);
	});

var _monty5811$apostello$Forms_Model$noErrors = _elm_lang$core$Dict$empty;
var _monty5811$apostello$Forms_Model$formDecodeError = function (err) {
	return A3(
		_elm_lang$core$Dict$insert,
		'__all__',
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				'Something strange happend there. (',
				A2(_elm_lang$core$Basics_ops['++'], err, ')')),
			_1: {ctor: '[]'}
		},
		_monty5811$apostello$Forms_Model$noErrors);
};
var _monty5811$apostello$Forms_Model$formErrors = function (formStatus) {
	var _p0 = formStatus;
	if (_p0.ctor === 'Failed') {
		return _p0._0;
	} else {
		return _monty5811$apostello$Forms_Model$noErrors;
	}
};
var _monty5811$apostello$Forms_Model$FormResp = F2(
	function (a, b) {
		return {messages: a, errors: b};
	});
var _monty5811$apostello$Forms_Model$decodeFormResp = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'errors',
	_elm_lang$core$Json_Decode$dict(
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'messages',
		_elm_lang$core$Json_Decode$list(_monty5811$apostello$Notification$decodeDjangoMessage),
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Forms_Model$FormResp)));
var _monty5811$apostello$Forms_Model$FieldGroupConfig = F3(
	function (a, b, c) {
		return {header: a, helpText: b, sideBySide: c};
	});
var _monty5811$apostello$Forms_Model$defaultFieldGroupConfig = A3(_monty5811$apostello$Forms_Model$FieldGroupConfig, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);
var _monty5811$apostello$Forms_Model$Field = F2(
	function (a, b) {
		return {meta: a, view: b};
	});
var _monty5811$apostello$Forms_Model$FieldMeta = F5(
	function (a, b, c, d, e) {
		return {required: a, id: b, name: c, label: d, help: e};
	});
var _monty5811$apostello$Forms_Model$Failed = function (a) {
	return {ctor: 'Failed', _0: a};
};
var _monty5811$apostello$Forms_Model$Success = {ctor: 'Success'};
var _monty5811$apostello$Forms_Model$InProgress = {ctor: 'InProgress'};
var _monty5811$apostello$Forms_Model$NoAction = {ctor: 'NoAction'};
var _monty5811$apostello$Forms_Model$FieldGroup = F2(
	function (a, b) {
		return {ctor: 'FieldGroup', _0: a, _1: b};
	});
var _monty5811$apostello$Forms_Model$FormHeader = function (a) {
	return {ctor: 'FormHeader', _0: a};
};
var _monty5811$apostello$Forms_Model$FormField = function (a) {
	return {ctor: 'FormField', _0: a};
};

var _monty5811$apostello$Urls$spa_ = '/';
var _monty5811$apostello$Urls$socialaccount_signup = '/accounts/social/signup/';
var _monty5811$apostello$Urls$socialaccount_login_error = '/accounts/social/login/error/';
var _monty5811$apostello$Urls$socialaccount_login_cancelled = '/accounts/social/login/cancelled/';
var _monty5811$apostello$Urls$socialaccount_connections = '/accounts/social/connections/';
var _monty5811$apostello$Urls$site_config_test_sms = '/config/send_test_sms/';
var _monty5811$apostello$Urls$site_config_test_email = '/config/send_test_email/';
var _monty5811$apostello$Urls$site_config_first_run = '/config/first_run/';
var _monty5811$apostello$Urls$site_config_create_super_user = '/config/create_admin_user/';
var _monty5811$apostello$Urls$offline = '/offline/';
var _monty5811$apostello$Urls$not_approved = '/not_approved/';
var _monty5811$apostello$Urls$keyword_csv = function (keyword) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/keyword/responses/csv/',
		A2(_elm_lang$core$Basics_ops['++'], keyword, '/'));
};
var _monty5811$apostello$Urls$google_login = '/accounts/google/login/';
var _monty5811$apostello$Urls$google_callback = '/accounts/google/login/callback/';
var _monty5811$apostello$Urls$api_users = '/api/v2/users/';
var _monty5811$apostello$Urls$api_user_profiles = '/api/v2/users/profiles/';
var _monty5811$apostello$Urls$api_user_profile_update = function (pk) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v2/actions/users/profiles/update/',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(pk),
			'/'));
};
var _monty5811$apostello$Urls$api_toggle_elvanto_group_sync = function (pk) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v2/toggle/elvanto/group/sync/',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(pk),
			'/'));
};
var _monty5811$apostello$Urls$api_toggle_display_on_wall = function (pk) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v2/toggle/sms/in/display_on_wall/',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(pk),
			'/'));
};
var _monty5811$apostello$Urls$api_toggle_deal_with_sms = function (pk) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v2/toggle/sms/in/deal_with/',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(pk),
			'/'));
};
var _monty5811$apostello$Urls$api_site_config = '/api/v2/config/';
var _monty5811$apostello$Urls$api_setup = '/api/v2/setup/';
var _monty5811$apostello$Urls$api_recipients_import_csv = '/api/v2/recipients/import/csv/';
var _monty5811$apostello$Urls$api_recipients = function (pk) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v2/recipients/',
		function () {
			var _p0 = pk;
			if (_p0.ctor === 'Just') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p0._0),
					'/');
			} else {
				return '';
			}
		}());
};
var _monty5811$apostello$Urls$api_recipient_groups = function (pk) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v2/groups/',
		function () {
			var _p1 = pk;
			if (_p1.ctor === 'Just') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p1._0),
					'/');
			} else {
				return '';
			}
		}());
};
var _monty5811$apostello$Urls$api_queued_smss = '/api/v2/queued/sms/';
var _monty5811$apostello$Urls$api_out_log = '/api/v2/sms/out/';
var _monty5811$apostello$Urls$api_keywords = function (keyword) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v2/keywords/',
		function () {
			var _p2 = keyword;
			if (_p2.ctor === 'Just') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p2._0),
					'/');
			} else {
				return '';
			}
		}());
};
var _monty5811$apostello$Urls$api_in_log = '/api/v2/sms/in/';
var _monty5811$apostello$Urls$api_elvanto_groups = '/api/v2/elvanto/groups/';
var _monty5811$apostello$Urls$api_docs_schema_js = '/api-docs/schema.js';
var _monty5811$apostello$Urls$api_docs_docs_index = '/api-docs/';
var _monty5811$apostello$Urls$api_default_responses = '/api/v2/responses/';
var _monty5811$apostello$Urls$api_act_update_group_members = function (pk) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v2/actions/group/update_members/',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(pk),
			'/'));
};
var _monty5811$apostello$Urls$api_act_send_group = '/api/v2/actions/sms/send/group/';
var _monty5811$apostello$Urls$api_act_send_adhoc = '/api/v2/actions/sms/send/adhoc/';
var _monty5811$apostello$Urls$api_act_remove_cm_id = '/api/v2/actions/user/remove_cm_id/';
var _monty5811$apostello$Urls$api_act_reingest_sms = function (pk) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v2/actions/sms/in/reingest/',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(pk),
			'/'));
};
var _monty5811$apostello$Urls$api_act_pull_elvanto_groups = '/api/v2/actions/elvanto/group_pull/';
var _monty5811$apostello$Urls$api_act_keyword_archive_all_responses = function (keyword) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v2/actions/keywords/',
		A2(_elm_lang$core$Basics_ops['++'], keyword, '/archive_resps/'));
};
var _monty5811$apostello$Urls$api_act_fetch_elvanto_groups = '/api/v2/actions/elvanto/group_fetch/';
var _monty5811$apostello$Urls$api_act_create_all_group = '/api/v2/actions/group/create_all/';
var _monty5811$apostello$Urls$api_act_cancel_queued_sms = function (pk) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v2/actions/queued/sms/',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(pk),
			'/'));
};
var _monty5811$apostello$Urls$api_act_archive_sms = function (pk) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v2/actions/sms/in/archive/',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(pk),
			'/'));
};
var _monty5811$apostello$Urls$api_act_archive_recipient = function (pk) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v2/actions/recipient/archive/',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(pk),
			'/'));
};
var _monty5811$apostello$Urls$api_act_archive_keyword = function (keyword) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v2/actions/keyword/archive/',
		A2(_elm_lang$core$Basics_ops['++'], keyword, '/'));
};
var _monty5811$apostello$Urls$api_act_archive_group = function (pk) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v2/actions/group/archive/',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(pk),
			'/'));
};
var _monty5811$apostello$Urls$api_act_add_cm_id = '/api/v2/actions/user/add_cm_id/';
var _monty5811$apostello$Urls$account_signup = '/accounts/signup/';
var _monty5811$apostello$Urls$account_set_password = '/accounts/password/set/';
var _monty5811$apostello$Urls$account_logout = '/accounts/logout/';
var _monty5811$apostello$Urls$account_login = '/accounts/login/';
var _monty5811$apostello$Urls$account_inactive = '/accounts/inactive/';
var _monty5811$apostello$Urls$account_email = '/accounts/email/';
var _monty5811$apostello$Urls$account_change_password = '/accounts/password/change/';

var _monty5811$apostello$Pages_ApiSetup$decodeToken = A2(_elm_lang$core$Json_Decode$field, 'token', _elm_lang$core$Json_Decode$string);
var _monty5811$apostello$Pages_ApiSetup$Props = F3(
	function (a, b, c) {
		return {csrftoken: a, key: b, notifications: c};
	});
var _monty5811$apostello$Pages_ApiSetup$ReceiveApiKey = function (a) {
	return {ctor: 'ReceiveApiKey', _0: a};
};
var _monty5811$apostello$Pages_ApiSetup$genKey = function (csrf) {
	return A2(
		_elm_lang$http$Http$send,
		_monty5811$apostello$Pages_ApiSetup$ReceiveApiKey,
		A4(
			_monty5811$apostello$DjangoSend$post,
			csrf,
			_monty5811$apostello$Urls$api_setup,
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'regen',
					_1: _elm_lang$core$Json_Encode$bool(true)
				},
				_1: {ctor: '[]'}
			},
			_monty5811$apostello$Pages_ApiSetup$decodeToken));
};
var _monty5811$apostello$Pages_ApiSetup$delKey = function (csrf) {
	return A2(
		_elm_lang$http$Http$send,
		_monty5811$apostello$Pages_ApiSetup$ReceiveApiKey,
		A4(
			_monty5811$apostello$DjangoSend$post,
			csrf,
			_monty5811$apostello$Urls$api_setup,
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'delete',
					_1: _elm_lang$core$Json_Encode$bool(true)
				},
				_1: {ctor: '[]'}
			},
			_monty5811$apostello$Pages_ApiSetup$decodeToken));
};
var _monty5811$apostello$Pages_ApiSetup$update = F2(
	function (msg, props) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Get':
				return {
					ctor: '_Tuple3',
					_0: props.key,
					_1: props.notifications,
					_2: {
						ctor: '::',
						_0: A2(
							_elm_lang$http$Http$send,
							_monty5811$apostello$Pages_ApiSetup$ReceiveApiKey,
							A2(_elm_lang$http$Http$get, _monty5811$apostello$Urls$api_setup, _monty5811$apostello$Pages_ApiSetup$decodeToken)),
						_1: {ctor: '[]'}
					}
				};
			case 'Generate':
				return {
					ctor: '_Tuple3',
					_0: props.key,
					_1: props.notifications,
					_2: {
						ctor: '::',
						_0: _monty5811$apostello$Pages_ApiSetup$genKey(props.csrftoken),
						_1: {ctor: '[]'}
					}
				};
			case 'Delete':
				return {
					ctor: '_Tuple3',
					_0: props.key,
					_1: props.notifications,
					_2: {
						ctor: '::',
						_0: _monty5811$apostello$Pages_ApiSetup$delKey(props.csrftoken),
						_1: {ctor: '[]'}
					}
				};
			default:
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Maybe$Just(_p0._0._0),
						_1: props.notifications,
						_2: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: props.key,
						_1: _monty5811$apostello$Notification$addRefreshNotif(props.notifications),
						_2: {ctor: '[]'}
					};
				}
		}
	});
var _monty5811$apostello$Pages_ApiSetup$Delete = {ctor: 'Delete'};
var _monty5811$apostello$Pages_ApiSetup$Generate = {ctor: 'Generate'};
var _monty5811$apostello$Pages_ApiSetup$Get = {ctor: 'Get'};
var _monty5811$apostello$Pages_ApiSetup$view = function (maybeApiKey) {
	var _p1 = maybeApiKey;
	if (_p1.ctor === 'Nothing') {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('button'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_monty5811$apostello$Pages_ApiSetup$Get),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$id('showKeyButton'),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Show Key'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('For more details and help, please read the '),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('https://apostello.readthedocs.io/en/latest/api.html'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('docs'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('.'),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('API Token'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$pre,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(_p1._0),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('button button-success'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(_monty5811$apostello$Pages_ApiSetup$Generate),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$id('genKeyButton'),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('(Re)Generate Token'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('button button-danger'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_monty5811$apostello$Pages_ApiSetup$Delete),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$id('delKeyButton'),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Delete Token'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
	}
};

var _monty5811$apostello$Pages_Debug$smsSuccessMsg = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('alert alert-success'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h4,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('SMS Sending!'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Check your phone to confirm!'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _monty5811$apostello$Pages_Debug$emailSuccessMsg = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('alert alert-success'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h4,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Email sent!'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Check your inbox to confirm!'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _monty5811$apostello$Pages_Debug$formMsg = F2(
	function (status, successDiv) {
		var _p0 = status;
		switch (_p0.ctor) {
			case 'NoAction':
				return _elm_lang$html$Html$text('');
			case 'InProgress':
				return _elm_lang$html$Html$text('');
			case 'Success':
				return successDiv;
			default:
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('alert alert-danger'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h4,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Uh oh, something went wrong!'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Check your settings and try again.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Error:'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$pre,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(_p0._0),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					});
		}
	});
var _monty5811$apostello$Pages_Debug$DebuggerResp = F2(
	function (a, b) {
		return {status: a, error: b};
	});
var _monty5811$apostello$Pages_Debug$decodeDebuggerResp = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'error',
	_elm_lang$core$Json_Decode$string,
	'',
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'status',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Pages_Debug$DebuggerResp)));
var _monty5811$apostello$Pages_Debug$pullOutError = function (e) {
	var _p1 = e;
	switch (_p1.ctor) {
		case 'BadUrl':
			return 'Bad url';
		case 'Timeout':
			return 'Request timed out';
		case 'NetworkError':
			return 'Network error';
		case 'BadStatus':
			var _p2 = _p1._0;
			return function (_) {
				return _.error;
			}(
				A2(
					_elm_lang$core$Result$withDefault,
					{status: '', error: _p2.body},
					A2(_elm_lang$core$Json_Decode$decodeString, _monty5811$apostello$Pages_Debug$decodeDebuggerResp, _p2.body)));
		default:
			return _p1._0;
	}
};
var _monty5811$apostello$Pages_Debug$Model = F6(
	function (a, b, c, d, e, f) {
		return {testEmailTo: a, testEmailBody: b, testEmailFormStatus: c, testSmsTo: d, testSmsBody: e, testSmsFormStatus: f};
	});
var _monty5811$apostello$Pages_Debug$Failed = function (a) {
	return {ctor: 'Failed', _0: a};
};
var _monty5811$apostello$Pages_Debug$Success = {ctor: 'Success'};
var _monty5811$apostello$Pages_Debug$InProgress = {ctor: 'InProgress'};
var _monty5811$apostello$Pages_Debug$NoAction = {ctor: 'NoAction'};
var _monty5811$apostello$Pages_Debug$initialModel = {testEmailTo: '', testEmailBody: '', testEmailFormStatus: _monty5811$apostello$Pages_Debug$NoAction, testSmsTo: '', testSmsBody: '', testSmsFormStatus: _monty5811$apostello$Pages_Debug$NoAction};
var _monty5811$apostello$Pages_Debug$ReceiveSendTestEmail = function (a) {
	return {ctor: 'ReceiveSendTestEmail', _0: a};
};
var _monty5811$apostello$Pages_Debug$sendTestEmail = F2(
	function (csrf, model) {
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'to_',
				_1: _elm_lang$core$Json_Encode$string(model.testEmailTo)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'body_',
					_1: _elm_lang$core$Json_Encode$string(model.testEmailBody)
				},
				_1: {ctor: '[]'}
			}
		};
		return A2(
			_elm_lang$http$Http$send,
			_monty5811$apostello$Pages_Debug$ReceiveSendTestEmail,
			A4(_monty5811$apostello$DjangoSend$post, csrf, '/config/send_test_email/', body, _monty5811$apostello$Pages_Debug$decodeDebuggerResp));
	});
var _monty5811$apostello$Pages_Debug$ReceiveSendTestSms = function (a) {
	return {ctor: 'ReceiveSendTestSms', _0: a};
};
var _monty5811$apostello$Pages_Debug$sendTestSms = F2(
	function (csrf, model) {
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'to_',
				_1: _elm_lang$core$Json_Encode$string(model.testSmsTo)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'body_',
					_1: _elm_lang$core$Json_Encode$string(model.testSmsBody)
				},
				_1: {ctor: '[]'}
			}
		};
		return A2(
			_elm_lang$http$Http$send,
			_monty5811$apostello$Pages_Debug$ReceiveSendTestSms,
			A4(_monty5811$apostello$DjangoSend$post, csrf, '/config/send_test_sms/', body, _monty5811$apostello$Pages_Debug$decodeDebuggerResp));
	});
var _monty5811$apostello$Pages_Debug$update = F3(
	function (csrf, msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'UpdateTestEmailToField':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{testEmailTo: _p3._0}),
					_1: {ctor: '[]'}
				};
			case 'UpdateTestEmailBodyField':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{testEmailBody: _p3._0}),
					_1: {ctor: '[]'}
				};
			case 'SendTestEmail':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{testEmailFormStatus: _monty5811$apostello$Pages_Debug$InProgress}),
					_1: {
						ctor: '::',
						_0: A2(_monty5811$apostello$Pages_Debug$sendTestEmail, csrf, model),
						_1: {ctor: '[]'}
					}
				};
			case 'ReceiveSendTestEmail':
				if (_p3._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{testEmailFormStatus: _monty5811$apostello$Pages_Debug$Success}),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								testEmailFormStatus: _monty5811$apostello$Pages_Debug$Failed(
									_monty5811$apostello$Pages_Debug$pullOutError(_p3._0._0))
							}),
						_1: {ctor: '[]'}
					};
				}
			case 'UpdateTestSmsToField':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{testSmsTo: _p3._0}),
					_1: {ctor: '[]'}
				};
			case 'UpdateTestSmsBodyField':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{testSmsBody: _p3._0}),
					_1: {ctor: '[]'}
				};
			case 'SendTestSms':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{testSmsFormStatus: _monty5811$apostello$Pages_Debug$InProgress}),
					_1: {
						ctor: '::',
						_0: A2(_monty5811$apostello$Pages_Debug$sendTestSms, csrf, model),
						_1: {ctor: '[]'}
					}
				};
			default:
				if (_p3._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{testSmsFormStatus: _monty5811$apostello$Pages_Debug$Success}),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								testSmsFormStatus: _monty5811$apostello$Pages_Debug$Failed(
									_monty5811$apostello$Pages_Debug$pullOutError(_p3._0._0))
							}),
						_1: {ctor: '[]'}
					};
				}
		}
	});
var _monty5811$apostello$Pages_Debug$SendTestSms = {ctor: 'SendTestSms'};
var _monty5811$apostello$Pages_Debug$SendTestEmail = {ctor: 'SendTestEmail'};
var _monty5811$apostello$Pages_Debug$UpdateTestSmsBodyField = function (a) {
	return {ctor: 'UpdateTestSmsBodyField', _0: a};
};
var _monty5811$apostello$Pages_Debug$UpdateTestSmsToField = function (a) {
	return {ctor: 'UpdateTestSmsToField', _0: a};
};
var _monty5811$apostello$Pages_Debug$testSmsView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('sent_test_sms'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('segment'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h3,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Send Test SMS'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$form,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onSubmit(_monty5811$apostello$Pages_Debug$SendTestSms),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(_monty5811$apostello$Pages_Debug$formMsg, model.testSmsFormStatus, _monty5811$apostello$Pages_Debug$smsSuccessMsg),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('input-field'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$label,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Phone Number'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$input,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$type_('text'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$name('sms-to'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$placeholder('+447095320967'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$id('sms_to'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onInput(_monty5811$apostello$Pages_Debug$UpdateTestSmsToField),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('input-field'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$label,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('SMS Body'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$input,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$type_('text'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$name('sms-body'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$placeholder('This is a test'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$id('sms_body'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Events$onInput(_monty5811$apostello$Pages_Debug$UpdateTestSmsBodyField),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$button,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('button'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$id('sms_send_button'),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Send'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _monty5811$apostello$Pages_Debug$UpdateTestEmailBodyField = function (a) {
	return {ctor: 'UpdateTestEmailBodyField', _0: a};
};
var _monty5811$apostello$Pages_Debug$UpdateTestEmailToField = function (a) {
	return {ctor: 'UpdateTestEmailToField', _0: a};
};
var _monty5811$apostello$Pages_Debug$testEmailView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('sent_test_email'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('segment'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h3,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Send Test Email'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$form,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onSubmit(_monty5811$apostello$Pages_Debug$SendTestEmail),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(_monty5811$apostello$Pages_Debug$formMsg, model.testEmailFormStatus, _monty5811$apostello$Pages_Debug$emailSuccessMsg),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('input-field'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$label,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Email Address'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$input,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$type_('email'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$name('email-to'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$placeholder('test@example.com'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$id('email_to'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onInput(_monty5811$apostello$Pages_Debug$UpdateTestEmailToField),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('input-field'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$label,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Email Body'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$input,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$type_('text'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$name('email-body'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$placeholder('This is a test'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$id('email_body'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Events$onInput(_monty5811$apostello$Pages_Debug$UpdateTestEmailBodyField),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$button,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('button'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$id('email_send_button'),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Send'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _monty5811$apostello$Pages_Debug$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Use these forms to test your Email and Twilio settings.'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _monty5811$apostello$Pages_Debug$testEmailView(model),
				_1: {
					ctor: '::',
					_0: _monty5811$apostello$Pages_Debug$testSmsView(model),
					_1: {ctor: '[]'}
				}
			}
		});
};

var _monty5811$apostello$Helpers$onClick = function (message) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'click',
		{stopPropagation: true, preventDefault: true},
		_elm_lang$core$Json_Decode$succeed(message));
};
var _monty5811$apostello$Helpers$archiveText = function (isArchived) {
	var _p0 = isArchived;
	if (_p0 === true) {
		return 'UnArchive';
	} else {
		return 'Archive';
	}
};
var _monty5811$apostello$Helpers$archiveCell = F2(
	function (isArchived, msg) {
		return A2(
			_elm_lang$html$Html$td,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('hide-sm-down'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('button button-secondary'),
						_1: {
							ctor: '::',
							_0: _monty5811$apostello$Helpers$onClick(msg),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$id('archiveItemButton'),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_monty5811$apostello$Helpers$archiveText(isArchived)),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Helpers$calculateSmsCost = F2(
	function (smsCostPerMsg, msg) {
		return A2(
			F2(
				function (x, y) {
					return x * y;
				}),
			smsCostPerMsg,
			_elm_lang$core$Basics$toFloat(
				_elm_lang$core$Basics$ceiling(
					A3(
						_elm_lang$core$Basics$flip,
						F2(
							function (x, y) {
								return x / y;
							}),
						160,
						_elm_lang$core$Basics$toFloat(
							_elm_lang$core$String$length(msg))))));
	});
var _monty5811$apostello$Helpers$formatDate = function (date) {
	var _p1 = date;
	if (_p1.ctor === 'Just') {
		return A2(
			_ryannhg$elm_date_format$DateFormat$format,
			{
				ctor: '::',
				_0: _ryannhg$elm_date_format$DateFormat$hourMilitaryFixed,
				_1: {
					ctor: '::',
					_0: _ryannhg$elm_date_format$DateFormat$text(':'),
					_1: {
						ctor: '::',
						_0: _ryannhg$elm_date_format$DateFormat$minuteFixed,
						_1: {
							ctor: '::',
							_0: _ryannhg$elm_date_format$DateFormat$text(' - '),
							_1: {
								ctor: '::',
								_0: _ryannhg$elm_date_format$DateFormat$dayOfMonthSuffix,
								_1: {
									ctor: '::',
									_0: _ryannhg$elm_date_format$DateFormat$text(' '),
									_1: {
										ctor: '::',
										_0: _ryannhg$elm_date_format$DateFormat$monthNameFirstThree,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			},
			_p1._0);
	} else {
		return '';
	}
};
var _monty5811$apostello$Helpers$handleNotSaved = function (model) {
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			model,
			{
				notifications: _monty5811$apostello$Notification$createNotSaved(model.notifications)
			}),
		_1: {ctor: '[]'}
	};
};
var _monty5811$apostello$Helpers$decodeAlwaysTrue = _elm_lang$core$Json_Decode$succeed(true);
var _monty5811$apostello$Helpers$toggleSelectedPk = F2(
	function (pk, pks) {
		var _p2 = A2(_elm_lang$core$List$member, pk, pks);
		if (_p2 === true) {
			return A2(_elm_community$list_extra$List_Extra$remove, pk, pks);
		} else {
			return {ctor: '::', _0: pk, _1: pks};
		}
	});

var _monty5811$apostello$Pages_ElvantoImport$button_ = F4(
	function (props, styling, label, group) {
		return A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(styling),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('elvantoGroupButton'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							props.toggleElvantoGroupSync(group)),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(label),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_ElvantoImport$notSyncingButton = F2(
	function (props, group) {
		return A4(_monty5811$apostello$Pages_ElvantoImport$button_, props, 'button button-secondary', 'Disabled', group);
	});
var _monty5811$apostello$Pages_ElvantoImport$syncingButton = F2(
	function (props, group) {
		return A4(_monty5811$apostello$Pages_ElvantoImport$button_, props, 'button button-success', 'Syncing', group);
	});
var _monty5811$apostello$Pages_ElvantoImport$toggleSyncButton = F2(
	function (props, group) {
		var _p0 = group.sync;
		if (_p0 === true) {
			return A2(_monty5811$apostello$Pages_ElvantoImport$syncingButton, props, group);
		} else {
			return A2(_monty5811$apostello$Pages_ElvantoImport$notSyncingButton, props, group);
		}
	});
var _monty5811$apostello$Pages_ElvantoImport$groupRow = F2(
	function (props, group) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toString(group.pk),
			_1: A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(group.name),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_monty5811$apostello$Helpers$formatDate(group.last_synced)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(_monty5811$apostello$Pages_ElvantoImport$toggleSyncButton, props, group),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				})
		};
	});
var _monty5811$apostello$Pages_ElvantoImport$tableHead = A2(
	_elm_lang$html$Html$thead,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$th,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$th,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Last Synced'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$th,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Sync?'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _monty5811$apostello$Pages_ElvantoImport$UpdateProps = F2(
	function (a, b) {
		return {topLevelMsg: a, csrftoken: b};
	});
var _monty5811$apostello$Pages_ElvantoImport$Props = F3(
	function (a, b, c) {
		return {tableMsg: a, topMsg: b, toggleElvantoGroupSync: c};
	});
var _monty5811$apostello$Pages_ElvantoImport$ReceiveButtonResp = function (a) {
	return {ctor: 'ReceiveButtonResp', _0: a};
};
var _monty5811$apostello$Pages_ElvantoImport$buttonReq = F2(
	function (props, url) {
		return A2(
			_elm_lang$http$Http$send,
			function (_p1) {
				return props.topLevelMsg(
					_monty5811$apostello$Pages_ElvantoImport$ReceiveButtonResp(_p1));
			},
			A4(
				_monty5811$apostello$DjangoSend$post,
				props.csrftoken,
				url,
				{ctor: '[]'},
				_elm_lang$core$Json_Decode$succeed(true)));
	});
var _monty5811$apostello$Pages_ElvantoImport$update = F3(
	function (props, msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'PullGroups':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							notifications: A2(_monty5811$apostello$Notification$createInfo, model.notifications, 'Groups are being imported, it may take a couple of minutes')
						}),
					_1: {
						ctor: '::',
						_0: A2(_monty5811$apostello$Pages_ElvantoImport$buttonReq, props, _monty5811$apostello$Urls$api_act_pull_elvanto_groups),
						_1: {ctor: '[]'}
					}
				};
			case 'FetchGroups':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							notifications: A2(_monty5811$apostello$Notification$createSuccess, model.notifications, 'Groups are being fetched, it may take a couple of minutes')
						}),
					_1: {
						ctor: '::',
						_0: A2(_monty5811$apostello$Pages_ElvantoImport$buttonReq, props, _monty5811$apostello$Urls$api_act_fetch_elvanto_groups),
						_1: {ctor: '[]'}
					}
				};
			default:
				if (_p2._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				} else {
					return _monty5811$apostello$Helpers$handleNotSaved(model);
				}
		}
	});
var _monty5811$apostello$Pages_ElvantoImport$FetchGroups = {ctor: 'FetchGroups'};
var _monty5811$apostello$Pages_ElvantoImport$fetchButton = function (props) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('button button-success'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					props.topMsg(_monty5811$apostello$Pages_ElvantoImport$FetchGroups)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('fetch_button'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Fetch Groups'),
			_1: {ctor: '[]'}
		});
};
var _monty5811$apostello$Pages_ElvantoImport$PullGroups = {ctor: 'PullGroups'};
var _monty5811$apostello$Pages_ElvantoImport$pullButton = function (props) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('button button-info'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					props.topMsg(_monty5811$apostello$Pages_ElvantoImport$PullGroups)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('pull_button'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Pull Groups'),
			_1: {ctor: '[]'}
		});
};
var _monty5811$apostello$Pages_ElvantoImport$view = F3(
	function (props, tableModel, groups) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _monty5811$apostello$Pages_ElvantoImport$fetchButton(props),
						_1: {
							ctor: '::',
							_0: _monty5811$apostello$Pages_ElvantoImport$pullButton(props),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A6(
							_monty5811$apostello$FilteringTable$table,
							{top: props.tableMsg},
							'table-striped',
							_monty5811$apostello$Pages_ElvantoImport$tableHead,
							tableModel,
							_monty5811$apostello$Pages_ElvantoImport$groupRow(props),
							groups),
						_1: {ctor: '[]'}
					}
				}
			});
	});

var _monty5811$apostello$Pages_FirstRun$adminSuccessMsg = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('alert alert-success'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h4,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Admin User Created'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Refresh this page and you will be able to login'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _monty5811$apostello$Pages_FirstRun$formMsg = F2(
	function (status, successDiv) {
		var _p0 = status;
		switch (_p0.ctor) {
			case 'NoAction':
				return _elm_lang$html$Html$text('');
			case 'InProgress':
				return _elm_lang$html$Html$text('');
			case 'Success':
				return successDiv;
			default:
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('alert alert-danger'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h4,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Uh oh, something went wrong!'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Check your settings and try again.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Error:'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$pre,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(_p0._0),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					});
		}
	});
var _monty5811$apostello$Pages_FirstRun$FirstRunResp = F2(
	function (a, b) {
		return {status: a, error: b};
	});
var _monty5811$apostello$Pages_FirstRun$decodeFirstRunResp = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'error',
	_elm_lang$core$Json_Decode$string,
	'',
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'status',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Pages_FirstRun$FirstRunResp)));
var _monty5811$apostello$Pages_FirstRun$pullOutError = function (e) {
	var _p1 = e;
	switch (_p1.ctor) {
		case 'BadUrl':
			return 'Bad url';
		case 'Timeout':
			return 'Request timed out';
		case 'NetworkError':
			return 'Network error';
		case 'BadStatus':
			var _p2 = _p1._0;
			return function (_) {
				return _.error;
			}(
				A2(
					_elm_lang$core$Result$withDefault,
					{status: '', error: _p2.body},
					A2(_elm_lang$core$Json_Decode$decodeString, _monty5811$apostello$Pages_FirstRun$decodeFirstRunResp, _p2.body)));
		default:
			return _p1._0;
	}
};
var _monty5811$apostello$Pages_FirstRun$Model = F4(
	function (a, b, c, d) {
		return {adminEmail: a, adminPass1: b, adminPass2: c, adminFormStatus: d};
	});
var _monty5811$apostello$Pages_FirstRun$Failed = function (a) {
	return {ctor: 'Failed', _0: a};
};
var _monty5811$apostello$Pages_FirstRun$Success = {ctor: 'Success'};
var _monty5811$apostello$Pages_FirstRun$InProgress = {ctor: 'InProgress'};
var _monty5811$apostello$Pages_FirstRun$NoAction = {ctor: 'NoAction'};
var _monty5811$apostello$Pages_FirstRun$initialModel = {adminEmail: '', adminPass1: '', adminPass2: '', adminFormStatus: _monty5811$apostello$Pages_FirstRun$NoAction};
var _monty5811$apostello$Pages_FirstRun$ReceiveCreateAdminUser = function (a) {
	return {ctor: 'ReceiveCreateAdminUser', _0: a};
};
var _monty5811$apostello$Pages_FirstRun$createAdminUser = F2(
	function (csrf, model) {
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'email_',
				_1: _elm_lang$core$Json_Encode$string(model.adminEmail)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'pass_',
					_1: _elm_lang$core$Json_Encode$string(model.adminPass1)
				},
				_1: {ctor: '[]'}
			}
		};
		return A2(
			_elm_lang$http$Http$send,
			_monty5811$apostello$Pages_FirstRun$ReceiveCreateAdminUser,
			A4(_monty5811$apostello$DjangoSend$post, csrf, '/config/create_admin_user/', body, _monty5811$apostello$Pages_FirstRun$decodeFirstRunResp));
	});
var _monty5811$apostello$Pages_FirstRun$update = F3(
	function (csrf, msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'UpdateAdminEmailField':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{adminEmail: _p3._0}),
					_1: {ctor: '[]'}
				};
			case 'UpdateAdminPass1Field':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{adminPass1: _p3._0}),
					_1: {ctor: '[]'}
				};
			case 'UpdateAdminPass2Field':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{adminPass2: _p3._0}),
					_1: {ctor: '[]'}
				};
			case 'CreateAdminUser':
				var _p4 = _elm_lang$core$Native_Utils.eq(model.adminPass1, model.adminPass2);
				if (_p4 === true) {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{adminFormStatus: _monty5811$apostello$Pages_FirstRun$InProgress}),
						_1: {
							ctor: '::',
							_0: A2(_monty5811$apostello$Pages_FirstRun$createAdminUser, csrf, model),
							_1: {ctor: '[]'}
						}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								adminFormStatus: _monty5811$apostello$Pages_FirstRun$Failed('Passwords do not match')
							}),
						_1: {ctor: '[]'}
					};
				}
			default:
				if (_p3._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{adminFormStatus: _monty5811$apostello$Pages_FirstRun$Success}),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								adminFormStatus: _monty5811$apostello$Pages_FirstRun$Failed(
									_monty5811$apostello$Pages_FirstRun$pullOutError(_p3._0._0))
							}),
						_1: {ctor: '[]'}
					};
				}
		}
	});
var _monty5811$apostello$Pages_FirstRun$CreateAdminUser = {ctor: 'CreateAdminUser'};
var _monty5811$apostello$Pages_FirstRun$UpdateAdminPass2Field = function (a) {
	return {ctor: 'UpdateAdminPass2Field', _0: a};
};
var _monty5811$apostello$Pages_FirstRun$UpdateAdminPass1Field = function (a) {
	return {ctor: 'UpdateAdminPass1Field', _0: a};
};
var _monty5811$apostello$Pages_FirstRun$UpdateAdminEmailField = function (a) {
	return {ctor: 'UpdateAdminEmailField', _0: a};
};
var _monty5811$apostello$Pages_FirstRun$createAdminView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('create_admin_user'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('segment'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h3,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Create Admin User'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$form,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onSubmit(_monty5811$apostello$Pages_FirstRun$CreateAdminUser),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(_monty5811$apostello$Pages_FirstRun$formMsg, model.adminFormStatus, _monty5811$apostello$Pages_FirstRun$adminSuccessMsg),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('input-field'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$label,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Admin Email'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$input,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$type_('email'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$name('email'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$placeholder('you@example.com'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$id('admin_email'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onInput(_monty5811$apostello$Pages_FirstRun$UpdateAdminEmailField),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('two-column'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('input-field'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$label,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Password'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$input,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$type_('password'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$name('password'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$id('admin_pass1'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Events$onInput(_monty5811$apostello$Pages_FirstRun$UpdateAdminPass1Field),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('input-field'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$label,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Password Again'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$input,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$type_('password'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$name('password'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$id('admin_pass2'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Events$onInput(_monty5811$apostello$Pages_FirstRun$UpdateAdminPass2Field),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$button,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('button'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$id('create_admin_button'),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Create'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _monty5811$apostello$Pages_FirstRun$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _monty5811$apostello$Pages_FirstRun$createAdminView(model),
			_1: {ctor: '[]'}
		});
};

var _myrho$elm_round$Round$funNum = F3(
	function (fun, s, fl) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			1 / 0,
			_elm_lang$core$Result$toMaybe(
				_elm_lang$core$String$toFloat(
					A2(fun, s, fl))));
	});
var _myrho$elm_round$Round$splitComma = function (str) {
	var _p0 = A2(_elm_lang$core$String$split, '.', str);
	if (_p0.ctor === '::') {
		if (_p0._1.ctor === '::') {
			return {ctor: '_Tuple2', _0: _p0._0, _1: _p0._1._0};
		} else {
			return {ctor: '_Tuple2', _0: _p0._0, _1: '0'};
		}
	} else {
		return {ctor: '_Tuple2', _0: '0', _1: '0'};
	}
};
var _myrho$elm_round$Round$toDecimal = function (fl) {
	var _p1 = A2(
		_elm_lang$core$String$split,
		'e',
		_elm_lang$core$Basics$toString(fl));
	if (_p1.ctor === '::') {
		if (_p1._1.ctor === '::') {
			var _p4 = _p1._1._0;
			var _p2 = function () {
				var hasSign = _elm_lang$core$Native_Utils.cmp(fl, 0) < 0;
				var _p3 = _myrho$elm_round$Round$splitComma(_p1._0);
				var b = _p3._0;
				var a = _p3._1;
				return {
					ctor: '_Tuple3',
					_0: hasSign ? '-' : '',
					_1: hasSign ? A2(_elm_lang$core$String$dropLeft, 1, b) : b,
					_2: a
				};
			}();
			var sign = _p2._0;
			var before = _p2._1;
			var after = _p2._2;
			var e = A2(
				_elm_lang$core$Maybe$withDefault,
				0,
				_elm_lang$core$Result$toMaybe(
					_elm_lang$core$String$toInt(
						A2(_elm_lang$core$String$startsWith, '+', _p4) ? A2(_elm_lang$core$String$dropLeft, 1, _p4) : _p4)));
			var newBefore = (_elm_lang$core$Native_Utils.cmp(e, 0) > -1) ? before : ((_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$Basics$abs(e),
				_elm_lang$core$String$length(before)) < 0) ? A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$String$left,
					_elm_lang$core$String$length(before) - _elm_lang$core$Basics$abs(e),
					before),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'.',
					A2(
						_elm_lang$core$String$right,
						_elm_lang$core$Basics$abs(e),
						before))) : A2(
				_elm_lang$core$Basics_ops['++'],
				'0.',
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$String$repeat,
						_elm_lang$core$Basics$abs(e) - _elm_lang$core$String$length(before),
						'0'),
					before)));
			var newAfter = (_elm_lang$core$Native_Utils.cmp(e, 0) < 1) ? after : ((_elm_lang$core$Native_Utils.cmp(
				e,
				_elm_lang$core$String$length(after)) < 0) ? A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_elm_lang$core$String$left, e, after),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'.',
					A2(
						_elm_lang$core$String$right,
						_elm_lang$core$String$length(after) - e,
						after))) : A2(
				_elm_lang$core$Basics_ops['++'],
				after,
				A2(
					_elm_lang$core$String$repeat,
					e - _elm_lang$core$String$length(after),
					'0')));
			return A2(
				_elm_lang$core$Basics_ops['++'],
				sign,
				A2(_elm_lang$core$Basics_ops['++'], newBefore, newAfter));
		} else {
			return _p1._0;
		}
	} else {
		return '';
	}
};
var _myrho$elm_round$Round$truncate = function (n) {
	return (_elm_lang$core$Native_Utils.cmp(n, 0) < 0) ? _elm_lang$core$Basics$ceiling(n) : _elm_lang$core$Basics$floor(n);
};
var _myrho$elm_round$Round$roundFun = F3(
	function (functor, s, fl) {
		if (_elm_lang$core$Native_Utils.eq(s, 0)) {
			return _elm_lang$core$Basics$toString(
				functor(fl));
		} else {
			if (_elm_lang$core$Native_Utils.cmp(s, 0) < 0) {
				return function (r) {
					return (!_elm_lang$core$Native_Utils.eq(r, '0')) ? A2(
						_elm_lang$core$Basics_ops['++'],
						r,
						A2(
							_elm_lang$core$String$repeat,
							_elm_lang$core$Basics$abs(s),
							'0')) : r;
				}(
					A3(
						_myrho$elm_round$Round$roundFun,
						functor,
						0,
						A2(
							F2(
								function (x, y) {
									return x / y;
								}),
							fl,
							A2(
								F2(
									function (x, y) {
										return Math.pow(x, y);
									}),
								10,
								_elm_lang$core$Basics$abs(
									_elm_lang$core$Basics$toFloat(s))))));
			} else {
				var dd = (_elm_lang$core$Native_Utils.cmp(fl, 0) < 0) ? 2 : 1;
				var n = (_elm_lang$core$Native_Utils.cmp(fl, 0) < 0) ? -1 : 1;
				var e = Math.pow(10, s);
				var _p5 = _myrho$elm_round$Round$splitComma(
					_myrho$elm_round$Round$toDecimal(fl));
				var before = _p5._0;
				var after = _p5._1;
				var a = A3(
					_elm_lang$core$String$padRight,
					s + 1,
					_elm_lang$core$Native_Utils.chr('0'),
					after);
				var b = A2(_elm_lang$core$String$left, s, a);
				var c = A2(_elm_lang$core$String$dropLeft, s, a);
				var f = functor(
					A2(
						_elm_lang$core$Maybe$withDefault,
						_elm_lang$core$Basics$toFloat(e),
						_elm_lang$core$Result$toMaybe(
							_elm_lang$core$String$toFloat(
								A2(
									_elm_lang$core$Basics_ops['++'],
									(_elm_lang$core$Native_Utils.cmp(fl, 0) < 0) ? '-' : '',
									A2(
										_elm_lang$core$Basics_ops['++'],
										'1',
										A2(
											_elm_lang$core$Basics_ops['++'],
											b,
											A2(_elm_lang$core$Basics_ops['++'], '.', c))))))));
				var g = A2(
					_elm_lang$core$String$dropLeft,
					dd,
					_elm_lang$core$Basics$toString(f));
				var h = _myrho$elm_round$Round$truncate(fl) + (_elm_lang$core$Native_Utils.eq(f - (e * n), e * n) ? ((_elm_lang$core$Native_Utils.cmp(fl, 0) < 0) ? -1 : 1) : 0);
				var j = _elm_lang$core$Basics$toString(h);
				var i = (_elm_lang$core$Native_Utils.eq(j, '0') && ((!_elm_lang$core$Native_Utils.eq(f - (e * n), 0)) && ((_elm_lang$core$Native_Utils.cmp(fl, 0) < 0) && (_elm_lang$core$Native_Utils.cmp(fl, -1) > 0)))) ? A2(_elm_lang$core$Basics_ops['++'], '-', j) : j;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					i,
					A2(_elm_lang$core$Basics_ops['++'], '.', g));
			}
		}
	});
var _myrho$elm_round$Round$round = _myrho$elm_round$Round$roundFun(_elm_lang$core$Basics$round);
var _myrho$elm_round$Round$roundNum = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$round);
var _myrho$elm_round$Round$ceiling = _myrho$elm_round$Round$roundFun(_elm_lang$core$Basics$ceiling);
var _myrho$elm_round$Round$ceilingNum = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$ceiling);
var _myrho$elm_round$Round$floor = _myrho$elm_round$Round$roundFun(_elm_lang$core$Basics$floor);
var _myrho$elm_round$Round$floorCom = F2(
	function (s, fl) {
		return (_elm_lang$core$Native_Utils.cmp(fl, 0) < 0) ? A2(_myrho$elm_round$Round$ceiling, s, fl) : A2(_myrho$elm_round$Round$floor, s, fl);
	});
var _myrho$elm_round$Round$floorNumCom = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$floorCom);
var _myrho$elm_round$Round$ceilingCom = F2(
	function (s, fl) {
		return (_elm_lang$core$Native_Utils.cmp(fl, 0) < 0) ? A2(_myrho$elm_round$Round$floor, s, fl) : A2(_myrho$elm_round$Round$ceiling, s, fl);
	});
var _myrho$elm_round$Round$ceilingNumCom = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$ceilingCom);
var _myrho$elm_round$Round$floorNum = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$floor);
var _myrho$elm_round$Round$roundCom = _myrho$elm_round$Round$roundFun(
	function (fl) {
		var dec = fl - _elm_lang$core$Basics$toFloat(
			_myrho$elm_round$Round$truncate(fl));
		return (_elm_lang$core$Native_Utils.cmp(dec, 0.5) > -1) ? _elm_lang$core$Basics$ceiling(fl) : ((_elm_lang$core$Native_Utils.cmp(dec, -0.5) < 1) ? _elm_lang$core$Basics$floor(fl) : _elm_lang$core$Basics$round(fl));
	});
var _myrho$elm_round$Round$roundNumCom = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$roundCom);

var _monty5811$apostello$Forms_View$sendButtonText = function (cost) {
	var _p0 = cost;
	if (_p0.ctor === 'Nothing') {
		return '0.00';
	} else {
		return A2(_myrho$elm_round$Round$round, 2, _p0._0);
	}
};
var _monty5811$apostello$Forms_View$isDisabled = function (cost) {
	var _p1 = cost;
	if (_p1.ctor === 'Nothing') {
		return _elm_lang$html$Html_Attributes$disabled(true);
	} else {
		return _elm_lang$html$Html_Attributes$disabled(false);
	}
};
var _monty5811$apostello$Forms_View$sendButton = function (cost) {
	return A2(
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: _monty5811$apostello$Forms_View$isDisabled(cost),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('send_button'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('button'),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Send ($',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_monty5811$apostello$Forms_View$sendButtonText(cost),
						')'))),
			_1: {ctor: '[]'}
		});
};
var _monty5811$apostello$Forms_View$contentField = F4(
	function (smsCharLimit, msg, content, meta) {
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$label,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$for(meta.id),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(meta.label),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$textarea,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id(meta.id),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$name(meta.name),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$rows(
									_elm_lang$core$Basics$ceiling(
										A2(
											F2(
												function (x, y) {
													return x / y;
												}),
											160,
											_elm_lang$core$Basics$toFloat(smsCharLimit)))),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$cols(40),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(msg),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$value(content),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		};
	});
var _monty5811$apostello$Forms_View$formClass = function (status) {
	var _p2 = status;
	if (_p2.ctor === 'InProgress') {
		return 'loading';
	} else {
		return '';
	}
};
var _monty5811$apostello$Forms_View$errorFieldClass = F2(
	function (base, errors) {
		var _p3 = _elm_lang$core$List$isEmpty(errors);
		if (_p3 === true) {
			return base;
		} else {
			return A2(_elm_lang$core$Basics_ops['++'], 'input-invalid ', base);
		}
	});
var _monty5811$apostello$Forms_View$fieldMessage = function (message) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('alert alert-danger'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(message),
			_1: {ctor: '[]'}
		});
};
var _monty5811$apostello$Forms_View$selectedIcon = F2(
	function (selectedPks, item) {
		var _p4 = A2(_elm_lang$core$List$member, item.pk, selectedPks);
		if (_p4 === false) {
			return _elm_lang$html$Html$text('');
		} else {
			return A2(
				_elm_lang$html$Html$i,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('fa fa-check'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'var(--state-primary)'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'});
		}
	});
var _monty5811$apostello$Forms_View$loadingMessage = function (rl) {
	var _p5 = rl;
	switch (_p5.ctor) {
		case 'FinalPageReceived':
			return _elm_lang$html$Html$text('');
		case 'WaitingOnRefresh':
			return _elm_lang$html$Html$text('');
		case 'RespFailed':
			return _elm_lang$html$Html$text('Uh oh, something went wrong there. Maybe try reloading the page?');
		default:
			return _elm_lang$html$Html$text('Fetching some data...');
	}
};
var _monty5811$apostello$Forms_View$selectedItemsView = F3(
	function (maybePks, render, rl) {
		var _p6 = maybePks;
		if (_p6.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return A2(
				_elm_lang$core$List$map,
				render(maybePks),
				A2(
					_elm_lang$core$List$filter,
					function (x) {
						return A2(_elm_lang$core$List$member, x.pk, _p6._0);
					},
					_monty5811$remote_list$RemoteList$toList(rl)));
		}
	});
var _monty5811$apostello$Forms_View$submitButton = F2(
	function (maybeItem, showAN) {
		var colour = function () {
			var _p7 = showAN;
			if (_p7 === true) {
				return 'button-lg button-secondary';
			} else {
				return 'button-lg button-primary';
			}
		}();
		var txt = function () {
			var _p8 = maybeItem;
			if (_p8.ctor === 'Nothing') {
				return 'Create';
			} else {
				return 'Update';
			}
		}();
		return A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(_elm_lang$core$Basics_ops['++'], 'button button-block', colour)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('formSubmitButton'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(txt),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Forms_View$helpLabel = function (meta) {
	var _p9 = meta.help;
	if (_p9.ctor === 'Nothing') {
		return _elm_lang$html$Html$text('');
	} else {
		return A2(
			_elm_lang$html$Html$p,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('input-hint'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(_p9._0),
				_1: {ctor: '[]'}
			});
	}
};
var _monty5811$apostello$Forms_View$multiSelectField = F2(
	function (props, meta) {
		var pks = function () {
			var _p10 = props.selectedPks;
			if (_p10.ctor === 'Nothing') {
				return props.defaultPks;
			} else {
				return _elm_lang$core$Maybe$Just(_p10._0);
			}
		}();
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$label,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$for(meta.id),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(meta.label),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _monty5811$apostello$Forms_View$helpLabel(meta),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('segment'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _monty5811$apostello$Forms_View$loadingMessage(props.items),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									A3(_monty5811$apostello$Forms_View$selectedItemsView, pks, props.selectedView, props.items)),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: _monty5811$apostello$FilteringTable$filterInput(props.filterMsg),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('list'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'min-height', _1: '25vh'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'max-height', _1: '50vh'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'overflow-y', _1: 'auto'},
																		_1: {ctor: '[]'}
																	}
																}
															}),
														_1: {ctor: '[]'}
													}
												},
												A2(
													_elm_lang$core$List$map,
													props.itemView(pks),
													A2(
														_elm_lang$core$List$filter,
														_monty5811$apostello$FilteringTable$filterRecord(props.filter),
														_monty5811$remote_list$RemoteList$toList(props.items)))),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		};
	});
var _monty5811$apostello$Forms_View$checkboxField = F4(
	function (maybeRec, getter, toggleMsg, meta) {
		var checked = A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(_elm_lang$core$Maybe$map, getter, maybeRec));
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$label,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$id(meta.id),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$name(meta.name),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$checked(checked),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(
														toggleMsg(maybeRec)),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(_elm_lang$core$Basics_ops['++'], ' ', meta.label)),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _monty5811$apostello$Forms_View$helpLabel(meta),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		};
	});
var _monty5811$apostello$Forms_View$addDefaultFloat = F2(
	function (defaultValue, attrs) {
		var _p11 = defaultValue;
		if (_p11.ctor === 'Nothing') {
			return attrs;
		} else {
			return {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$defaultValue(
					_elm_lang$core$Basics$toString(_p11._0)),
				_1: attrs
			};
		}
	});
var _monty5811$apostello$Forms_View$simpleFloatField = F3(
	function (defaultValue, inputMsg, meta) {
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$label,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$for(meta.id),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(meta.label),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					A2(
						_monty5811$apostello$Forms_View$addDefaultFloat,
						defaultValue,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id(meta.id),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$name(meta.name),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(inputMsg),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('number'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$step('0.0001'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$min('0'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}),
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _monty5811$apostello$Forms_View$helpLabel(meta),
					_1: {ctor: '[]'}
				}
			}
		};
	});
var _monty5811$apostello$Forms_View$addDefaultInt = F2(
	function (defaultValue, attrs) {
		var _p12 = defaultValue;
		if (_p12.ctor === 'Nothing') {
			return attrs;
		} else {
			return {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$defaultValue(
					_elm_lang$core$Basics$toString(_p12._0)),
				_1: attrs
			};
		}
	});
var _monty5811$apostello$Forms_View$simpleIntField = F3(
	function (defaultValue, inputMsg, meta) {
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$label,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$for(meta.id),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(meta.label),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					A2(
						_monty5811$apostello$Forms_View$addDefaultInt,
						defaultValue,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id(meta.id),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$name(meta.name),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(inputMsg),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('number'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$min('0'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _monty5811$apostello$Forms_View$helpLabel(meta),
					_1: {ctor: '[]'}
				}
			}
		};
	});
var _monty5811$apostello$Forms_View$longTextField = F4(
	function (rows, defaultValue, inputMsg, meta) {
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$label,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$for(meta.id),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(meta.label),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$textarea,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id(meta.id),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$name(meta.name),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onInput(inputMsg),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$rows(rows),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$defaultValue(
											A2(_elm_lang$core$Maybe$withDefault, '', defaultValue)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _monty5811$apostello$Forms_View$helpLabel(meta),
					_1: {ctor: '[]'}
				}
			}
		};
	});
var _monty5811$apostello$Forms_View$simpleTextField = F3(
	function (defaultValue, inputMsg, meta) {
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$label,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$for(meta.id),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(meta.label),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id(meta.id),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$name(meta.name),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('text'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(inputMsg),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$defaultValue(
											A2(_elm_lang$core$Maybe$withDefault, '', defaultValue)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _monty5811$apostello$Forms_View$helpLabel(meta),
					_1: {ctor: '[]'}
				}
			}
		};
	});
var _monty5811$apostello$Forms_View$dateField = F4(
	function (msg, datePickerState, date, meta) {
		var i18nConfig = _abadi199$datetimepicker$DateTimePicker_Config$defaultDateI18n;
		var config = _abadi199$datetimepicker$DateTimePicker_Config$defaultDatePickerConfig(msg);
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$label,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$for(meta.id),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(meta.label),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A4(
					_abadi199$datetimepicker$DateTimePicker$datePickerWithConfig,
					_elm_lang$core$Native_Utils.update(
						config,
						{
							autoClose: true,
							i18n: _elm_lang$core$Native_Utils.update(
								i18nConfig,
								{
									inputFormat: {
										inputFormatter: _ryannhg$elm_date_format$DateFormat$format(
											{
												ctor: '::',
												_0: _ryannhg$elm_date_format$DateFormat$yearNumber,
												_1: {
													ctor: '::',
													_0: _ryannhg$elm_date_format$DateFormat$text('-'),
													_1: {
														ctor: '::',
														_0: _ryannhg$elm_date_format$DateFormat$monthFixed,
														_1: {
															ctor: '::',
															_0: _ryannhg$elm_date_format$DateFormat$text('-'),
															_1: {
																ctor: '::',
																_0: _ryannhg$elm_date_format$DateFormat$dayOfMonthFixed,
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}),
										inputParser: function (_p13) {
											return _elm_lang$core$Result$toMaybe(
												_elm_lang$core$Date$fromString(_p13));
										}
									}
								})
						}),
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(meta.name),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id(meta.id),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$name(meta.name),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$type_('text'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					datePickerState,
					date),
				_1: {
					ctor: '::',
					_0: _monty5811$apostello$Forms_View$helpLabel(meta),
					_1: {ctor: '[]'}
				}
			}
		};
	});
var _monty5811$apostello$Forms_View$dateTimeField = F4(
	function (msg, datePickerState, date, meta) {
		var i18nConfig = _abadi199$datetimepicker$DateTimePicker_Config$defaultDateTimeI18n;
		var config = _abadi199$datetimepicker$DateTimePicker_Config$defaultDateTimePickerConfig(msg);
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$label,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$for(meta.id),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(meta.label),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A4(
					_abadi199$datetimepicker$DateTimePicker$dateTimePickerWithConfig,
					_elm_lang$core$Native_Utils.update(
						config,
						{
							timePickerType: _abadi199$datetimepicker$DateTimePicker_Config$Digital,
							autoClose: false,
							i18n: _elm_lang$core$Native_Utils.update(
								i18nConfig,
								{
									inputFormat: {
										inputFormatter: _ryannhg$elm_date_format$DateFormat$format(
											{
												ctor: '::',
												_0: _ryannhg$elm_date_format$DateFormat$yearNumber,
												_1: {
													ctor: '::',
													_0: _ryannhg$elm_date_format$DateFormat$text('-'),
													_1: {
														ctor: '::',
														_0: _ryannhg$elm_date_format$DateFormat$monthFixed,
														_1: {
															ctor: '::',
															_0: _ryannhg$elm_date_format$DateFormat$text('-'),
															_1: {
																ctor: '::',
																_0: _ryannhg$elm_date_format$DateFormat$dayOfMonthFixed,
																_1: {
																	ctor: '::',
																	_0: _ryannhg$elm_date_format$DateFormat$text(' '),
																	_1: {
																		ctor: '::',
																		_0: _ryannhg$elm_date_format$DateFormat$hourMilitaryFixed,
																		_1: {
																			ctor: '::',
																			_0: _ryannhg$elm_date_format$DateFormat$text(':'),
																			_1: {
																				ctor: '::',
																				_0: _ryannhg$elm_date_format$DateFormat$minuteFixed,
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}),
										inputParser: function (_p14) {
											return _elm_lang$core$Result$toMaybe(
												_elm_lang$core$Date$fromString(_p14));
										}
									}
								})
						}),
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(meta.name),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id(meta.id),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$name(meta.name),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$type_('text'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					datePickerState,
					date),
				_1: {
					ctor: '::',
					_0: _monty5811$apostello$Forms_View$helpLabel(meta),
					_1: {ctor: '[]'}
				}
			}
		};
	});
var _monty5811$apostello$Forms_View$timeField = F4(
	function (msg, datePickerState, date, meta) {
		return A4(_monty5811$apostello$Forms_View$dateTimeField, msg, datePickerState, date, meta);
	});
var _monty5811$apostello$Forms_View$renderField = F2(
	function (errorDict, field) {
		var className = function () {
			var _p15 = field.meta.required;
			if (_p15 === false) {
				return 'input-field';
			} else {
				return 'required input-field';
			}
		}();
		var errors = A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(_elm_lang$core$Dict$get, field.meta.name, errorDict));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(_monty5811$apostello$Forms_View$errorFieldClass, className, errors)),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$append,
				field.view(field.meta),
				A2(_elm_lang$core$List$map, _monty5811$apostello$Forms_View$fieldMessage, errors)));
	});
var _monty5811$apostello$Forms_View$addSegment = function (fields) {
	return A2(
		_elm_lang$html$Html$fieldset,
		{ctor: '[]'},
		fields);
};
var _monty5811$apostello$Forms_View$addHeader = F2(
	function (header, fields) {
		var _p16 = header;
		if (_p16.ctor === 'Nothing') {
			return fields;
		} else {
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$legend,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(_p16._0),
						_1: {ctor: '[]'}
					}),
				_1: fields
			};
		}
	});
var _monty5811$apostello$Forms_View$addGroupHelpText = F2(
	function (maybeSnippet, fields) {
		var _p17 = maybeSnippet;
		if (_p17.ctor === 'Just') {
			return {ctor: '::', _0: _p17._0, _1: fields};
		} else {
			return fields;
		}
	});
var _monty5811$apostello$Forms_View$addSideBySide = F2(
	function (config, fields) {
		var _p18 = config;
		if (_p18.ctor === 'Just') {
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'display', _1: 'grid'},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'grid-template-columns',
										_1: A2(
											_elm_lang$core$Basics_ops['++'],
											'repeat(',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(_p18._0),
												', auto)'))
									},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'grid-column-gap', _1: '1rem'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					fields),
				_1: {ctor: '[]'}
			};
		} else {
			return fields;
		}
	});
var _monty5811$apostello$Forms_View$fieldGroupHelp = F2(
	function (config, fields) {
		return _monty5811$apostello$Forms_View$addSegment(
			A2(
				_monty5811$apostello$Forms_View$addHeader,
				config.header,
				A2(
					_monty5811$apostello$Forms_View$addGroupHelpText,
					config.helpText,
					A2(_monty5811$apostello$Forms_View$addSideBySide, config.sideBySide, fields))));
	});
var _monty5811$apostello$Forms_View$renderItem = F2(
	function (errorDict, item) {
		var _p19 = item;
		switch (_p19.ctor) {
			case 'FormField':
				return A2(_monty5811$apostello$Forms_View$renderField, errorDict, _p19._0);
			case 'FormHeader':
				return A2(
					_elm_lang$html$Html$h4,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(''),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(_p19._0),
						_1: {ctor: '[]'}
					});
			default:
				return A2(
					_monty5811$apostello$Forms_View$fieldGroupHelp,
					_p19._0,
					A2(
						_elm_lang$core$List$map,
						_monty5811$apostello$Forms_View$renderField(errorDict),
						_p19._1));
		}
	});
var _monty5811$apostello$Forms_View$renderFormError = function (status) {
	var _p20 = status;
	if (_p20.ctor === 'Failed') {
		var _p21 = A2(_elm_lang$core$Dict$get, '__all__', _p20._0);
		if (_p21.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return A2(_elm_lang$core$List$map, _monty5811$apostello$Forms_View$fieldMessage, _p21._0);
		}
	} else {
		return {ctor: '[]'};
	}
};
var _monty5811$apostello$Forms_View$form = F4(
	function (formStatus, items, submitMsg, button_) {
		var _p22 = formStatus;
		if (_p22.ctor === 'InProgress') {
			return _monty5811$apostello$Pages_Fragments_Loader$loader;
		} else {
			return A2(
				_elm_lang$html$Html$form,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onSubmit(submitMsg),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					_monty5811$apostello$Forms_View$renderFormError(formStatus),
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$List$map,
							_monty5811$apostello$Forms_View$renderItem(
								_monty5811$apostello$Forms_Model$formErrors(formStatus)),
							items),
						{
							ctor: '::',
							_0: button_,
							_1: {ctor: '[]'}
						})));
		}
	});
var _monty5811$apostello$Forms_View$MultiSelectField = F7(
	function (a, b, c, d, e, f, g) {
		return {items: a, selectedPks: b, defaultPks: c, filter: d, filterMsg: e, itemView: f, selectedView: g};
	});

var _monty5811$apostello$Pages_Error404$view = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('alert alert-warning'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: _elm_lang$html$Html$text('Uh, oh! That page doesn\'t exist...'),
		_1: {ctor: '[]'}
	});

var _monty5811$apostello$Pages_Forms_Meta_Contact$meta = {
	first_name: A5(_monty5811$apostello$Forms_Model$FieldMeta, true, 'id_first_name', 'first_name', 'First Name', _elm_lang$core$Maybe$Nothing),
	last_name: A5(_monty5811$apostello$Forms_Model$FieldMeta, true, 'id_last_name', 'last_name', 'Last Name', _elm_lang$core$Maybe$Nothing),
	number: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		true,
		'id_number',
		'number',
		'Number',
		_elm_lang$core$Maybe$Just('Cannot be our number, or we get an SMS loop.')),
	do_not_reply: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_do_not_reply',
		'do_not_reply',
		'Do not reply',
		_elm_lang$core$Maybe$Just('Tick this box to disable automated replies for this person.')),
	notes: A5(_monty5811$apostello$Forms_Model$FieldMeta, false, 'id_notes', 'notes', 'Notes', _elm_lang$core$Maybe$Nothing),
	groups: A5(_monty5811$apostello$Forms_Model$FieldMeta, false, 'id_groups', 'groups', 'Groups', _elm_lang$core$Maybe$Nothing)
};

var _monty5811$apostello$Pages_Forms_Contact$submitMsg = F2(
	function (props, showAN) {
		var _p0 = showAN;
		if (_p0 === true) {
			return props.noop;
		} else {
			return props.postForm;
		}
	});
var _monty5811$apostello$Pages_Forms_Contact$archiveNotice = F4(
	function (props, show, contacts, num) {
		var matchedContact = A2(
			_elm_lang$core$Maybe$map,
			function (_) {
				return _.pk;
			},
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$filter,
					function (c) {
						return _elm_lang$core$Native_Utils.eq(c.number, num);
					},
					contacts)));
		var _p1 = show;
		if (_p1 === false) {
			return _elm_lang$html$Html$text('');
		} else {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('alert'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('There is already a Contact that with that number in the archive'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Or you can restore the contact here: '),
								_1: {
									ctor: '::',
									_0: props.spa(matchedContact),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				});
		}
	});
var _monty5811$apostello$Pages_Forms_Contact$showArchiveNotice = F3(
	function (contacts, maybeContact, model) {
		var archivedNums = A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.number;
			},
			A2(
				_elm_lang$core$List$filter,
				function (_) {
					return _.is_archived;
				},
				contacts));
		var currentProposedNum = model.number;
		var originalNum = A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Maybe$Nothing,
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.number;
				},
				maybeContact));
		var _p2 = _elm_lang$core$Native_Utils.eq(originalNum, currentProposedNum);
		if (_p2 === true) {
			return false;
		} else {
			return A2(_elm_lang$core$List$member, currentProposedNum, archivedNums);
		}
	});
var _monty5811$apostello$Pages_Forms_Contact$update = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'UpdateFirstNameField':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						first_name: _elm_lang$core$Maybe$Just(_p3._0)
					});
			case 'UpdateLastNameField':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						last_name: _elm_lang$core$Maybe$Just(_p3._0)
					});
			case 'UpdateDoNotReplyField':
				var b = function () {
					var _p4 = model.do_not_reply;
					if (_p4.ctor === 'Just') {
						return !_p4._0;
					} else {
						var _p5 = _p3._0;
						if (_p5.ctor === 'Nothing') {
							return false;
						} else {
							return !_p5._0.do_not_reply;
						}
					}
				}();
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						do_not_reply: _elm_lang$core$Maybe$Just(b)
					});
			case 'UpdateNumberField':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						number: _elm_lang$core$Maybe$Just(_p3._0)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						notes: _elm_lang$core$Maybe$Just(_p3._0)
					});
		}
	});
var _monty5811$apostello$Pages_Forms_Contact$initialModel = {first_name: _elm_lang$core$Maybe$Nothing, last_name: _elm_lang$core$Maybe$Nothing, number: _elm_lang$core$Maybe$Nothing, do_not_reply: _elm_lang$core$Maybe$Nothing, notes: _elm_lang$core$Maybe$Nothing};
var _monty5811$apostello$Pages_Forms_Contact$Model = F5(
	function (a, b, c, d, e) {
		return {first_name: a, last_name: b, number: c, do_not_reply: d, notes: e};
	});
var _monty5811$apostello$Pages_Forms_Contact$Props = F7(
	function (a, b, c, d, e, f, g) {
		return {postForm: a, c: b, noop: c, spa: d, defaultNumberPrefix: e, canSeeContactNum: f, canSeeContactNotes: g};
	});
var _monty5811$apostello$Pages_Forms_Contact$UpdateNotesField = function (a) {
	return {ctor: 'UpdateNotesField', _0: a};
};
var _monty5811$apostello$Pages_Forms_Contact$notesField = F2(
	function (props, maybeContact) {
		return A3(
			_monty5811$apostello$Forms_View$longTextField,
			5,
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.notes;
				},
				maybeContact),
			function (_p6) {
				return props.c(
					_monty5811$apostello$Pages_Forms_Contact$UpdateNotesField(_p6));
			});
	});
var _monty5811$apostello$Pages_Forms_Contact$UpdateNumberField = function (a) {
	return {ctor: 'UpdateNumberField', _0: a};
};
var _monty5811$apostello$Pages_Forms_Contact$numberField = F3(
	function (props, defaultPrefix, maybeContact) {
		var num = function () {
			var _p7 = maybeContact;
			if (_p7.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Just(defaultPrefix);
			} else {
				return _p7._0.number;
			}
		}();
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			num,
			function (_p8) {
				return props.c(
					_monty5811$apostello$Pages_Forms_Contact$UpdateNumberField(_p8));
			});
	});
var _monty5811$apostello$Pages_Forms_Contact$UpdateLastNameField = function (a) {
	return {ctor: 'UpdateLastNameField', _0: a};
};
var _monty5811$apostello$Pages_Forms_Contact$lastNameField = F2(
	function (props, maybeContact) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.last_name;
				},
				maybeContact),
			function (_p9) {
				return props.c(
					_monty5811$apostello$Pages_Forms_Contact$UpdateLastNameField(_p9));
			});
	});
var _monty5811$apostello$Pages_Forms_Contact$UpdateFirstNameField = function (a) {
	return {ctor: 'UpdateFirstNameField', _0: a};
};
var _monty5811$apostello$Pages_Forms_Contact$firstNameField = F2(
	function (props, maybeContact) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.first_name;
				},
				maybeContact),
			function (_p10) {
				return props.c(
					_monty5811$apostello$Pages_Forms_Contact$UpdateFirstNameField(_p10));
			});
	});
var _monty5811$apostello$Pages_Forms_Contact$UpdateDoNotReplyField = function (a) {
	return {ctor: 'UpdateDoNotReplyField', _0: a};
};
var _monty5811$apostello$Pages_Forms_Contact$doNotReplyField = F2(
	function (props, maybeContact) {
		return A3(
			_monty5811$apostello$Forms_View$checkboxField,
			maybeContact,
			function (_) {
				return _.do_not_reply;
			},
			function (_p11) {
				return props.c(
					_monty5811$apostello$Pages_Forms_Contact$UpdateDoNotReplyField(_p11));
			});
	});
var _monty5811$apostello$Pages_Forms_Contact$viewHelp = F6(
	function (props, maybeTable, currentContact, contacts_, model, status) {
		var fields = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			{
				ctor: '::',
				_0: _elm_lang$core$Maybe$Just(
					A2(
						_monty5811$apostello$Forms_Model$FieldGroup,
						_elm_lang$core$Native_Utils.update(
							_monty5811$apostello$Forms_Model$defaultFieldGroupConfig,
							{
								sideBySide: _elm_lang$core$Maybe$Just(2),
								header: _elm_lang$core$Maybe$Just('Name')
							}),
						{
							ctor: '::',
							_0: A2(
								_monty5811$apostello$Forms_Model$Field,
								_monty5811$apostello$Pages_Forms_Meta_Contact$meta.first_name,
								A2(_monty5811$apostello$Pages_Forms_Contact$firstNameField, props, currentContact)),
							_1: {
								ctor: '::',
								_0: A2(
									_monty5811$apostello$Forms_Model$Field,
									_monty5811$apostello$Pages_Forms_Meta_Contact$meta.last_name,
									A2(_monty5811$apostello$Pages_Forms_Contact$lastNameField, props, currentContact)),
								_1: {ctor: '[]'}
							}
						})),
				_1: {
					ctor: '::',
					_0: props.canSeeContactNum ? _elm_lang$core$Maybe$Just(
						_monty5811$apostello$Forms_Model$FormField(
							A2(
								_monty5811$apostello$Forms_Model$Field,
								_monty5811$apostello$Pages_Forms_Meta_Contact$meta.number,
								A3(_monty5811$apostello$Pages_Forms_Contact$numberField, props, props.defaultNumberPrefix, currentContact)))) : _elm_lang$core$Maybe$Nothing,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Maybe$Just(
							_monty5811$apostello$Forms_Model$FormField(
								A2(
									_monty5811$apostello$Forms_Model$Field,
									_monty5811$apostello$Pages_Forms_Meta_Contact$meta.do_not_reply,
									A2(_monty5811$apostello$Pages_Forms_Contact$doNotReplyField, props, currentContact)))),
						_1: {
							ctor: '::',
							_0: props.canSeeContactNotes ? _elm_lang$core$Maybe$Just(
								_monty5811$apostello$Forms_Model$FormField(
									A2(
										_monty5811$apostello$Forms_Model$Field,
										_monty5811$apostello$Pages_Forms_Meta_Contact$meta.notes,
										A2(_monty5811$apostello$Pages_Forms_Contact$notesField, props, currentContact)))) : _elm_lang$core$Maybe$Nothing,
							_1: {ctor: '[]'}
						}
					}
				}
			});
		var contacts = _monty5811$remote_list$RemoteList$toList(contacts_);
		var showAN = A3(_monty5811$apostello$Pages_Forms_Contact$showArchiveNotice, contacts, currentContact, model);
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A4(_monty5811$apostello$Pages_Forms_Contact$archiveNotice, props, showAN, contacts, model.number),
				_1: {
					ctor: '::',
					_0: A4(
						_monty5811$apostello$Forms_View$form,
						status,
						fields,
						A2(_monty5811$apostello$Pages_Forms_Contact$submitMsg, props, showAN),
						A2(_monty5811$apostello$Forms_View$submitButton, currentContact, showAN)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Maybe$withDefault,
							_elm_lang$html$Html$text(''),
							maybeTable),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _monty5811$apostello$Pages_Forms_Contact$creating = F4(
	function (props, contacts, model, status) {
		return A6(_monty5811$apostello$Pages_Forms_Contact$viewHelp, props, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, contacts, model, status);
	});
var _monty5811$apostello$Pages_Forms_Contact$editing = F6(
	function (props, maybeTable, pk, contacts, model, status) {
		var currentContact = _elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$filter,
				function (x) {
					return _elm_lang$core$Native_Utils.eq(x.pk, pk);
				},
				_monty5811$remote_list$RemoteList$toList(contacts)));
		var _p12 = currentContact;
		if (_p12.ctor === 'Just') {
			return A6(
				_monty5811$apostello$Pages_Forms_Contact$viewHelp,
				props,
				maybeTable,
				_elm_lang$core$Maybe$Just(_p12._0),
				contacts,
				model,
				status);
		} else {
			var _p13 = contacts;
			if (_p13.ctor === 'FinalPageReceived') {
				return _monty5811$apostello$Pages_Error404$view;
			} else {
				return _monty5811$apostello$Pages_Fragments_Loader$loader;
			}
		}
	});
var _monty5811$apostello$Pages_Forms_Contact$view = F6(
	function (props, maybeTable, maybePk, contacts_, model, status) {
		var _p14 = maybePk;
		if (_p14.ctor === 'Nothing') {
			return A4(_monty5811$apostello$Pages_Forms_Contact$creating, props, contacts_, model, status);
		} else {
			return A6(_monty5811$apostello$Pages_Forms_Contact$editing, props, maybeTable, _p14._0, contacts_, model, status);
		}
	});

var _monty5811$apostello$Pages_Forms_Meta_ContactImport$meta = {
	csv_data: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		true,
		'id_csv_data',
		'csv_data',
		'CSV Data',
		_elm_lang$core$Maybe$Just('John, Calvin, +447095237960'))
};

var _monty5811$apostello$Pages_Forms_ContactImport$update = function (_p0) {
	var _p1 = _p0;
	return _p1._0;
};
var _monty5811$apostello$Pages_Forms_ContactImport$Messages = F2(
	function (a, b) {
		return {form: a, post: b};
	});
var _monty5811$apostello$Pages_Forms_ContactImport$UpdateText = function (a) {
	return {ctor: 'UpdateText', _0: a};
};
var _monty5811$apostello$Pages_Forms_ContactImport$view = F2(
	function (msgs, status) {
		var button = A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('button'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('formSubmitButton'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Import'),
				_1: {ctor: '[]'}
			});
		var fields = {
			ctor: '::',
			_0: _monty5811$apostello$Forms_Model$FormField(
				A2(
					_monty5811$apostello$Forms_Model$Field,
					_monty5811$apostello$Pages_Forms_Meta_ContactImport$meta.csv_data,
					A3(
						_monty5811$apostello$Forms_View$longTextField,
						20,
						_elm_lang$core$Maybe$Just(''),
						function (_p2) {
							return msgs.form(
								_monty5811$apostello$Pages_Forms_ContactImport$UpdateText(_p2));
						}))),
			_1: {ctor: '[]'}
		};
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Bulk import contacts.'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Paste a CSV data into the box below.'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('There should be no header row and there should be three columns: First Name, Last Name, Number'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A4(_monty5811$apostello$Forms_View$form, status, fields, msgs.post, button),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});

var _monty5811$apostello$Pages_Forms_Meta_CreateAllGroup$meta = {
	group_name: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		true,
		'id_group_name',
		'group_name',
		'Group Name',
		_elm_lang$core$Maybe$Just('Name of group.\nIf this group already exists it will be overwritten.'))
};

var _monty5811$apostello$Pages_Forms_CreateAllGroup$update = function (_p0) {
	var _p1 = _p0;
	return _p1._0;
};
var _monty5811$apostello$Pages_Forms_CreateAllGroup$Messages = F2(
	function (a, b) {
		return {form: a, postForm: b};
	});
var _monty5811$apostello$Pages_Forms_CreateAllGroup$UpdateGroupName = function (a) {
	return {ctor: 'UpdateGroupName', _0: a};
};
var _monty5811$apostello$Pages_Forms_CreateAllGroup$view = F3(
	function (msgs, model, status) {
		var button = A2(
			_monty5811$apostello$Forms_View$submitButton,
			_elm_lang$core$Maybe$Nothing,
			_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$String$length(model),
				1) < 0);
		var field = _monty5811$apostello$Forms_Model$FormField(
			A2(
				_monty5811$apostello$Forms_Model$Field,
				_monty5811$apostello$Pages_Forms_Meta_CreateAllGroup$meta.group_name,
				A2(
					_monty5811$apostello$Forms_View$simpleTextField,
					_elm_lang$core$Maybe$Just(model),
					function (_p2) {
						return msgs.form(
							_monty5811$apostello$Pages_Forms_CreateAllGroup$UpdateGroupName(_p2));
					})));
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('You can use this form to create a new group that contains all currently active contacts.'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A4(
						_monty5811$apostello$Forms_View$form,
						status,
						{
							ctor: '::',
							_0: field,
							_1: {ctor: '[]'}
						},
						msgs.postForm,
						button),
					_1: {ctor: '[]'}
				}
			});
	});

var _monty5811$apostello$Pages_Forms_Meta_DefaultResponses$meta = {
	keyword_no_match: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_keyword_no_match',
		'keyword_no_match',
		'Keyword no match',
		_elm_lang$core$Maybe$Just('Reply to use when an SMS does not match any keywords. (\"%name%\" will be replaced with the user\'s first name)')),
	default_no_keyword_auto_reply: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		true,
		'id_default_no_keyword_auto_reply',
		'default_no_keyword_auto_reply',
		'Default no keyword auto reply',
		_elm_lang$core$Maybe$Just('This message will be sent when an SMS matches a keyword, but that keyword has no reply set.')),
	default_no_keyword_not_live: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		true,
		'id_default_no_keyword_not_live',
		'default_no_keyword_not_live',
		'Default no keyword not live',
		_elm_lang$core$Maybe$Just('Default message for when a keyword is not currently active. (\"%keyword%\" will be replaced with the matched keyword)')),
	start_reply: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		true,
		'id_start_reply',
		'start_reply',
		'Start reply',
		_elm_lang$core$Maybe$Just('Reply to use when someone matches \"start\".')),
	auto_name_request: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_auto_name_request',
		'auto_name_request',
		'Auto name request',
		_elm_lang$core$Maybe$Just('Message to send when we first receive a message from someone not in the contacts list.')),
	name_update_reply: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		true,
		'id_name_update_reply',
		'name_update_reply',
		'Name update reply',
		_elm_lang$core$Maybe$Just('Reply to use when someone matches \"name\". (\"%s\" is replaced with the person\'s first name)')),
	name_failure_reply: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		true,
		'id_name_failure_reply',
		'name_failure_reply',
		'Name failure reply',
		_elm_lang$core$Maybe$Just('Reply to use when someone matches \"name\" but we are unable to parse their name.'))
};

var _monty5811$apostello$Pages_Forms_DefaultResponses$update = F2(
	function (msg, maybeModel) {
		var _p0 = {ctor: '_Tuple2', _0: msg, _1: maybeModel};
		_v0_9:
		do {
			switch (_p0._0.ctor) {
				case 'UpdateKeywordNoMatch':
					if (_p0._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(
							_elm_lang$core$Native_Utils.update(
								_p0._1._0,
								{keyword_no_match: _p0._0._0}));
					} else {
						break _v0_9;
					}
				case 'UpdateNoKeywordAutoReply':
					if (_p0._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(
							_elm_lang$core$Native_Utils.update(
								_p0._1._0,
								{default_no_keyword_auto_reply: _p0._0._0}));
					} else {
						break _v0_9;
					}
				case 'UpdateDefaultNoKeywordNotLive':
					if (_p0._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(
							_elm_lang$core$Native_Utils.update(
								_p0._1._0,
								{default_no_keyword_not_live: _p0._0._0}));
					} else {
						break _v0_9;
					}
				case 'UpdateStartReply':
					if (_p0._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(
							_elm_lang$core$Native_Utils.update(
								_p0._1._0,
								{start_reply: _p0._0._0}));
					} else {
						break _v0_9;
					}
				case 'UpdateAutoName':
					if (_p0._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(
							_elm_lang$core$Native_Utils.update(
								_p0._1._0,
								{auto_name_request: _p0._0._0}));
					} else {
						break _v0_9;
					}
				case 'UpdateNameUpdateReply':
					if (_p0._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(
							_elm_lang$core$Native_Utils.update(
								_p0._1._0,
								{name_update_reply: _p0._0._0}));
					} else {
						break _v0_9;
					}
				case 'UpdateNameFailReply':
					if (_p0._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(
							_elm_lang$core$Native_Utils.update(
								_p0._1._0,
								{name_failure_reply: _p0._0._0}));
					} else {
						break _v0_9;
					}
				default:
					if (_p0._0._0.ctor === 'Ok') {
						return _elm_lang$core$Maybe$Just(_p0._0._0._0);
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
			}
		} while(false);
		return _elm_lang$core$Maybe$Nothing;
	});
var _monty5811$apostello$Pages_Forms_DefaultResponses$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {keyword_no_match: a, default_no_keyword_auto_reply: b, default_no_keyword_not_live: c, start_reply: d, auto_name_request: e, name_update_reply: f, name_failure_reply: g};
	});
var _monty5811$apostello$Pages_Forms_DefaultResponses$decodeModel = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'name_failure_reply',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'name_update_reply',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'auto_name_request',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'start_reply',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'default_no_keyword_not_live',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'default_no_keyword_auto_reply',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'keyword_no_match',
							_elm_lang$core$Json_Decode$string,
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Pages_Forms_DefaultResponses$Model))))))));
var _monty5811$apostello$Pages_Forms_DefaultResponses$Messages = F2(
	function (a, b) {
		return {form: a, postForm: b};
	});
var _monty5811$apostello$Pages_Forms_DefaultResponses$ReceiveInitialData = function (a) {
	return {ctor: 'ReceiveInitialData', _0: a};
};
var _monty5811$apostello$Pages_Forms_DefaultResponses$init = A2(
	_elm_lang$http$Http$send,
	_monty5811$apostello$Pages_Forms_DefaultResponses$ReceiveInitialData,
	A2(_elm_lang$http$Http$get, _monty5811$apostello$Urls$api_default_responses, _monty5811$apostello$Pages_Forms_DefaultResponses$decodeModel));
var _monty5811$apostello$Pages_Forms_DefaultResponses$UpdateNameFailReply = function (a) {
	return {ctor: 'UpdateNameFailReply', _0: a};
};
var _monty5811$apostello$Pages_Forms_DefaultResponses$nameFailField = F2(
	function (msgs, model) {
		return A3(
			_monty5811$apostello$Forms_View$longTextField,
			10,
			_elm_lang$core$Maybe$Just(model.name_failure_reply),
			function (_p1) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_DefaultResponses$UpdateNameFailReply(_p1));
			});
	});
var _monty5811$apostello$Pages_Forms_DefaultResponses$UpdateNameUpdateReply = function (a) {
	return {ctor: 'UpdateNameUpdateReply', _0: a};
};
var _monty5811$apostello$Pages_Forms_DefaultResponses$nameUpdateField = F2(
	function (msgs, model) {
		return A3(
			_monty5811$apostello$Forms_View$longTextField,
			10,
			_elm_lang$core$Maybe$Just(model.name_update_reply),
			function (_p2) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_DefaultResponses$UpdateNameUpdateReply(_p2));
			});
	});
var _monty5811$apostello$Pages_Forms_DefaultResponses$UpdateAutoName = function (a) {
	return {ctor: 'UpdateAutoName', _0: a};
};
var _monty5811$apostello$Pages_Forms_DefaultResponses$autoNameField = F2(
	function (msgs, model) {
		return A3(
			_monty5811$apostello$Forms_View$longTextField,
			10,
			_elm_lang$core$Maybe$Just(model.auto_name_request),
			function (_p3) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_DefaultResponses$UpdateAutoName(_p3));
			});
	});
var _monty5811$apostello$Pages_Forms_DefaultResponses$UpdateStartReply = function (a) {
	return {ctor: 'UpdateStartReply', _0: a};
};
var _monty5811$apostello$Pages_Forms_DefaultResponses$startReplyField = F2(
	function (msgs, model) {
		return A3(
			_monty5811$apostello$Forms_View$longTextField,
			10,
			_elm_lang$core$Maybe$Just(model.start_reply),
			function (_p4) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_DefaultResponses$UpdateStartReply(_p4));
			});
	});
var _monty5811$apostello$Pages_Forms_DefaultResponses$UpdateDefaultNoKeywordNotLive = function (a) {
	return {ctor: 'UpdateDefaultNoKeywordNotLive', _0: a};
};
var _monty5811$apostello$Pages_Forms_DefaultResponses$noKNotLiveField = F2(
	function (msgs, model) {
		return A3(
			_monty5811$apostello$Forms_View$longTextField,
			10,
			_elm_lang$core$Maybe$Just(model.default_no_keyword_not_live),
			function (_p5) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_DefaultResponses$UpdateDefaultNoKeywordNotLive(_p5));
			});
	});
var _monty5811$apostello$Pages_Forms_DefaultResponses$UpdateNoKeywordAutoReply = function (a) {
	return {ctor: 'UpdateNoKeywordAutoReply', _0: a};
};
var _monty5811$apostello$Pages_Forms_DefaultResponses$noKAutoReplyField = F2(
	function (msgs, model) {
		return A3(
			_monty5811$apostello$Forms_View$longTextField,
			10,
			_elm_lang$core$Maybe$Just(model.default_no_keyword_auto_reply),
			function (_p6) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_DefaultResponses$UpdateNoKeywordAutoReply(_p6));
			});
	});
var _monty5811$apostello$Pages_Forms_DefaultResponses$UpdateKeywordNoMatch = function (a) {
	return {ctor: 'UpdateKeywordNoMatch', _0: a};
};
var _monty5811$apostello$Pages_Forms_DefaultResponses$keywordNoMatchField = F2(
	function (msgs, model) {
		return A3(
			_monty5811$apostello$Forms_View$longTextField,
			10,
			_elm_lang$core$Maybe$Just(model.keyword_no_match),
			function (_p7) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_DefaultResponses$UpdateKeywordNoMatch(_p7));
			});
	});
var _monty5811$apostello$Pages_Forms_DefaultResponses$view = F3(
	function (msgs, maybeModel, status) {
		var _p8 = maybeModel;
		if (_p8.ctor === 'Nothing') {
			return _monty5811$apostello$Pages_Fragments_Loader$loader;
		} else {
			var _p9 = _p8._0;
			var fields = {
				ctor: '::',
				_0: A2(
					_monty5811$apostello$Forms_Model$FieldGroup,
					_elm_lang$core$Native_Utils.update(
						_monty5811$apostello$Forms_Model$defaultFieldGroupConfig,
						{
							header: _elm_lang$core$Maybe$Just('Keyword')
						}),
					{
						ctor: '::',
						_0: A2(
							_monty5811$apostello$Forms_Model$Field,
							_monty5811$apostello$Pages_Forms_Meta_DefaultResponses$meta.keyword_no_match,
							A2(_monty5811$apostello$Pages_Forms_DefaultResponses$keywordNoMatchField, msgs, _p9)),
						_1: {
							ctor: '::',
							_0: A2(
								_monty5811$apostello$Forms_Model$Field,
								_monty5811$apostello$Pages_Forms_Meta_DefaultResponses$meta.default_no_keyword_auto_reply,
								A2(_monty5811$apostello$Pages_Forms_DefaultResponses$noKAutoReplyField, msgs, _p9)),
							_1: {
								ctor: '::',
								_0: A2(
									_monty5811$apostello$Forms_Model$Field,
									_monty5811$apostello$Pages_Forms_Meta_DefaultResponses$meta.default_no_keyword_not_live,
									A2(_monty5811$apostello$Pages_Forms_DefaultResponses$noKNotLiveField, msgs, _p9)),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_monty5811$apostello$Forms_Model$FieldGroup,
						_elm_lang$core$Native_Utils.update(
							_monty5811$apostello$Forms_Model$defaultFieldGroupConfig,
							{
								header: _elm_lang$core$Maybe$Just('Contact Signup')
							}),
						{
							ctor: '::',
							_0: A2(
								_monty5811$apostello$Forms_Model$Field,
								_monty5811$apostello$Pages_Forms_Meta_DefaultResponses$meta.start_reply,
								A2(_monty5811$apostello$Pages_Forms_DefaultResponses$startReplyField, msgs, _p9)),
							_1: {
								ctor: '::',
								_0: A2(
									_monty5811$apostello$Forms_Model$Field,
									_monty5811$apostello$Pages_Forms_Meta_DefaultResponses$meta.auto_name_request,
									A2(_monty5811$apostello$Pages_Forms_DefaultResponses$autoNameField, msgs, _p9)),
								_1: {
									ctor: '::',
									_0: A2(
										_monty5811$apostello$Forms_Model$Field,
										_monty5811$apostello$Pages_Forms_Meta_DefaultResponses$meta.name_update_reply,
										A2(_monty5811$apostello$Pages_Forms_DefaultResponses$nameUpdateField, msgs, _p9)),
									_1: {
										ctor: '::',
										_0: A2(
											_monty5811$apostello$Forms_Model$Field,
											_monty5811$apostello$Pages_Forms_Meta_DefaultResponses$meta.name_failure_reply,
											A2(_monty5811$apostello$Pages_Forms_DefaultResponses$nameFailField, msgs, _p9)),
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			};
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('These are the default replies used in various circumstances.'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A4(
							_monty5811$apostello$Forms_View$form,
							status,
							fields,
							msgs.postForm,
							A2(
								_monty5811$apostello$Forms_View$submitButton,
								_elm_lang$core$Maybe$Just(_p9),
								false)),
						_1: {ctor: '[]'}
					}
				});
		}
	});

var _monty5811$apostello$Pages_Forms_Meta_Group$meta = {
	name: A5(_monty5811$apostello$Forms_Model$FieldMeta, true, 'id_name', 'name', 'Name of group', _elm_lang$core$Maybe$Nothing),
	description: A5(_monty5811$apostello$Forms_Model$FieldMeta, true, 'id_description', 'description', 'Group description', _elm_lang$core$Maybe$Nothing)
};

var _monty5811$apostello$Pages_Forms_Group$card = F4(
	function (props, id_, group, contact) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id(
						A2(_elm_lang$core$Basics_ops['++'], id_, '_item')),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _monty5811$apostello$Helpers$onClick(
							A2(props.toggleGroupMembership, group, contact)),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(contact.full_name),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_Forms_Group$cardContainer = F5(
	function (props, id_, filterRegex, contacts, group) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('list'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$id(
									A2(_elm_lang$core$Basics_ops['++'], id_, '_list')),
								_1: {ctor: '[]'}
							}
						},
						A2(
							_elm_lang$core$List$map,
							A3(_monty5811$apostello$Pages_Forms_Group$card, props, id_, group),
							A2(
								_elm_lang$core$List$filter,
								_monty5811$apostello$FilteringTable$filterRecord(filterRegex),
								contacts))),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_Forms_Group$submitMsg = F2(
	function (props, showAN) {
		var _p0 = showAN;
		if (_p0 === true) {
			return props.noop;
		} else {
			return props.postForm;
		}
	});
var _monty5811$apostello$Pages_Forms_Group$archiveNotice = F4(
	function (props, show, groups, name) {
		var matchedGroup = A2(
			_elm_lang$core$Maybe$map,
			function (_) {
				return _.pk;
			},
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$filter,
					function (g) {
						return _elm_lang$core$Native_Utils.eq(
							g.name,
							A2(_elm_lang$core$Maybe$withDefault, '', name));
					},
					groups)));
		var _p1 = show;
		if (_p1 === false) {
			return _elm_lang$html$Html$text('');
		} else {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('alert'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('There is already a Group that with that name in the archive'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('You can chose a different name.'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Or you can restore the group here: '),
									_1: {
										ctor: '::',
										_0: props.restoreGroupLink(matchedGroup),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				});
		}
	});
var _monty5811$apostello$Pages_Forms_Group$showArchiveNotice = F3(
	function (groups, maybeGroup, model) {
		var archivedNames = A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.name;
			},
			A2(
				_elm_lang$core$List$filter,
				function (_) {
					return _.is_archived;
				},
				groups));
		var currentProposedName = A2(_elm_lang$core$Maybe$withDefault, '', model.name);
		var originalName = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.name;
				},
				maybeGroup));
		var _p2 = _elm_lang$core$Native_Utils.eq(originalName, currentProposedName);
		if (_p2 === true) {
			return false;
		} else {
			return A2(_elm_lang$core$List$member, currentProposedName, archivedNames);
		}
	});
var _monty5811$apostello$Pages_Forms_Group$update = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'UpdateMemberFilter':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						membersFilterRegex: _monty5811$apostello$FilteringTable$textToRegex(_p3._0)
					});
			case 'UpdateNonMemberFilter':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						nonmembersFilterRegex: _monty5811$apostello$FilteringTable$textToRegex(_p3._0)
					});
			case 'UpdateGroupDescField':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						description: _elm_lang$core$Maybe$Just(_p3._0)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						name: _elm_lang$core$Maybe$Just(_p3._0)
					});
		}
	});
var _monty5811$apostello$Pages_Forms_Group$initialModel = {
	membersFilterRegex: _elm_lang$core$Regex$regex(''),
	nonmembersFilterRegex: _elm_lang$core$Regex$regex(''),
	name: _elm_lang$core$Maybe$Nothing,
	description: _elm_lang$core$Maybe$Nothing
};
var _monty5811$apostello$Pages_Forms_Group$Model = F4(
	function (a, b, c, d) {
		return {membersFilterRegex: a, nonmembersFilterRegex: b, name: c, description: d};
	});
var _monty5811$apostello$Pages_Forms_Group$Props = F5(
	function (a, b, c, d, e) {
		return {form: a, postForm: b, noop: c, toggleGroupMembership: d, restoreGroupLink: e};
	});
var _monty5811$apostello$Pages_Forms_Group$UpdateGroupDescField = function (a) {
	return {ctor: 'UpdateGroupDescField', _0: a};
};
var _monty5811$apostello$Pages_Forms_Group$descField = F2(
	function (props, maybeGroup) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.description;
				},
				maybeGroup),
			function (_p4) {
				return props.form(
					_monty5811$apostello$Pages_Forms_Group$UpdateGroupDescField(_p4));
			});
	});
var _monty5811$apostello$Pages_Forms_Group$UpdateGroupNameField = function (a) {
	return {ctor: 'UpdateGroupNameField', _0: a};
};
var _monty5811$apostello$Pages_Forms_Group$nameField = F2(
	function (props, maybeGroup) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.name;
				},
				maybeGroup),
			function (_p5) {
				return props.form(
					_monty5811$apostello$Pages_Forms_Group$UpdateGroupNameField(_p5));
			});
	});
var _monty5811$apostello$Pages_Forms_Group$UpdateNonMemberFilter = function (a) {
	return {ctor: 'UpdateNonMemberFilter', _0: a};
};
var _monty5811$apostello$Pages_Forms_Group$UpdateMemberFilter = function (a) {
	return {ctor: 'UpdateMemberFilter', _0: a};
};
var _monty5811$apostello$Pages_Forms_Group$membershipToggles = F3(
	function (props, maybeGroup, model) {
		var _p6 = maybeGroup;
		if (_p6.ctor === 'Nothing') {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'});
		} else {
			var _p9 = _p6._0;
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h3,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Group Members'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Click a person to toggle their membership.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'display', _1: 'grid'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'grid-template-columns', _1: '50% 50%'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$h4,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Non-Members'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _monty5811$apostello$FilteringTable$filterInput(
																function (_p7) {
																	return props.form(
																		_monty5811$apostello$Pages_Forms_Group$UpdateNonMemberFilter(_p7));
																}),
															_1: {
																ctor: '::',
																_0: A5(_monty5811$apostello$Pages_Forms_Group$cardContainer, props, 'nonmembers', model.nonmembersFilterRegex, _p9.nonmembers, _p9),
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$h4,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Members'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _monty5811$apostello$FilteringTable$filterInput(
																	function (_p8) {
																		return props.form(
																			_monty5811$apostello$Pages_Forms_Group$UpdateMemberFilter(_p8));
																	}),
																_1: {
																	ctor: '::',
																	_0: A5(_monty5811$apostello$Pages_Forms_Group$cardContainer, props, 'members', model.membersFilterRegex, _p9.members, _p9),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				});
		}
	});
var _monty5811$apostello$Pages_Forms_Group$viewHelp = F5(
	function (props, currentGroup, groups_, model, status) {
		var fields = A2(
			_elm_lang$core$List$map,
			_monty5811$apostello$Forms_Model$FormField,
			{
				ctor: '::',
				_0: A2(
					_monty5811$apostello$Forms_Model$Field,
					_monty5811$apostello$Pages_Forms_Meta_Group$meta.name,
					A2(_monty5811$apostello$Pages_Forms_Group$nameField, props, currentGroup)),
				_1: {
					ctor: '::',
					_0: A2(
						_monty5811$apostello$Forms_Model$Field,
						_monty5811$apostello$Pages_Forms_Meta_Group$meta.description,
						A2(_monty5811$apostello$Pages_Forms_Group$descField, props, currentGroup)),
					_1: {ctor: '[]'}
				}
			});
		var groups = _monty5811$remote_list$RemoteList$toList(groups_);
		var showAN = A3(_monty5811$apostello$Pages_Forms_Group$showArchiveNotice, groups, currentGroup, model);
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A4(_monty5811$apostello$Pages_Forms_Group$archiveNotice, props, showAN, groups, model.name),
				_1: {
					ctor: '::',
					_0: A4(
						_monty5811$apostello$Forms_View$form,
						status,
						fields,
						A2(_monty5811$apostello$Pages_Forms_Group$submitMsg, props, showAN),
						A2(_monty5811$apostello$Forms_View$submitButton, currentGroup, showAN)),
					_1: {
						ctor: '::',
						_0: A3(_monty5811$apostello$Pages_Forms_Group$membershipToggles, props, currentGroup, model),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _monty5811$apostello$Pages_Forms_Group$creating = F4(
	function (props, groups, model, status) {
		return A5(_monty5811$apostello$Pages_Forms_Group$viewHelp, props, _elm_lang$core$Maybe$Nothing, groups, model, status);
	});
var _monty5811$apostello$Pages_Forms_Group$editing = F5(
	function (props, pk, groups, model, status) {
		var currentGroup = _elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$filter,
				function (x) {
					return _elm_lang$core$Native_Utils.eq(x.pk, pk);
				},
				_monty5811$remote_list$RemoteList$toList(groups)));
		var _p10 = currentGroup;
		if (_p10.ctor === 'Just') {
			return A5(
				_monty5811$apostello$Pages_Forms_Group$viewHelp,
				props,
				_elm_lang$core$Maybe$Just(_p10._0),
				groups,
				model,
				status);
		} else {
			var _p11 = groups;
			if (_p11.ctor === 'FinalPageReceived') {
				return _monty5811$apostello$Pages_Error404$view;
			} else {
				return _monty5811$apostello$Pages_Fragments_Loader$loader;
			}
		}
	});
var _monty5811$apostello$Pages_Forms_Group$view = F5(
	function (props, maybePk, groups, model, status) {
		var _p12 = maybePk;
		if (_p12.ctor === 'Nothing') {
			return A4(_monty5811$apostello$Pages_Forms_Group$creating, props, groups, model, status);
		} else {
			return A5(_monty5811$apostello$Pages_Forms_Group$editing, props, _p12._0, groups, model, status);
		}
	});

var _monty5811$apostello$Pages_Forms_Meta_Keyword$meta = {
	keyword: A5(_monty5811$apostello$Forms_Model$FieldMeta, true, 'id_keyword', 'keyword', 'Keyword', _elm_lang$core$Maybe$Nothing),
	description: A5(_monty5811$apostello$Forms_Model$FieldMeta, true, 'id_description', 'description', 'Keyword Description', _elm_lang$core$Maybe$Nothing),
	disable_all_replies: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_disable_all_replies',
		'disable_all_replies',
		'Disable all replies',
		_elm_lang$core$Maybe$Just('If checked, then we will never reply to this keyword.Note that users may still be asked for their name if they are new.')),
	custom_response: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_custom_response',
		'custom_response',
		'Auto response',
		_elm_lang$core$Maybe$Just('This text will be sent back as a reply when any incoming message matches this keyword. If empty, the site wide response will be used.')),
	custom_response_new_person: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_custom_response_new_person',
		'custom_response_new_person',
		'Auto response used when the contact is new',
		_elm_lang$core$Maybe$Just('This text will be sent back as a reply when any incoming message matches this keyword and the contact is new. If empty, the normal custom response will be used.')),
	deactivated_response: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_deactivated_response',
		'deactivated_response',
		'Deactivated response',
		_elm_lang$core$Maybe$Just('Use this if you want a custom response after deactivation. e.g. \'You are too late for this event, sorry!\'')),
	too_early_response: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_too_early_response',
		'too_early_response',
		'Not yet activated response',
		_elm_lang$core$Maybe$Just('Use this if you want a custom response before. e.g. \'You are too early for this event, please try again on Monday!\'')),
	activate_time: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		true,
		'id_activate_time',
		'activate_time',
		'Activation Time',
		_elm_lang$core$Maybe$Just('The keyword will not be active before this time and so no messages will be able to match it. Leave blank to activate now.')),
	deactivate_time: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_deactivate_time',
		'deactivate_time',
		'Deactivation Time',
		_elm_lang$core$Maybe$Just('The keyword will not be active after this time and so no messages will be able to match it. Leave blank to never deactivate.')),
	linked_groups: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_linked_groups',
		'linked_groups',
		'Linked groups',
		_elm_lang$core$Maybe$Just('Contacts that match this keyword will be added to the selected groups.')),
	owners: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_owners',
		'owners',
		'Limit viewing to only these people',
		_elm_lang$core$Maybe$Just('If this field is empty, any user can see this keyword. If populated, then only the named users and staff will have access.')),
	subscribed_to_digest: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_subscribed_to_digest',
		'subscribed_to_digest',
		'Subscribed to daily emails.',
		_elm_lang$core$Maybe$Just('Choose users that will receive daily updates of matched messages.'))
};

var _monty5811$apostello$Pages_Forms_Keyword$submitMsg = F2(
	function (msgs, showAN) {
		var _p0 = showAN;
		if (_p0 === true) {
			return msgs.noop;
		} else {
			return msgs.postForm;
		}
	});
var _monty5811$apostello$Pages_Forms_Keyword$archiveNotice = F4(
	function (msgs, show, keywords, name) {
		var matchedKeyword = A2(
			_elm_lang$core$Maybe$map,
			function (_) {
				return _.keyword;
			},
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$filter,
					function (g) {
						return _elm_lang$core$Native_Utils.eq(
							g.keyword,
							A2(_elm_lang$core$Maybe$withDefault, '', name));
					},
					keywords)));
		var _p1 = show;
		if (_p1 === false) {
			return _elm_lang$html$Html$text('');
		} else {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('alert'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('There is already a Keyword that with that name in the archive'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('You can chose a different name.'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Or you can restore the keyword here: '),
									_1: {
										ctor: '::',
										_0: msgs.spa(matchedKeyword),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				});
		}
	});
var _monty5811$apostello$Pages_Forms_Keyword$showArchiveNotice = F3(
	function (keywords, maybeKeyword, model) {
		var archivedNames = A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.keyword;
			},
			A2(
				_elm_lang$core$List$filter,
				function (_) {
					return _.is_archived;
				},
				keywords));
		var currentProposedName = A2(_elm_lang$core$Maybe$withDefault, '', model.keyword);
		var originalName = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.keyword;
				},
				maybeKeyword));
		var _p2 = _elm_lang$core$Native_Utils.eq(originalName, currentProposedName);
		if (_p2 === true) {
			return false;
		} else {
			return A2(_elm_lang$core$List$member, currentProposedName, archivedNames);
		}
	});
var _monty5811$apostello$Pages_Forms_Keyword$userViewHelper = F2(
	function (selectedPks, owner) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'color', _1: '#000'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(_monty5811$apostello$Forms_View$selectedIcon, selectedPks, owner),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(owner.email),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_Forms_Keyword$userView = F4(
	function (msgs, toMsg, maybeSelectedPks, owner) {
		var selectedPks = function () {
			var _p3 = maybeSelectedPks;
			if (_p3.ctor === 'Nothing') {
				return {ctor: '[]'};
			} else {
				return _p3._0;
			}
		}();
		var msg = A2(toMsg, selectedPks, owner.pk);
		var id = function () {
			var _p4 = msg;
			switch (_p4.ctor) {
				case 'UpdateSelectedOwner':
					return 'UpdateSelectedOwner';
				case 'UpdateSelectedSubscriber':
					return 'UpdateSelectedSubscriber';
				default:
					return '_err';
			}
		}();
		return A3(
			_elm_lang$html$Html_Keyed$node,
			'div',
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'user-select', _1: 'none'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							msgs.k(msg)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id(
								A2(_elm_lang$core$Basics_ops['++'], 'user', id)),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Basics$toString(owner.pk),
					_1: A2(_monty5811$apostello$Pages_Forms_Keyword$userViewHelper, selectedPks, owner)
				},
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_Forms_Keyword$userLabelView = F4(
	function (msgs, msg, selectedPks, user) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('badge'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'user-select', _1: 'none'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							msgs.k(
								A2(
									msg,
									A2(
										_elm_lang$core$Maybe$withDefault,
										{ctor: '[]'},
										selectedPks),
									user.pk))),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(user.email),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_Forms_Keyword$groupViewHelper = F2(
	function (selectedPks, group) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'color', _1: '#000'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(_monty5811$apostello$Forms_View$selectedIcon, selectedPks, group),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(group.name),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_Forms_Keyword$update = F2(
	function (msg, model) {
		var _p5 = msg;
		switch (_p5.ctor) {
			case 'UpdateKeywordKeywordField':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						keyword: _elm_lang$core$Maybe$Just(_p5._0)
					});
			case 'UpdateKeywordDescField':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						description: _elm_lang$core$Maybe$Just(_p5._0)
					});
			case 'UpdateKeywordDisableRepliesField':
				var b = function () {
					var _p6 = model.disable_all_replies;
					if (_p6.ctor === 'Just') {
						return !_p6._0;
					} else {
						var _p7 = _p5._0;
						if (_p7.ctor === 'Nothing') {
							return false;
						} else {
							return !_p7._0.disable_all_replies;
						}
					}
				}();
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						disable_all_replies: _elm_lang$core$Maybe$Just(b)
					});
			case 'UpdateKeywordCustRespField':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						custom_response: _elm_lang$core$Maybe$Just(_p5._0)
					});
			case 'UpdateKeywordCustNewPersonRespField':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						custom_response_new_person: _elm_lang$core$Maybe$Just(_p5._0)
					});
			case 'UpdateKeywordDeacRespField':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						deactivated_response: _elm_lang$core$Maybe$Just(_p5._0)
					});
			case 'UpdateKeywordTooEarlyRespField':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						too_early_response: _elm_lang$core$Maybe$Just(_p5._0)
					});
			case 'UpdateActivateTime':
				return _elm_lang$core$Native_Utils.update(
					model,
					{activate_time: _p5._1, datePickerActState: _p5._0});
			case 'UpdateDeactivateTime':
				return _elm_lang$core$Native_Utils.update(
					model,
					{deactivate_time: _p5._1, datePickerDeactState: _p5._0});
			case 'UpdateKeywordLinkedGroupsFilter':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						linkedGroupsFilter: _monty5811$apostello$FilteringTable$textToRegex(_p5._0)
					});
			case 'UpdateSelectedLinkedGroup':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						linked_groups: _elm_lang$core$Maybe$Just(
							A2(_monty5811$apostello$Helpers$toggleSelectedPk, _p5._1, _p5._0))
					});
			case 'UpdateKeywordOwnersFilter':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						ownersFilter: _monty5811$apostello$FilteringTable$textToRegex(_p5._0)
					});
			case 'UpdateSelectedOwner':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						owners: _elm_lang$core$Maybe$Just(
							A2(_monty5811$apostello$Helpers$toggleSelectedPk, _p5._1, _p5._0))
					});
			case 'UpdateKeywordSubscribersFilter':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						subscribersFilter: _monty5811$apostello$FilteringTable$textToRegex(_p5._0)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						subscribers: _elm_lang$core$Maybe$Just(
							A2(_monty5811$apostello$Helpers$toggleSelectedPk, _p5._1, _p5._0))
					});
		}
	});
var _monty5811$apostello$Pages_Forms_Keyword$initialModel = {
	keyword: _elm_lang$core$Maybe$Nothing,
	description: _elm_lang$core$Maybe$Nothing,
	disable_all_replies: _elm_lang$core$Maybe$Nothing,
	custom_response: _elm_lang$core$Maybe$Nothing,
	custom_response_new_person: _elm_lang$core$Maybe$Nothing,
	deactivated_response: _elm_lang$core$Maybe$Nothing,
	too_early_response: _elm_lang$core$Maybe$Nothing,
	activate_time: _elm_lang$core$Maybe$Nothing,
	datePickerActState: _abadi199$datetimepicker$DateTimePicker$initialState,
	deactivate_time: _elm_lang$core$Maybe$Nothing,
	datePickerDeactState: _abadi199$datetimepicker$DateTimePicker$initialState,
	linkedGroupsFilter: _elm_lang$core$Regex$regex(''),
	linked_groups: _elm_lang$core$Maybe$Nothing,
	ownersFilter: _elm_lang$core$Regex$regex(''),
	owners: _elm_lang$core$Maybe$Nothing,
	subscribersFilter: _elm_lang$core$Regex$regex(''),
	subscribers: _elm_lang$core$Maybe$Nothing
};
var _monty5811$apostello$Pages_Forms_Keyword$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return {keyword: a, description: b, disable_all_replies: c, custom_response: d, custom_response_new_person: e, deactivated_response: f, too_early_response: g, activate_time: h, datePickerActState: i, deactivate_time: j, datePickerDeactState: k, linkedGroupsFilter: l, linked_groups: m, ownersFilter: n, owners: o, subscribersFilter: p, subscribers: q};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _monty5811$apostello$Pages_Forms_Keyword$Messages = F4(
	function (a, b, c, d) {
		return {postForm: a, k: b, noop: c, spa: d};
	});
var _monty5811$apostello$Pages_Forms_Keyword$UpdateSelectedSubscriber = F2(
	function (a, b) {
		return {ctor: 'UpdateSelectedSubscriber', _0: a, _1: b};
	});
var _monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordSubscribersFilter = function (a) {
	return {ctor: 'UpdateKeywordSubscribersFilter', _0: a};
};
var _monty5811$apostello$Pages_Forms_Keyword$digestField = F4(
	function (msgs, model, users, maybeKeyword) {
		return _monty5811$apostello$Forms_View$multiSelectField(
			A7(
				_monty5811$apostello$Forms_View$MultiSelectField,
				users,
				model.subscribers,
				A2(
					_elm_lang$core$Maybe$map,
					function (_) {
						return _.subscribed_to_digest;
					},
					maybeKeyword),
				model.subscribersFilter,
				function (_p8) {
					return msgs.k(
						_monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordSubscribersFilter(_p8));
				},
				A2(_monty5811$apostello$Pages_Forms_Keyword$userView, msgs, _monty5811$apostello$Pages_Forms_Keyword$UpdateSelectedSubscriber),
				A2(_monty5811$apostello$Pages_Forms_Keyword$userLabelView, msgs, _monty5811$apostello$Pages_Forms_Keyword$UpdateSelectedSubscriber)));
	});
var _monty5811$apostello$Pages_Forms_Keyword$UpdateSelectedOwner = F2(
	function (a, b) {
		return {ctor: 'UpdateSelectedOwner', _0: a, _1: b};
	});
var _monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordOwnersFilter = function (a) {
	return {ctor: 'UpdateKeywordOwnersFilter', _0: a};
};
var _monty5811$apostello$Pages_Forms_Keyword$ownersField = F4(
	function (msgs, model, users, maybeKeyword) {
		return _monty5811$apostello$Forms_View$multiSelectField(
			A7(
				_monty5811$apostello$Forms_View$MultiSelectField,
				users,
				model.owners,
				A2(
					_elm_lang$core$Maybe$map,
					function (_) {
						return _.owners;
					},
					maybeKeyword),
				model.ownersFilter,
				function (_p9) {
					return msgs.k(
						_monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordOwnersFilter(_p9));
				},
				A2(_monty5811$apostello$Pages_Forms_Keyword$userView, msgs, _monty5811$apostello$Pages_Forms_Keyword$UpdateSelectedOwner),
				A2(_monty5811$apostello$Pages_Forms_Keyword$userLabelView, msgs, _monty5811$apostello$Pages_Forms_Keyword$UpdateSelectedOwner)));
	});
var _monty5811$apostello$Pages_Forms_Keyword$UpdateSelectedLinkedGroup = F2(
	function (a, b) {
		return {ctor: 'UpdateSelectedLinkedGroup', _0: a, _1: b};
	});
var _monty5811$apostello$Pages_Forms_Keyword$groupLabelView = F3(
	function (msgs, maybePks, group) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('badge'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'user-select', _1: 'none'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							msgs.k(
								A2(
									_monty5811$apostello$Pages_Forms_Keyword$UpdateSelectedLinkedGroup,
									A2(
										_elm_lang$core$Maybe$withDefault,
										{ctor: '[]'},
										maybePks),
									group.pk))),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(group.name),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_Forms_Keyword$groupView = F3(
	function (msgs, maybeSelectedPks, group) {
		var selectedPks = function () {
			var _p10 = maybeSelectedPks;
			if (_p10.ctor === 'Nothing') {
				return {ctor: '[]'};
			} else {
				return _p10._0;
			}
		}();
		return A3(
			_elm_lang$html$Html_Keyed$node,
			'div',
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'user-select', _1: 'none'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							msgs.k(
								A2(_monty5811$apostello$Pages_Forms_Keyword$UpdateSelectedLinkedGroup, selectedPks, group.pk))),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Basics$toString(group.pk),
					_1: A2(_monty5811$apostello$Pages_Forms_Keyword$groupViewHelper, selectedPks, group)
				},
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordLinkedGroupsFilter = function (a) {
	return {ctor: 'UpdateKeywordLinkedGroupsFilter', _0: a};
};
var _monty5811$apostello$Pages_Forms_Keyword$linkedGroupsField = F4(
	function (msgs, model, groups, maybeKeyword) {
		return _monty5811$apostello$Forms_View$multiSelectField(
			A7(
				_monty5811$apostello$Forms_View$MultiSelectField,
				groups,
				model.linked_groups,
				A2(
					_elm_lang$core$Maybe$map,
					function (_) {
						return _.linked_groups;
					},
					maybeKeyword),
				model.linkedGroupsFilter,
				function (_p11) {
					return msgs.k(
						_monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordLinkedGroupsFilter(_p11));
				},
				_monty5811$apostello$Pages_Forms_Keyword$groupView(msgs),
				_monty5811$apostello$Pages_Forms_Keyword$groupLabelView(msgs)));
	});
var _monty5811$apostello$Pages_Forms_Keyword$UpdateDeactivateTime = F2(
	function (a, b) {
		return {ctor: 'UpdateDeactivateTime', _0: a, _1: b};
	});
var _monty5811$apostello$Pages_Forms_Keyword$initDeactTime = F2(
	function (state, maybeDate) {
		return A2(_monty5811$apostello$Pages_Forms_Keyword$UpdateDeactivateTime, state, maybeDate);
	});
var _monty5811$apostello$Pages_Forms_Keyword$updateDeactTime = F3(
	function (msgs, state, maybeDate) {
		return msgs.k(
			A2(_monty5811$apostello$Pages_Forms_Keyword$UpdateDeactivateTime, state, maybeDate));
	});
var _monty5811$apostello$Pages_Forms_Keyword$deactivateTimeField = F3(
	function (msgs, model, maybeKeyword) {
		var time = function () {
			var _p12 = model.deactivate_time;
			if (_p12.ctor === 'Nothing') {
				var _p13 = maybeKeyword;
				if (_p13.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					return _p13._0.deactivate_time;
				}
			} else {
				return _elm_lang$core$Maybe$Just(_p12._0);
			}
		}();
		return A3(
			_monty5811$apostello$Forms_View$dateTimeField,
			_monty5811$apostello$Pages_Forms_Keyword$updateDeactTime(msgs),
			model.datePickerDeactState,
			time);
	});
var _monty5811$apostello$Pages_Forms_Keyword$UpdateActivateTime = F2(
	function (a, b) {
		return {ctor: 'UpdateActivateTime', _0: a, _1: b};
	});
var _monty5811$apostello$Pages_Forms_Keyword$initActTime = F2(
	function (state, maybeDate) {
		return A2(_monty5811$apostello$Pages_Forms_Keyword$UpdateActivateTime, state, maybeDate);
	});
var _monty5811$apostello$Pages_Forms_Keyword$init = function (model) {
	return _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: A2(_abadi199$datetimepicker$DateTimePicker$initialCmd, _monty5811$apostello$Pages_Forms_Keyword$initActTime, model.datePickerActState),
			_1: {
				ctor: '::',
				_0: A2(_abadi199$datetimepicker$DateTimePicker$initialCmd, _monty5811$apostello$Pages_Forms_Keyword$initDeactTime, model.datePickerDeactState),
				_1: {ctor: '[]'}
			}
		});
};
var _monty5811$apostello$Pages_Forms_Keyword$updateActTime = F3(
	function (msgs, state, maybeDate) {
		return msgs.k(
			A2(_monty5811$apostello$Pages_Forms_Keyword$UpdateActivateTime, state, maybeDate));
	});
var _monty5811$apostello$Pages_Forms_Keyword$activateTimeField = F3(
	function (msgs, model, maybeKeyword) {
		var time = function () {
			var _p14 = model.activate_time;
			if (_p14.ctor === 'Nothing') {
				var _p15 = maybeKeyword;
				if (_p15.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Maybe$Just(_p15._0.activate_time);
				}
			} else {
				return _elm_lang$core$Maybe$Just(_p14._0);
			}
		}();
		return A3(
			_monty5811$apostello$Forms_View$dateTimeField,
			_monty5811$apostello$Pages_Forms_Keyword$updateActTime(msgs),
			model.datePickerActState,
			time);
	});
var _monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordTooEarlyRespField = function (a) {
	return {ctor: 'UpdateKeywordTooEarlyRespField', _0: a};
};
var _monty5811$apostello$Pages_Forms_Keyword$tooEarlyRespField = F2(
	function (msgs, maybeKeyword) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.custom_response;
				},
				maybeKeyword),
			function (_p16) {
				return msgs.k(
					_monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordTooEarlyRespField(_p16));
			});
	});
var _monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordDeacRespField = function (a) {
	return {ctor: 'UpdateKeywordDeacRespField', _0: a};
};
var _monty5811$apostello$Pages_Forms_Keyword$deactivatedRespField = F2(
	function (msgs, maybeKeyword) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.deactivated_response;
				},
				maybeKeyword),
			function (_p17) {
				return msgs.k(
					_monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordDeacRespField(_p17));
			});
	});
var _monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordCustNewPersonRespField = function (a) {
	return {ctor: 'UpdateKeywordCustNewPersonRespField', _0: a};
};
var _monty5811$apostello$Pages_Forms_Keyword$customRespNewPersonField = F2(
	function (msgs, maybeKeyword) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.custom_response_new_person;
				},
				maybeKeyword),
			function (_p18) {
				return msgs.k(
					_monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordCustNewPersonRespField(_p18));
			});
	});
var _monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordCustRespField = function (a) {
	return {ctor: 'UpdateKeywordCustRespField', _0: a};
};
var _monty5811$apostello$Pages_Forms_Keyword$customRespField = F2(
	function (msgs, maybeKeyword) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.custom_response;
				},
				maybeKeyword),
			function (_p19) {
				return msgs.k(
					_monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordCustRespField(_p19));
			});
	});
var _monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordDisableRepliesField = function (a) {
	return {ctor: 'UpdateKeywordDisableRepliesField', _0: a};
};
var _monty5811$apostello$Pages_Forms_Keyword$disableRepliesField = F2(
	function (msgs, maybeKeyword) {
		return A3(
			_monty5811$apostello$Forms_View$checkboxField,
			maybeKeyword,
			function (_) {
				return _.disable_all_replies;
			},
			function (_p20) {
				return msgs.k(
					_monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordDisableRepliesField(_p20));
			});
	});
var _monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordDescField = function (a) {
	return {ctor: 'UpdateKeywordDescField', _0: a};
};
var _monty5811$apostello$Pages_Forms_Keyword$descField = F2(
	function (msgs, maybeKeyword) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.description;
				},
				maybeKeyword),
			function (_p21) {
				return msgs.k(
					_monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordDescField(_p21));
			});
	});
var _monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordKeywordField = function (a) {
	return {ctor: 'UpdateKeywordKeywordField', _0: a};
};
var _monty5811$apostello$Pages_Forms_Keyword$keywordField = F2(
	function (msgs, maybeKeyword) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.keyword;
				},
				maybeKeyword),
			function (_p22) {
				return msgs.k(
					_monty5811$apostello$Pages_Forms_Keyword$UpdateKeywordKeywordField(_p22));
			});
	});
var _monty5811$apostello$Pages_Forms_Keyword$viewHelp = F7(
	function (msgs, keywords_, groups, users, currentKeyword, model, status) {
		var fields = {
			ctor: '::',
			_0: _monty5811$apostello$Forms_Model$FormField(
				A2(
					_monty5811$apostello$Forms_Model$Field,
					_monty5811$apostello$Pages_Forms_Meta_Keyword$meta.keyword,
					A2(_monty5811$apostello$Pages_Forms_Keyword$keywordField, msgs, currentKeyword))),
			_1: {
				ctor: '::',
				_0: _monty5811$apostello$Forms_Model$FormField(
					A2(
						_monty5811$apostello$Forms_Model$Field,
						_monty5811$apostello$Pages_Forms_Meta_Keyword$meta.description,
						A2(_monty5811$apostello$Pages_Forms_Keyword$descField, msgs, currentKeyword))),
				_1: {
					ctor: '::',
					_0: _monty5811$apostello$Forms_Model$FormField(
						A2(
							_monty5811$apostello$Forms_Model$Field,
							_monty5811$apostello$Pages_Forms_Meta_Keyword$meta.disable_all_replies,
							A2(_monty5811$apostello$Pages_Forms_Keyword$disableRepliesField, msgs, currentKeyword))),
					_1: {
						ctor: '::',
						_0: A2(
							_monty5811$apostello$Forms_Model$FieldGroup,
							_elm_lang$core$Native_Utils.update(
								_monty5811$apostello$Forms_Model$defaultFieldGroupConfig,
								{
									header: _elm_lang$core$Maybe$Just('Replies')
								}),
							{
								ctor: '::',
								_0: A2(
									_monty5811$apostello$Forms_Model$Field,
									_monty5811$apostello$Pages_Forms_Meta_Keyword$meta.custom_response,
									A2(_monty5811$apostello$Pages_Forms_Keyword$customRespField, msgs, currentKeyword)),
								_1: {
									ctor: '::',
									_0: A2(
										_monty5811$apostello$Forms_Model$Field,
										_monty5811$apostello$Pages_Forms_Meta_Keyword$meta.custom_response_new_person,
										A2(_monty5811$apostello$Pages_Forms_Keyword$customRespNewPersonField, msgs, currentKeyword)),
									_1: {
										ctor: '::',
										_0: A2(
											_monty5811$apostello$Forms_Model$Field,
											_monty5811$apostello$Pages_Forms_Meta_Keyword$meta.deactivated_response,
											A2(_monty5811$apostello$Pages_Forms_Keyword$deactivatedRespField, msgs, currentKeyword)),
										_1: {
											ctor: '::',
											_0: A2(
												_monty5811$apostello$Forms_Model$Field,
												_monty5811$apostello$Pages_Forms_Meta_Keyword$meta.too_early_response,
												A2(_monty5811$apostello$Pages_Forms_Keyword$tooEarlyRespField, msgs, currentKeyword)),
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_monty5811$apostello$Forms_Model$FieldGroup,
								_elm_lang$core$Native_Utils.update(
									_monty5811$apostello$Forms_Model$defaultFieldGroupConfig,
									{
										header: _elm_lang$core$Maybe$Just('Scheduling')
									}),
								{
									ctor: '::',
									_0: A2(
										_monty5811$apostello$Forms_Model$Field,
										_monty5811$apostello$Pages_Forms_Meta_Keyword$meta.activate_time,
										A3(_monty5811$apostello$Pages_Forms_Keyword$activateTimeField, msgs, model, currentKeyword)),
									_1: {
										ctor: '::',
										_0: A2(
											_monty5811$apostello$Forms_Model$Field,
											_monty5811$apostello$Pages_Forms_Meta_Keyword$meta.deactivate_time,
											A3(_monty5811$apostello$Pages_Forms_Keyword$deactivateTimeField, msgs, model, currentKeyword)),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_monty5811$apostello$Forms_Model$FieldGroup,
									_elm_lang$core$Native_Utils.update(
										_monty5811$apostello$Forms_Model$defaultFieldGroupConfig,
										{
											header: _elm_lang$core$Maybe$Just('Other Settings')
										}),
									{
										ctor: '::',
										_0: A2(
											_monty5811$apostello$Forms_Model$Field,
											_monty5811$apostello$Pages_Forms_Meta_Keyword$meta.linked_groups,
											A4(_monty5811$apostello$Pages_Forms_Keyword$linkedGroupsField, msgs, model, groups, currentKeyword)),
										_1: {
											ctor: '::',
											_0: A2(
												_monty5811$apostello$Forms_Model$Field,
												_monty5811$apostello$Pages_Forms_Meta_Keyword$meta.owners,
												A4(_monty5811$apostello$Pages_Forms_Keyword$ownersField, msgs, model, users, currentKeyword)),
											_1: {
												ctor: '::',
												_0: A2(
													_monty5811$apostello$Forms_Model$Field,
													_monty5811$apostello$Pages_Forms_Meta_Keyword$meta.subscribed_to_digest,
													A4(_monty5811$apostello$Pages_Forms_Keyword$digestField, msgs, model, users, currentKeyword)),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		};
		var keywords = _monty5811$remote_list$RemoteList$toList(keywords_);
		var showAN = A3(_monty5811$apostello$Pages_Forms_Keyword$showArchiveNotice, keywords, currentKeyword, model);
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A4(_monty5811$apostello$Pages_Forms_Keyword$archiveNotice, msgs, showAN, keywords, model.keyword),
				_1: {
					ctor: '::',
					_0: A4(
						_monty5811$apostello$Forms_View$form,
						status,
						fields,
						A2(_monty5811$apostello$Pages_Forms_Keyword$submitMsg, msgs, showAN),
						A2(_monty5811$apostello$Forms_View$submitButton, currentKeyword, showAN)),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_Forms_Keyword$creating = F6(
	function (msgs, keywords, groups, users, model, status) {
		return A7(_monty5811$apostello$Pages_Forms_Keyword$viewHelp, msgs, keywords, groups, users, _elm_lang$core$Maybe$Nothing, model, status);
	});
var _monty5811$apostello$Pages_Forms_Keyword$editing = F7(
	function (msgs, keywords, groups, users, keyword, model, status) {
		var currentKeyword = _elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$filter,
				function (x) {
					return _elm_lang$core$Native_Utils.eq(x.keyword, keyword);
				},
				_monty5811$remote_list$RemoteList$toList(keywords)));
		var _p23 = currentKeyword;
		if (_p23.ctor === 'Just') {
			return A7(
				_monty5811$apostello$Pages_Forms_Keyword$viewHelp,
				msgs,
				keywords,
				groups,
				users,
				_elm_lang$core$Maybe$Just(_p23._0),
				model,
				status);
		} else {
			var _p24 = keywords;
			if (_p24.ctor === 'FinalPageReceived') {
				return _monty5811$apostello$Pages_Error404$view;
			} else {
				return _monty5811$apostello$Pages_Fragments_Loader$loader;
			}
		}
	});
var _monty5811$apostello$Pages_Forms_Keyword$view = F7(
	function (msgs, keywords, groups, users, maybeK, model, status) {
		var _p25 = maybeK;
		if (_p25.ctor === 'Nothing') {
			return A6(_monty5811$apostello$Pages_Forms_Keyword$creating, msgs, keywords, groups, users, model, status);
		} else {
			return A7(_monty5811$apostello$Pages_Forms_Keyword$editing, msgs, keywords, groups, users, _p25._0, model, status);
		}
	});

var _monty5811$apostello$Pages_Forms_Meta_SendAdhoc$meta = {
	content: A5(_monty5811$apostello$Forms_Model$FieldMeta, true, 'id_content', 'content', 'Content', _elm_lang$core$Maybe$Nothing),
	recipients: A5(_monty5811$apostello$Forms_Model$FieldMeta, true, 'id_recipients', 'recipients', 'Recipients', _elm_lang$core$Maybe$Nothing),
	scheduled_time: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_scheduled_time',
		'scheduled_time',
		'Scheduled Time',
		_elm_lang$core$Maybe$Just('Leave this blank to send your message immediately, otherwise select a date and time to schedule your message'))
};

var _monty5811$apostello$Pages_Forms_SendAdhoc$selectedIcon = F2(
	function (selectedPks, contact) {
		var _p0 = A2(_elm_lang$core$List$member, contact.pk, selectedPks);
		if (_p0 === false) {
			return _elm_lang$html$Html$text('');
		} else {
			return A2(
				_elm_lang$html$Html$i,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('fa fa-check'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'var(--color-purple)'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'});
		}
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$contactItemHelper = F2(
	function (selectedPks, contact) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'color', _1: '#000'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(_monty5811$apostello$Pages_Forms_SendAdhoc$selectedIcon, selectedPks, contact),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(contact.full_name),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$loadingMessage = function (rl) {
	var _p1 = rl;
	switch (_p1.ctor) {
		case 'NotAsked':
			return _elm_lang$html$Html$text('');
		case 'FinalPageReceived':
			return _elm_lang$html$Html$text('');
		case 'RespFailed':
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('alert'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(_p1._0),
					_1: {ctor: '[]'}
				});
		case 'WaitingForFirstResp':
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('alert'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('We are fetching your contacts now...'),
					_1: {ctor: '[]'}
				});
		case 'WaitingForPage':
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('alert'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('We are fetching your contacts now...'),
					_1: {ctor: '[]'}
				});
		default:
			return _elm_lang$html$Html$text('');
	}
};
var _monty5811$apostello$Pages_Forms_SendAdhoc$noContacts = function (props) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('segment'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Looks like you don\'t have any contacts yet.'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: props.newContactButton,
				_1: {ctor: '[]'}
			}
		});
};
var _monty5811$apostello$Pages_Forms_SendAdhoc$updateCost = F2(
	function (twilioSettings, model) {
		var _p2 = A2(
			_elm_lang$core$Maybe$map,
			function (_) {
				return _.sendingCost;
			},
			twilioSettings);
		if (_p2.ctor === 'Nothing') {
			return _elm_lang$core$Native_Utils.update(
				model,
				{cost: _elm_lang$core$Maybe$Nothing});
		} else {
			var _p3 = model.content;
			if (_p3 === '') {
				return _elm_lang$core$Native_Utils.update(
					model,
					{cost: _elm_lang$core$Maybe$Nothing});
			} else {
				var _p4 = _elm_lang$core$List$length(model.selectedContacts);
				if (_p4 === 0) {
					return _elm_lang$core$Native_Utils.update(
						model,
						{cost: _elm_lang$core$Maybe$Nothing});
				} else {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							cost: _elm_lang$core$Maybe$Just(
								A2(
									_monty5811$apostello$Helpers$calculateSmsCost,
									_p2._0 * _elm_lang$core$Basics$toFloat(_p4),
									_p3))
						});
				}
			}
		}
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$updateHelp = F2(
	function (msg, model) {
		var _p5 = msg;
		switch (_p5.ctor) {
			case 'UpdateContent':
				return _elm_lang$core$Native_Utils.update(
					model,
					{content: _p5._0});
			case 'UpdateDate':
				return _elm_lang$core$Native_Utils.update(
					model,
					{date: _p5._1, datePickerState: _p5._0});
			case 'ToggleSelectedContact':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						selectedContacts: A2(_monty5811$apostello$Helpers$toggleSelectedPk, _p5._0, model.selectedContacts)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						adhocFilter: _monty5811$apostello$FilteringTable$textToRegex(_p5._0)
					});
		}
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$update = F3(
	function (twilioSettings, msg, model) {
		return A2(
			_monty5811$apostello$Pages_Forms_SendAdhoc$updateCost,
			twilioSettings,
			A2(_monty5811$apostello$Pages_Forms_SendAdhoc$updateHelp, msg, model));
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$initialModel = F2(
	function (maybeContent, maybePks) {
		return {
			content: A2(_elm_lang$core$Maybe$withDefault, '', maybeContent),
			selectedContacts: A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				maybePks),
			date: _elm_lang$core$Maybe$Nothing,
			adhocFilter: _elm_lang$core$Regex$regex(''),
			cost: _elm_lang$core$Maybe$Nothing,
			datePickerState: _abadi199$datetimepicker$DateTimePicker$initialState
		};
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$Model = F6(
	function (a, b, c, d, e, f) {
		return {content: a, selectedContacts: b, date: c, adhocFilter: d, cost: e, datePickerState: f};
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$Props = F4(
	function (a, b, c, d) {
		return {form: a, postForm: b, newContactButton: c, smsCharLimit: d};
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$UpdateAdhocFilter = function (a) {
	return {ctor: 'UpdateAdhocFilter', _0: a};
};
var _monty5811$apostello$Pages_Forms_SendAdhoc$ToggleSelectedContact = function (a) {
	return {ctor: 'ToggleSelectedContact', _0: a};
};
var _monty5811$apostello$Pages_Forms_SendAdhoc$contactLabel = F2(
	function (props, contact) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('badge'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'user-select', _1: 'none'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _monty5811$apostello$Helpers$onClick(
							props.form(
								_monty5811$apostello$Pages_Forms_SendAdhoc$ToggleSelectedContact(contact.pk))),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(contact.full_name),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$selectedContacts = F3(
	function (props, selectedPks, contacts_) {
		var selected = A2(
			_elm_lang$core$List$map,
			_monty5811$apostello$Pages_Forms_SendAdhoc$contactLabel(props),
			A2(
				_elm_lang$core$List$filter,
				function (c) {
					return A2(_elm_lang$core$List$member, c.pk, selectedPks);
				},
				_monty5811$remote_list$RemoteList$toList(contacts_)));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '1rem'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			selected);
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$contactItem = F3(
	function (props, selectedPks, contact) {
		return A3(
			_elm_lang$html$Html_Keyed$node,
			'div',
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('item'),
				_1: {
					ctor: '::',
					_0: _monty5811$apostello$Helpers$onClick(
						props.form(
							_monty5811$apostello$Pages_Forms_SendAdhoc$ToggleSelectedContact(contact.pk))),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('contactItem'),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Basics$toString(contact.pk),
					_1: A2(_monty5811$apostello$Pages_Forms_SendAdhoc$contactItemHelper, selectedPks, contact)
				},
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$contactsField = F4(
	function (props, model, contacts, meta_) {
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$label,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$for(meta_.id),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(meta_.label),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('segment'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _monty5811$apostello$Pages_Forms_SendAdhoc$loadingMessage(contacts),
						_1: {
							ctor: '::',
							_0: A3(_monty5811$apostello$Pages_Forms_SendAdhoc$selectedContacts, props, model.selectedContacts, contacts),
							_1: {
								ctor: '::',
								_0: _monty5811$apostello$FilteringTable$filterInput(
									function (_p6) {
										return props.form(
											_monty5811$apostello$Pages_Forms_SendAdhoc$UpdateAdhocFilter(_p6));
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('list'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'min-height', _1: '25vh'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'max-height', _1: '50vh'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'overflow-y', _1: 'auto'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										A2(
											_elm_lang$core$List$map,
											A2(_monty5811$apostello$Pages_Forms_SendAdhoc$contactItem, props, model.selectedContacts),
											A2(
												_elm_lang$core$List$filter,
												_monty5811$apostello$FilteringTable$filterRecord(model.adhocFilter),
												_monty5811$remote_list$RemoteList$toList(contacts)))),
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		};
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$UpdateDate = F2(
	function (a, b) {
		return {ctor: 'UpdateDate', _0: a, _1: b};
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$initSendAdhocDate = F2(
	function (state, maybeDate) {
		return A2(_monty5811$apostello$Pages_Forms_SendAdhoc$UpdateDate, state, maybeDate);
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$init = function (model) {
	return A2(_abadi199$datetimepicker$DateTimePicker$initialCmd, _monty5811$apostello$Pages_Forms_SendAdhoc$initSendAdhocDate, model.datePickerState);
};
var _monty5811$apostello$Pages_Forms_SendAdhoc$updateSADate = F3(
	function (props, state, maybeDate) {
		return props.form(
			A2(_monty5811$apostello$Pages_Forms_SendAdhoc$UpdateDate, state, maybeDate));
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$UpdateContent = function (a) {
	return {ctor: 'UpdateContent', _0: a};
};
var _monty5811$apostello$Pages_Forms_SendAdhoc$sendForm = F4(
	function (props, model, contacts, status) {
		var fields = A2(
			_elm_lang$core$List$map,
			_monty5811$apostello$Forms_Model$FormField,
			{
				ctor: '::',
				_0: A2(
					_monty5811$apostello$Forms_Model$Field,
					_monty5811$apostello$Pages_Forms_Meta_SendAdhoc$meta.content,
					A3(
						_monty5811$apostello$Forms_View$contentField,
						props.smsCharLimit,
						function (_p7) {
							return props.form(
								_monty5811$apostello$Pages_Forms_SendAdhoc$UpdateContent(_p7));
						},
						model.content)),
				_1: {
					ctor: '::',
					_0: A2(
						_monty5811$apostello$Forms_Model$Field,
						_monty5811$apostello$Pages_Forms_Meta_SendAdhoc$meta.recipients,
						A3(_monty5811$apostello$Pages_Forms_SendAdhoc$contactsField, props, model, contacts)),
					_1: {
						ctor: '::',
						_0: A2(
							_monty5811$apostello$Forms_Model$Field,
							_monty5811$apostello$Pages_Forms_Meta_SendAdhoc$meta.scheduled_time,
							A3(
								_monty5811$apostello$Forms_View$timeField,
								_monty5811$apostello$Pages_Forms_SendAdhoc$updateSADate(props),
								model.datePickerState,
								model.date)),
						_1: {ctor: '[]'}
					}
				}
			});
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Send a message to a single person or to an ad-hoc group of people:'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A4(
						_monty5811$apostello$Forms_View$form,
						status,
						fields,
						props.postForm,
						_monty5811$apostello$Forms_View$sendButton(model.cost)),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_Forms_SendAdhoc$view = F4(
	function (props, model, contacts, status) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: function () {
					var _p8 = contacts;
					if (_p8.ctor === 'FinalPageReceived') {
						return _elm_lang$core$Native_Utils.eq(
							_elm_lang$core$List$length(_p8._0),
							0) ? _monty5811$apostello$Pages_Forms_SendAdhoc$noContacts(props) : A4(_monty5811$apostello$Pages_Forms_SendAdhoc$sendForm, props, model, contacts, status);
					} else {
						return A4(_monty5811$apostello$Pages_Forms_SendAdhoc$sendForm, props, model, contacts, status);
					}
				}(),
				_1: {ctor: '[]'}
			});
	});

var _monty5811$apostello$Pages_Forms_Meta_SendGroup$meta = {
	content: A5(_monty5811$apostello$Forms_Model$FieldMeta, true, 'id_content', 'content', 'Content', _elm_lang$core$Maybe$Nothing),
	recipient_group: A5(_monty5811$apostello$Forms_Model$FieldMeta, true, 'id_recipient_group', 'recipient_group', 'Recipient_group', _elm_lang$core$Maybe$Nothing),
	scheduled_time: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_scheduled_time',
		'scheduled_time',
		'Scheduled Time',
		_elm_lang$core$Maybe$Just('Leave this blank to send your message immediately, otherwise select a date and time to schedule your message'))
};

var _monty5811$apostello$Pages_Forms_SendGroup$selectedIcon = F2(
	function (selectedPk, group) {
		var _p0 = selectedPk;
		if (_p0.ctor === 'Nothing') {
			return _elm_lang$html$Html$text('');
		} else {
			var _p1 = _elm_lang$core$Native_Utils.eq(_p0._0, group.pk);
			if (_p1 === true) {
				return A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('fa fa-check'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'var(--color-purple)'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'});
			} else {
				return _elm_lang$html$Html$text('');
			}
		}
	});
var _monty5811$apostello$Pages_Forms_SendGroup$groupItemHelper = F2(
	function (selectedPk, group) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'color', _1: '#000'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('float-right'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'($',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(group.cost),
									')'))),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(_monty5811$apostello$Pages_Forms_SendGroup$selectedIcon, selectedPk, group),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(
										_elm_lang$core$Basics_ops['++'],
										group.name,
										A2(_elm_lang$core$Basics_ops['++'], ' - ', group.description))),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_Forms_SendGroup$loadingMessage = function (rl) {
	var _p2 = rl;
	switch (_p2.ctor) {
		case 'NotAsked':
			return _elm_lang$html$Html$text('');
		case 'FinalPageReceived':
			return _elm_lang$html$Html$text('');
		case 'RespFailed':
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('alert'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(_p2._0),
					_1: {ctor: '[]'}
				});
		case 'WaitingForFirstResp':
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('alert'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('We are fetching your groups now...'),
					_1: {ctor: '[]'}
				});
		case 'WaitingForPage':
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('alert'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('We are fetching your groups now...'),
					_1: {ctor: '[]'}
				});
		default:
			return _elm_lang$html$Html$text('');
	}
};
var _monty5811$apostello$Pages_Forms_SendGroup$noGroups = function (props) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('segment'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Looks like you don\'t have any (non-empty) groups yet.'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: props.newGroupButton,
				_1: {ctor: '[]'}
			}
		});
};
var _monty5811$apostello$Pages_Forms_SendGroup$updateCost = F2(
	function (groups, model) {
		var _p3 = model.content;
		if (_p3 === '') {
			return _elm_lang$core$Native_Utils.update(
				model,
				{cost: _elm_lang$core$Maybe$Nothing});
		} else {
			var _p4 = model.selectedPk;
			if (_p4.ctor === 'Nothing') {
				return _elm_lang$core$Native_Utils.update(
					model,
					{cost: _elm_lang$core$Maybe$Nothing});
			} else {
				var groupCost = function (_) {
					return _.cost;
				}(
					A2(
						_elm_lang$core$Maybe$withDefault,
						_monty5811$apostello$Data$nullGroup,
						_elm_lang$core$List$head(
							A2(
								_elm_lang$core$List$filter,
								function (x) {
									return _elm_lang$core$Native_Utils.eq(x.pk, _p4._0);
								},
								groups))));
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						cost: _elm_lang$core$Maybe$Just(
							A2(_monty5811$apostello$Helpers$calculateSmsCost, groupCost, _p3))
					});
			}
		}
	});
var _monty5811$apostello$Pages_Forms_SendGroup$updateHelp = F2(
	function (msg, model) {
		var _p5 = msg;
		switch (_p5.ctor) {
			case 'UpdateSGContent':
				return _elm_lang$core$Native_Utils.update(
					model,
					{content: _p5._0});
			case 'UpdateSGDate':
				return _elm_lang$core$Native_Utils.update(
					model,
					{date: _p5._1, datePickerState: _p5._0});
			case 'SelectGroup':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						selectedPk: _elm_lang$core$Maybe$Just(_p5._0)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						groupFilter: _monty5811$apostello$FilteringTable$textToRegex(_p5._0)
					});
		}
	});
var _monty5811$apostello$Pages_Forms_SendGroup$update = F3(
	function (groups, msg, model) {
		return A2(
			_monty5811$apostello$Pages_Forms_SendGroup$updateCost,
			groups,
			A2(_monty5811$apostello$Pages_Forms_SendGroup$updateHelp, msg, model));
	});
var _monty5811$apostello$Pages_Forms_SendGroup$initialModel = F2(
	function (initialContent, initialSelectedGroup) {
		return {
			content: A2(_elm_lang$core$Maybe$withDefault, '', initialContent),
			selectedPk: initialSelectedGroup,
			date: _elm_lang$core$Maybe$Nothing,
			cost: _elm_lang$core$Maybe$Nothing,
			groupFilter: _elm_lang$core$Regex$regex(''),
			datePickerState: _abadi199$datetimepicker$DateTimePicker$initialState
		};
	});
var _monty5811$apostello$Pages_Forms_SendGroup$Model = F6(
	function (a, b, c, d, e, f) {
		return {content: a, date: b, selectedPk: c, cost: d, groupFilter: e, datePickerState: f};
	});
var _monty5811$apostello$Pages_Forms_SendGroup$Props = F4(
	function (a, b, c, d) {
		return {form: a, postForm: b, newGroupButton: c, smsCharLimit: d};
	});
var _monty5811$apostello$Pages_Forms_SendGroup$UpdateGroupFilter = function (a) {
	return {ctor: 'UpdateGroupFilter', _0: a};
};
var _monty5811$apostello$Pages_Forms_SendGroup$SelectGroup = function (a) {
	return {ctor: 'SelectGroup', _0: a};
};
var _monty5811$apostello$Pages_Forms_SendGroup$groupItem = F3(
	function (props, selectedPk, group) {
		return A3(
			_elm_lang$html$Html_Keyed$node,
			'div',
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('item'),
				_1: {
					ctor: '::',
					_0: _monty5811$apostello$Helpers$onClick(
						props.form(
							_monty5811$apostello$Pages_Forms_SendGroup$SelectGroup(group.pk))),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('groupItem'),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Basics$toString(group.pk),
					_1: A2(_monty5811$apostello$Pages_Forms_SendGroup$groupItemHelper, selectedPk, group)
				},
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_Forms_SendGroup$groupField = F4(
	function (props, model, groups, meta_) {
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$label,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$for(meta_.id),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(meta_.label),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('segment'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _monty5811$apostello$Pages_Forms_SendGroup$loadingMessage(groups),
						_1: {
							ctor: '::',
							_0: _monty5811$apostello$FilteringTable$filterInput(
								function (_p6) {
									return props.form(
										_monty5811$apostello$Pages_Forms_SendGroup$UpdateGroupFilter(_p6));
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('list'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'min-height', _1: '25vh'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'max-height', _1: '50vh'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'overflow-y', _1: 'auto'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									A2(
										_elm_lang$core$List$map,
										A2(_monty5811$apostello$Pages_Forms_SendGroup$groupItem, props, model.selectedPk),
										A2(
											_elm_lang$core$List$filter,
											_monty5811$apostello$FilteringTable$filterRecord(model.groupFilter),
											_monty5811$remote_list$RemoteList$toList(groups)))),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('input-hint'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Note that empty groups are not shown here.'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		};
	});
var _monty5811$apostello$Pages_Forms_SendGroup$UpdateSGDate = F2(
	function (a, b) {
		return {ctor: 'UpdateSGDate', _0: a, _1: b};
	});
var _monty5811$apostello$Pages_Forms_SendGroup$initSendGroupDate = F2(
	function (state, maybeDate) {
		return A2(_monty5811$apostello$Pages_Forms_SendGroup$UpdateSGDate, state, maybeDate);
	});
var _monty5811$apostello$Pages_Forms_SendGroup$init = function (model) {
	return A2(_abadi199$datetimepicker$DateTimePicker$initialCmd, _monty5811$apostello$Pages_Forms_SendGroup$initSendGroupDate, model.datePickerState);
};
var _monty5811$apostello$Pages_Forms_SendGroup$updateSGDate = F3(
	function (props, state, maybeDate) {
		return props.form(
			A2(_monty5811$apostello$Pages_Forms_SendGroup$UpdateSGDate, state, maybeDate));
	});
var _monty5811$apostello$Pages_Forms_SendGroup$UpdateSGContent = function (a) {
	return {ctor: 'UpdateSGContent', _0: a};
};
var _monty5811$apostello$Pages_Forms_SendGroup$sendForm = F4(
	function (props, model, groups, status) {
		var fields = A2(
			_elm_lang$core$List$map,
			_monty5811$apostello$Forms_Model$FormField,
			{
				ctor: '::',
				_0: A2(
					_monty5811$apostello$Forms_Model$Field,
					_monty5811$apostello$Pages_Forms_Meta_SendGroup$meta.content,
					A3(
						_monty5811$apostello$Forms_View$contentField,
						props.smsCharLimit,
						function (_p7) {
							return props.form(
								_monty5811$apostello$Pages_Forms_SendGroup$UpdateSGContent(_p7));
						},
						model.content)),
				_1: {
					ctor: '::',
					_0: A2(
						_monty5811$apostello$Forms_Model$Field,
						_monty5811$apostello$Pages_Forms_Meta_SendGroup$meta.recipient_group,
						A3(_monty5811$apostello$Pages_Forms_SendGroup$groupField, props, model, groups)),
					_1: {
						ctor: '::',
						_0: A2(
							_monty5811$apostello$Forms_Model$Field,
							_monty5811$apostello$Pages_Forms_Meta_SendGroup$meta.scheduled_time,
							A3(
								_monty5811$apostello$Forms_View$timeField,
								_monty5811$apostello$Pages_Forms_SendGroup$updateSGDate(props),
								model.datePickerState,
								model.date)),
						_1: {ctor: '[]'}
					}
				}
			});
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Send a message to a single person or to an ad-hoc group of people:'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A4(
						_monty5811$apostello$Forms_View$form,
						status,
						fields,
						props.postForm,
						_monty5811$apostello$Forms_View$sendButton(model.cost)),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_Forms_SendGroup$view = F4(
	function (props, model, groups, status) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: function () {
					var _p8 = groups;
					if (_p8.ctor === 'FinalPageReceived') {
						return _elm_lang$core$Native_Utils.eq(
							_elm_lang$core$List$length(_p8._0),
							0) ? _monty5811$apostello$Pages_Forms_SendGroup$noGroups(props) : A4(_monty5811$apostello$Pages_Forms_SendGroup$sendForm, props, model, groups, status);
					} else {
						return A4(_monty5811$apostello$Pages_Forms_SendGroup$sendForm, props, model, groups, status);
					}
				}(),
				_1: {ctor: '[]'}
			});
	});

var _monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta = {
	site_name: A5(_monty5811$apostello$Forms_Model$FieldMeta, true, 'id_site_name', 'site_name', 'Site name', _elm_lang$core$Maybe$Nothing),
	sms_char_limit: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		true,
		'id_sms_char_limit',
		'sms_char_limit',
		'Sms char limit',
		_elm_lang$core$Maybe$Just('SMS length limit. The sending forms use this value to limit the size of messages. Check the Twilio pricing docs for pricing information.')),
	default_number_prefix: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_default_number_prefix',
		'default_number_prefix',
		'Default number prefix',
		_elm_lang$core$Maybe$Just('This value will be used to prepopulate the new contact form use this if you don\'t want to have to type +xx every time.')),
	disable_all_replies: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_disable_all_replies',
		'disable_all_replies',
		'Disable all replies',
		_elm_lang$core$Maybe$Just('Tick this box to disable all automated replies.')),
	disable_email_login_form: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_disable_email_login_form',
		'disable_email_login_form',
		'Disable email login form',
		_elm_lang$core$Maybe$Just('Tick this to hide the login with email form. Note, you will need to have setup login with Google, or users will have no way into the site.')),
	office_email: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_office_email',
		'office_email',
		'Office email',
		_elm_lang$core$Maybe$Just('Email address that receives important notifications.')),
	auto_add_new_groups: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_auto_add_new_groups',
		'auto_add_new_groups',
		'Auto add new groups',
		_elm_lang$core$Maybe$Just('Any brand new people will be added to the groups selected here')),
	sms_expiration_date: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_sms_expiration_date',
		'sms_expiration_date',
		'SMS Expiration Date',
		_elm_lang$core$Maybe$Just('If this date is set, any messages older than this will be removed from the database.')),
	sms_rolling_expiration_days: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_sms_rolling_expiration_days',
		'sms_rolling_expiration_days',
		'Rolling SMS Expiration',
		_elm_lang$core$Maybe$Just('The number of days a message will be kept by apostello before being deleted. If blank, then messages will be kept forever.')),
	slack_url: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_slack_url',
		'slack_url',
		'Slack url',
		_elm_lang$core$Maybe$Just('Post all incoming messages to this slack hook. Leave blank to disable.')),
	sync_elvanto: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_sync_elvanto',
		'sync_elvanto',
		'Sync elvanto',
		_elm_lang$core$Maybe$Just('Toggle automatic syncing of Elvanto groups. Syncing will be done every 24 hours.')),
	not_approved_msg: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		true,
		'id_not_approved_msg',
		'not_approved_msg',
		'Not approved msg',
		_elm_lang$core$Maybe$Just('This message will be shown on the \"not approved\" page.')),
	email_host: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_email_host',
		'email_host',
		'Email host',
		_elm_lang$core$Maybe$Just('Email host.')),
	email_port: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_email_port',
		'email_port',
		'Email port',
		_elm_lang$core$Maybe$Just('Email host port.')),
	email_username: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_email_username',
		'email_username',
		'Email username',
		_elm_lang$core$Maybe$Just('Email user name.')),
	email_password: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_email_password',
		'email_password',
		'Email password',
		_elm_lang$core$Maybe$Just('Email password.')),
	email_from: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_email_from',
		'email_from',
		'Email from',
		_elm_lang$core$Maybe$Just('Email will be sent from this address.')),
	twilio_account_sid: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_twilio_account_sid',
		'twilio_account_sid',
		'Twilio Account SID',
		_elm_lang$core$Maybe$Just('Your Twilio Account SID. See https://support.twilio.com/hc/en-us/articles/223136607-What-is-an-Application-SID-')),
	twilio_auth_token: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_twilio_auth_token',
		'twilio_auth_token',
		'Twilio Auth Token',
		_elm_lang$core$Maybe$Just('Your Twilio Auth Token. See https://support.twilio.com/hc/en-us/articles/223136027-Auth-Tokens-and-how-to-change-them')),
	twilio_from_num: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_twilio_from_num',
		'twilio_from_num',
		'Twilio Phone Number',
		_elm_lang$core$Maybe$Just('Your Twilio Number. This is the number we will send messages from.')),
	twilio_sending_cost: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_twilio_sending_cost',
		'twilio_sending_cost',
		'Twilio Sending Cost',
		_elm_lang$core$Maybe$Just('The cost of sending an SMS. You can find this here: https://www.twilio.com/sms/pricing'))
};

var _monty5811$apostello$Pages_Forms_SiteConfig$groupViewHelper = F2(
	function (selectedPks, group) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'color', _1: '#000'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(_monty5811$apostello$Forms_View$selectedIcon, selectedPks, group),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(group.name),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$debugHelpText = A2(
	_elm_lang$html$Html$p,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: _elm_lang$html$Html$text('You can test these settings '),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href('/config/debug/'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$target('_blank'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('here'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text('.'),
				_1: {ctor: '[]'}
			}
		}
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$updateHelp = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'ReceiveInitialData':
				if (_p0._0.ctor === 'Ok') {
					return _elm_lang$core$Maybe$Just(_p0._0._0);
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			case 'UpdateTwilioFromNum':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							twilio_from_num: _elm_lang$core$Maybe$Just(_p0._0)
						}));
			case 'UpdateTwilioSid':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							twilio_account_sid: _elm_lang$core$Maybe$Just(_p0._0)
						}));
			case 'UpdateTwilioAuthToken':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							twilio_auth_token: _elm_lang$core$Maybe$Just(_p0._0)
						}));
			case 'UpdateTwilioSendCost':
				var _p1 = _elm_lang$core$String$toFloat(_p0._0);
				if (_p1.ctor === 'Ok') {
					return _elm_lang$core$Maybe$Just(
						_elm_lang$core$Native_Utils.update(
							model,
							{
								twilio_sending_cost: _elm_lang$core$Maybe$Just(_p1._0)
							}));
				} else {
					return _elm_lang$core$Maybe$Just(model);
				}
			case 'UpdateSiteNameField':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{site_name: _p0._0}));
			case 'UpdateSmsCharLimitField':
				var _p2 = _elm_lang$core$String$toInt(_p0._0);
				if (_p2.ctor === 'Ok') {
					return _elm_lang$core$Maybe$Just(
						_elm_lang$core$Native_Utils.update(
							model,
							{sms_char_limit: _p2._0}));
				} else {
					return _elm_lang$core$Maybe$Just(model);
				}
			case 'UpdateDefaultPrefixField':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{default_number_prefix: _p0._0}));
			case 'UpdateDisableRepliesField':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{disable_all_replies: !model.disable_all_replies}));
			case 'UpdateDisableLoginEmailField':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{disable_email_login_form: !model.disable_email_login_form}));
			case 'UpdateOfficeEmailField':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{office_email: _p0._0}));
			case 'UpdateAutoAddGroupsField':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							auto_add_new_groups: A2(_monty5811$apostello$Helpers$toggleSelectedPk, _p0._0, model.auto_add_new_groups)
						}));
			case 'UpdateSmsExpiredDate':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{sms_expiration_date: _p0._1, datePickerSmsExpiredState: _p0._0}));
			case 'UpdateRollingExpiration':
				var num = _elm_lang$core$Result$toMaybe(
					_elm_lang$core$String$toInt(_p0._0));
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{sms_rolling_expiration_days: num}));
			case 'UpdateSlackUrlField':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{slack_url: _p0._0}));
			case 'UpdateSyncElvantoField':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{sync_elvanto: !model.sync_elvanto}));
			case 'UpdateNotApprovedField':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{not_approved_msg: _p0._0}));
			case 'UpdateEmailHostField':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							email_host: _elm_lang$core$Maybe$Just(_p0._0)
						}));
			case 'UpdateEmailPortField':
				var _p3 = _elm_lang$core$String$toInt(_p0._0);
				if (_p3.ctor === 'Ok') {
					return _elm_lang$core$Maybe$Just(
						_elm_lang$core$Native_Utils.update(
							model,
							{
								email_port: _elm_lang$core$Maybe$Just(_p3._0)
							}));
				} else {
					return _elm_lang$core$Maybe$Just(model);
				}
			case 'UpdateEmailUserField':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							email_username: _elm_lang$core$Maybe$Just(_p0._0)
						}));
			case 'UpdateEmailPassField':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							email_password: _elm_lang$core$Maybe$Just(_p0._0)
						}));
			case 'UpdateEmailFromField':
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							email_from: _elm_lang$core$Maybe$Just(_p0._0)
						}));
			default:
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							groupsFilter: _monty5811$apostello$FilteringTable$textToRegex(_p0._0)
						}));
		}
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return function (u) {
																					return function (v) {
																						return function (w) {
																							return {site_name: a, sms_char_limit: b, default_number_prefix: c, disable_all_replies: d, disable_email_login_form: e, office_email: f, auto_add_new_groups: g, sms_expiration_date: h, datePickerSmsExpiredState: i, sms_rolling_expiration_days: j, slack_url: k, sync_elvanto: l, not_approved_msg: m, email_host: n, email_port: o, email_username: p, email_password: q, email_from: r, twilio_account_sid: s, twilio_auth_token: t, twilio_from_num: u, twilio_sending_cost: v, groupsFilter: w};
																						};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$decodeModel = A2(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded,
	_elm_lang$core$Regex$regex(''),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'twilio_sending_cost',
		_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$float),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'twilio_from_num',
			_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'twilio_auth_token',
				_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'twilio_account_sid',
					_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'email_from',
						_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'email_password',
							_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'email_username',
								_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'email_port',
									_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$int),
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'email_host',
										_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'not_approved_msg',
											_elm_lang$core$Json_Decode$string,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'sync_elvanto',
												_elm_lang$core$Json_Decode$bool,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'slack_url',
													_elm_lang$core$Json_Decode$string,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'sms_rolling_expiration_days',
														_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$int),
														A2(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded,
															_abadi199$datetimepicker$DateTimePicker$initialState,
															A3(
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																'sms_expiration_date',
																_elm_lang$core$Json_Decode$maybe(_elm_community$json_extra$Json_Decode_Extra$date),
																A3(
																	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																	'auto_add_new_groups',
																	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$int),
																	A3(
																		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																		'office_email',
																		_elm_lang$core$Json_Decode$string,
																		A3(
																			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																			'disable_email_login_form',
																			_elm_lang$core$Json_Decode$bool,
																			A3(
																				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																				'disable_all_replies',
																				_elm_lang$core$Json_Decode$bool,
																				A3(
																					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																					'default_number_prefix',
																					_elm_lang$core$Json_Decode$string,
																					A3(
																						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																						'sms_char_limit',
																						_elm_lang$core$Json_Decode$int,
																						A3(
																							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																							'site_name',
																							_elm_lang$core$Json_Decode$string,
																							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Pages_Forms_SiteConfig$Model))))))))))))))))))))))));
var _monty5811$apostello$Pages_Forms_SiteConfig$Messages = F2(
	function (a, b) {
		return {form: a, postForm: b};
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$ReceiveInitialData = function (a) {
	return {ctor: 'ReceiveInitialData', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$init = A2(
	_elm_lang$http$Http$send,
	_monty5811$apostello$Pages_Forms_SiteConfig$ReceiveInitialData,
	A2(_elm_lang$http$Http$get, _monty5811$apostello$Urls$api_site_config, _monty5811$apostello$Pages_Forms_SiteConfig$decodeModel));
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateGroupsFilter = function (a) {
	return {ctor: 'UpdateGroupsFilter', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateEmailFromField = function (a) {
	return {ctor: 'UpdateEmailFromField', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$emailFromField = F2(
	function (msgs, model) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			model.email_from,
			function (_p4) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateEmailFromField(_p4));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateEmailPassField = function (a) {
	return {ctor: 'UpdateEmailPassField', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$emailPassField = F2(
	function (msgs, model) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			model.email_password,
			function (_p5) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateEmailPassField(_p5));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateEmailUserField = function (a) {
	return {ctor: 'UpdateEmailUserField', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$emailUserField = F2(
	function (msgs, model) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			model.email_username,
			function (_p6) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateEmailUserField(_p6));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateEmailPortField = function (a) {
	return {ctor: 'UpdateEmailPortField', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$emailPortField = F2(
	function (msgs, model) {
		return A2(
			_monty5811$apostello$Forms_View$simpleIntField,
			model.email_port,
			function (_p7) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateEmailPortField(_p7));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateEmailHostField = function (a) {
	return {ctor: 'UpdateEmailHostField', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$emailHostField = F2(
	function (msgs, model) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			model.email_host,
			function (_p8) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateEmailHostField(_p8));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateNotApprovedField = function (a) {
	return {ctor: 'UpdateNotApprovedField', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$notAppField = F2(
	function (msgs, model) {
		return A3(
			_monty5811$apostello$Forms_View$longTextField,
			10,
			_elm_lang$core$Maybe$Just(model.not_approved_msg),
			function (_p9) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateNotApprovedField(_p9));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateSyncElvantoField = {ctor: 'UpdateSyncElvantoField'};
var _monty5811$apostello$Pages_Forms_SiteConfig$syncElvField = F2(
	function (msgs, model) {
		return A3(
			_monty5811$apostello$Forms_View$checkboxField,
			_elm_lang$core$Maybe$Just(model),
			function (_) {
				return _.sync_elvanto;
			},
			function (_p10) {
				return msgs.form(_monty5811$apostello$Pages_Forms_SiteConfig$UpdateSyncElvantoField);
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateSlackUrlField = function (a) {
	return {ctor: 'UpdateSlackUrlField', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$slackField = F2(
	function (msgs, model) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			_elm_lang$core$Maybe$Just(model.slack_url),
			function (_p11) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateSlackUrlField(_p11));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateRollingExpiration = function (a) {
	return {ctor: 'UpdateRollingExpiration', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$smsRollingExpireField = F2(
	function (msgs, model) {
		return A2(
			_monty5811$apostello$Forms_View$simpleIntField,
			model.sms_rolling_expiration_days,
			function (_p12) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateRollingExpiration(_p12));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateSmsExpiredDate = F2(
	function (a, b) {
		return {ctor: 'UpdateSmsExpiredDate', _0: a, _1: b};
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$initSmsExpireDate = F3(
	function (model, datePickerSmsExpiredState, maybeDate) {
		return A2(_monty5811$apostello$Pages_Forms_SiteConfig$UpdateSmsExpiredDate, datePickerSmsExpiredState, model.sms_expiration_date);
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$update = F2(
	function (msg, maybeModel) {
		var _p13 = msg;
		if ((_p13.ctor === 'ReceiveInitialData') && (_p13._0.ctor === 'Ok')) {
			var _p14 = _p13._0._0;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Maybe$Just(_p14),
				_1: A2(
					_abadi199$datetimepicker$DateTimePicker$initialCmd,
					_monty5811$apostello$Pages_Forms_SiteConfig$initSmsExpireDate(_p14),
					_p14.datePickerSmsExpiredState)
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: A2(
					_elm_lang$core$Maybe$andThen,
					_monty5811$apostello$Pages_Forms_SiteConfig$updateHelp(msg),
					maybeModel),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$updateExpDate = F3(
	function (msgs, state, maybeDate) {
		return msgs.form(
			A2(_monty5811$apostello$Pages_Forms_SiteConfig$UpdateSmsExpiredDate, state, maybeDate));
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$smsExpirationDateField = F2(
	function (msgs, model) {
		return A3(
			_monty5811$apostello$Forms_View$dateField,
			_monty5811$apostello$Pages_Forms_SiteConfig$updateExpDate(msgs),
			model.datePickerSmsExpiredState,
			model.sms_expiration_date);
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateAutoAddGroupsField = function (a) {
	return {ctor: 'UpdateAutoAddGroupsField', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$groupLabelView = F3(
	function (msgs, maybePks, group) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('badge'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'user-select', _1: 'none'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							msgs.form(
								_monty5811$apostello$Pages_Forms_SiteConfig$UpdateAutoAddGroupsField(group.pk))),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(group.name),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$groupView = F3(
	function (msgs, maybeSelectedPks, group) {
		var selectedPks = function () {
			var _p15 = maybeSelectedPks;
			if (_p15.ctor === 'Nothing') {
				return {ctor: '[]'};
			} else {
				return _p15._0;
			}
		}();
		return A3(
			_elm_lang$html$Html_Keyed$node,
			'div',
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						msgs.form(
							_monty5811$apostello$Pages_Forms_SiteConfig$UpdateAutoAddGroupsField(group.pk))),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Basics$toString(group.pk),
					_1: A2(_monty5811$apostello$Pages_Forms_SiteConfig$groupViewHelper, selectedPks, group)
				},
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$autoNewGroupsField = F3(
	function (msgs, groups, model) {
		return _monty5811$apostello$Forms_View$multiSelectField(
			A7(
				_monty5811$apostello$Forms_View$MultiSelectField,
				groups,
				_elm_lang$core$Maybe$Just(model.auto_add_new_groups),
				_elm_lang$core$Maybe$Just(model.auto_add_new_groups),
				model.groupsFilter,
				function (_p16) {
					return msgs.form(
						_monty5811$apostello$Pages_Forms_SiteConfig$UpdateGroupsFilter(_p16));
				},
				_monty5811$apostello$Pages_Forms_SiteConfig$groupView(msgs),
				_monty5811$apostello$Pages_Forms_SiteConfig$groupLabelView(msgs)));
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateOfficeEmailField = function (a) {
	return {ctor: 'UpdateOfficeEmailField', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$officeEmailField = F2(
	function (msgs, model) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			_elm_lang$core$Maybe$Just(model.office_email),
			function (_p17) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateOfficeEmailField(_p17));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateDisableLoginEmailField = {ctor: 'UpdateDisableLoginEmailField'};
var _monty5811$apostello$Pages_Forms_SiteConfig$emailLoginField = F2(
	function (msgs, model) {
		return A3(
			_monty5811$apostello$Forms_View$checkboxField,
			_elm_lang$core$Maybe$Just(model),
			function (_) {
				return _.disable_email_login_form;
			},
			function (_p18) {
				return msgs.form(_monty5811$apostello$Pages_Forms_SiteConfig$UpdateDisableLoginEmailField);
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateDisableRepliesField = {ctor: 'UpdateDisableRepliesField'};
var _monty5811$apostello$Pages_Forms_SiteConfig$allRepliesField = F2(
	function (msgs, model) {
		return A3(
			_monty5811$apostello$Forms_View$checkboxField,
			_elm_lang$core$Maybe$Just(model),
			function (_) {
				return _.disable_all_replies;
			},
			function (_p19) {
				return msgs.form(_monty5811$apostello$Pages_Forms_SiteConfig$UpdateDisableRepliesField);
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateDefaultPrefixField = function (a) {
	return {ctor: 'UpdateDefaultPrefixField', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$defaultPrefixField = F2(
	function (msgs, model) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			_elm_lang$core$Maybe$Just(model.default_number_prefix),
			function (_p20) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateDefaultPrefixField(_p20));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateSmsCharLimitField = function (a) {
	return {ctor: 'UpdateSmsCharLimitField', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$smsLimitField = F2(
	function (msgs, model) {
		return A2(
			_monty5811$apostello$Forms_View$simpleIntField,
			_elm_lang$core$Maybe$Just(model.sms_char_limit),
			function (_p21) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateSmsCharLimitField(_p21));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateSiteNameField = function (a) {
	return {ctor: 'UpdateSiteNameField', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$siteNameField = F2(
	function (msgs, model) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			_elm_lang$core$Maybe$Just(model.site_name),
			function (_p22) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateSiteNameField(_p22));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateTwilioSendCost = function (a) {
	return {ctor: 'UpdateTwilioSendCost', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$twilioSendCostField = F2(
	function (msgs, model) {
		return A2(
			_monty5811$apostello$Forms_View$simpleFloatField,
			model.twilio_sending_cost,
			function (_p23) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateTwilioSendCost(_p23));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateTwilioAuthToken = function (a) {
	return {ctor: 'UpdateTwilioAuthToken', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$twilioAuthTokenField = F2(
	function (msgs, model) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			model.twilio_auth_token,
			function (_p24) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateTwilioAuthToken(_p24));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateTwilioSid = function (a) {
	return {ctor: 'UpdateTwilioSid', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$twilioAccountSidField = F2(
	function (msgs, model) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			model.twilio_account_sid,
			function (_p25) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateTwilioSid(_p25));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$UpdateTwilioFromNum = function (a) {
	return {ctor: 'UpdateTwilioFromNum', _0: a};
};
var _monty5811$apostello$Pages_Forms_SiteConfig$twilioFromNumField = F2(
	function (msgs, model) {
		return A2(
			_monty5811$apostello$Forms_View$simpleTextField,
			model.twilio_from_num,
			function (_p26) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_SiteConfig$UpdateTwilioFromNum(_p26));
			});
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$fieldsHelp = F3(
	function (msgs, groups, model) {
		return {
			ctor: '::',
			_0: A2(
				_monty5811$apostello$Forms_Model$FieldGroup,
				_elm_lang$core$Native_Utils.update(
					_monty5811$apostello$Forms_Model$defaultFieldGroupConfig,
					{
						header: _elm_lang$core$Maybe$Just('Twilio Settings'),
						sideBySide: _elm_lang$core$Maybe$Just(2),
						helpText: _elm_lang$core$Maybe$Just(_monty5811$apostello$Pages_Forms_SiteConfig$debugHelpText)
					}),
				{
					ctor: '::',
					_0: A2(
						_monty5811$apostello$Forms_Model$Field,
						_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.twilio_from_num,
						A2(_monty5811$apostello$Pages_Forms_SiteConfig$twilioFromNumField, msgs, model)),
					_1: {
						ctor: '::',
						_0: A2(
							_monty5811$apostello$Forms_Model$Field,
							_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.twilio_sending_cost,
							A2(_monty5811$apostello$Pages_Forms_SiteConfig$twilioSendCostField, msgs, model)),
						_1: {
							ctor: '::',
							_0: A2(
								_monty5811$apostello$Forms_Model$Field,
								_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.twilio_account_sid,
								A2(_monty5811$apostello$Pages_Forms_SiteConfig$twilioAccountSidField, msgs, model)),
							_1: {
								ctor: '::',
								_0: A2(
									_monty5811$apostello$Forms_Model$Field,
									_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.twilio_auth_token,
									A2(_monty5811$apostello$Pages_Forms_SiteConfig$twilioAuthTokenField, msgs, model)),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_monty5811$apostello$Forms_Model$FieldGroup,
					_elm_lang$core$Native_Utils.update(
						_monty5811$apostello$Forms_Model$defaultFieldGroupConfig,
						{
							header: _elm_lang$core$Maybe$Just('Site Settings')
						}),
					{
						ctor: '::',
						_0: A2(
							_monty5811$apostello$Forms_Model$Field,
							_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.site_name,
							A2(_monty5811$apostello$Pages_Forms_SiteConfig$siteNameField, msgs, model)),
						_1: {
							ctor: '::',
							_0: A2(
								_monty5811$apostello$Forms_Model$Field,
								_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.disable_email_login_form,
								A2(_monty5811$apostello$Pages_Forms_SiteConfig$emailLoginField, msgs, model)),
							_1: {
								ctor: '::',
								_0: A2(
									_monty5811$apostello$Forms_Model$Field,
									_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.not_approved_msg,
									A2(_monty5811$apostello$Pages_Forms_SiteConfig$notAppField, msgs, model)),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_monty5811$apostello$Forms_Model$FieldGroup,
						_elm_lang$core$Native_Utils.update(
							_monty5811$apostello$Forms_Model$defaultFieldGroupConfig,
							{
								header: _elm_lang$core$Maybe$Just('SMS Settings')
							}),
						{
							ctor: '::',
							_0: A2(
								_monty5811$apostello$Forms_Model$Field,
								_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.sms_char_limit,
								A2(_monty5811$apostello$Pages_Forms_SiteConfig$smsLimitField, msgs, model)),
							_1: {
								ctor: '::',
								_0: A2(
									_monty5811$apostello$Forms_Model$Field,
									_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.default_number_prefix,
									A2(_monty5811$apostello$Pages_Forms_SiteConfig$defaultPrefixField, msgs, model)),
								_1: {
									ctor: '::',
									_0: A2(
										_monty5811$apostello$Forms_Model$Field,
										_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.disable_all_replies,
										A2(_monty5811$apostello$Pages_Forms_SiteConfig$allRepliesField, msgs, model)),
									_1: {
										ctor: '::',
										_0: A2(
											_monty5811$apostello$Forms_Model$Field,
											_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.auto_add_new_groups,
											A3(_monty5811$apostello$Pages_Forms_SiteConfig$autoNewGroupsField, msgs, groups, model)),
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_monty5811$apostello$Forms_Model$FieldGroup,
							_elm_lang$core$Native_Utils.update(
								_monty5811$apostello$Forms_Model$defaultFieldGroupConfig,
								{
									header: _elm_lang$core$Maybe$Just('SMS Expiration'),
									sideBySide: _elm_lang$core$Maybe$Just(2)
								}),
							{
								ctor: '::',
								_0: A2(
									_monty5811$apostello$Forms_Model$Field,
									_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.sms_expiration_date,
									A2(_monty5811$apostello$Pages_Forms_SiteConfig$smsExpirationDateField, msgs, model)),
								_1: {
									ctor: '::',
									_0: A2(
										_monty5811$apostello$Forms_Model$Field,
										_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.sms_rolling_expiration_days,
										A2(_monty5811$apostello$Pages_Forms_SiteConfig$smsRollingExpireField, msgs, model)),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_monty5811$apostello$Forms_Model$FieldGroup,
								_elm_lang$core$Native_Utils.update(
									_monty5811$apostello$Forms_Model$defaultFieldGroupConfig,
									{
										header: _elm_lang$core$Maybe$Just('Notification Settings')
									}),
								{
									ctor: '::',
									_0: A2(
										_monty5811$apostello$Forms_Model$Field,
										_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.office_email,
										A2(_monty5811$apostello$Pages_Forms_SiteConfig$officeEmailField, msgs, model)),
									_1: {
										ctor: '::',
										_0: A2(
											_monty5811$apostello$Forms_Model$Field,
											_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.slack_url,
											A2(_monty5811$apostello$Pages_Forms_SiteConfig$slackField, msgs, model)),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_monty5811$apostello$Forms_Model$FieldGroup,
									_elm_lang$core$Native_Utils.update(
										_monty5811$apostello$Forms_Model$defaultFieldGroupConfig,
										{
											header: _elm_lang$core$Maybe$Just('Sending Email Settings'),
											sideBySide: _elm_lang$core$Maybe$Just(2),
											helpText: _elm_lang$core$Maybe$Just(_monty5811$apostello$Pages_Forms_SiteConfig$debugHelpText)
										}),
									{
										ctor: '::',
										_0: A2(
											_monty5811$apostello$Forms_Model$Field,
											_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.email_host,
											A2(_monty5811$apostello$Pages_Forms_SiteConfig$emailHostField, msgs, model)),
										_1: {
											ctor: '::',
											_0: A2(
												_monty5811$apostello$Forms_Model$Field,
												_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.email_port,
												A2(_monty5811$apostello$Pages_Forms_SiteConfig$emailPortField, msgs, model)),
											_1: {
												ctor: '::',
												_0: A2(
													_monty5811$apostello$Forms_Model$Field,
													_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.email_username,
													A2(_monty5811$apostello$Pages_Forms_SiteConfig$emailUserField, msgs, model)),
												_1: {
													ctor: '::',
													_0: A2(
														_monty5811$apostello$Forms_Model$Field,
														_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.email_password,
														A2(_monty5811$apostello$Pages_Forms_SiteConfig$emailPassField, msgs, model)),
													_1: {
														ctor: '::',
														_0: A2(
															_monty5811$apostello$Forms_Model$Field,
															_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.email_from,
															A2(_monty5811$apostello$Pages_Forms_SiteConfig$emailFromField, msgs, model)),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_monty5811$apostello$Forms_Model$FieldGroup,
										_elm_lang$core$Native_Utils.update(
											_monty5811$apostello$Forms_Model$defaultFieldGroupConfig,
											{
												header: _elm_lang$core$Maybe$Just('Sync Settings')
											}),
										{
											ctor: '::',
											_0: A2(
												_monty5811$apostello$Forms_Model$Field,
												_monty5811$apostello$Pages_Forms_Meta_SiteConfig$meta.sync_elvanto,
												A2(_monty5811$apostello$Pages_Forms_SiteConfig$syncElvField, msgs, model)),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		};
	});
var _monty5811$apostello$Pages_Forms_SiteConfig$view = F4(
	function (msgs, groups, maybeModel, status) {
		var _p27 = maybeModel;
		if (_p27.ctor === 'Nothing') {
			return _monty5811$apostello$Pages_Fragments_Loader$loader;
		} else {
			return A4(
				_monty5811$apostello$Forms_View$form,
				status,
				A3(_monty5811$apostello$Pages_Forms_SiteConfig$fieldsHelp, msgs, groups, _p27._0),
				msgs.postForm,
				A2(_monty5811$apostello$Forms_View$submitButton, maybeModel, false));
		}
	});

var _monty5811$apostello$Pages_Forms_Meta_UserProfile$meta = {
	approved: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		false,
		'id_approved',
		'approved',
		'Approved',
		_elm_lang$core$Maybe$Just('This must be true to grant users access to the site.')),
	message_cost_limit: A5(
		_monty5811$apostello$Forms_Model$FieldMeta,
		true,
		'id_message_cost_limit',
		'message_cost_limit',
		'Message cost limit',
		_elm_lang$core$Maybe$Just('Amount in USD that this user can spend on a single SMS. Note that this is a sanity check, not a security measure - There are no rate limits. If you do not trust a user, revoke their ability to send SMS. Set to zero to disable limit.')),
	can_see_groups: A5(_monty5811$apostello$Forms_Model$FieldMeta, false, 'id_can_see_groups', 'can_see_groups', 'Can see groups', _elm_lang$core$Maybe$Nothing),
	can_see_contact_names: A5(_monty5811$apostello$Forms_Model$FieldMeta, false, 'id_can_see_contact_names', 'can_see_contact_names', 'Can see contact names', _elm_lang$core$Maybe$Nothing),
	can_see_keywords: A5(_monty5811$apostello$Forms_Model$FieldMeta, false, 'id_can_see_keywords', 'can_see_keywords', 'Can see keywords', _elm_lang$core$Maybe$Nothing),
	can_see_outgoing: A5(_monty5811$apostello$Forms_Model$FieldMeta, false, 'id_can_see_outgoing', 'can_see_outgoing', 'Can see outgoing', _elm_lang$core$Maybe$Nothing),
	can_see_incoming: A5(_monty5811$apostello$Forms_Model$FieldMeta, false, 'id_can_see_incoming', 'can_see_incoming', 'Can see incoming', _elm_lang$core$Maybe$Nothing),
	can_send_sms: A5(_monty5811$apostello$Forms_Model$FieldMeta, false, 'id_can_send_sms', 'can_send_sms', 'Can send sms', _elm_lang$core$Maybe$Nothing),
	can_see_contact_nums: A5(_monty5811$apostello$Forms_Model$FieldMeta, false, 'id_can_see_contact_nums', 'can_see_contact_nums', 'Can see contact nums', _elm_lang$core$Maybe$Nothing),
	can_see_contact_notes: A5(_monty5811$apostello$Forms_Model$FieldMeta, false, 'id_can_see_contact_notes', 'can_see_contact_notes', 'Can see contact notes', _elm_lang$core$Maybe$Nothing),
	can_import: A5(_monty5811$apostello$Forms_Model$FieldMeta, false, 'id_can_import', 'can_import', 'Can import', _elm_lang$core$Maybe$Nothing),
	can_archive: A5(_monty5811$apostello$Forms_Model$FieldMeta, false, 'id_can_archive', 'can_archive', 'Can archive', _elm_lang$core$Maybe$Nothing)
};

var _monty5811$apostello$Pages_Forms_UserProfile$getNewBool = F2(
	function (modelVal, profileVal) {
		var _p0 = modelVal;
		if (_p0.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(!_p0._0);
		} else {
			return A2(_elm_lang$core$Maybe$map, _elm_lang$core$Basics$not, profileVal);
		}
	});
var _monty5811$apostello$Pages_Forms_UserProfile$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'UpdateApproved':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						approved: A2(
							_monty5811$apostello$Pages_Forms_UserProfile$getNewBool,
							model.approved,
							A2(
								_elm_lang$core$Maybe$map,
								function (_) {
									return _.approved;
								},
								_p1._0))
					});
			case 'UpdateCanSeeGroups':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						can_see_groups: A2(
							_monty5811$apostello$Pages_Forms_UserProfile$getNewBool,
							model.can_see_groups,
							A2(
								_elm_lang$core$Maybe$map,
								function (_) {
									return _.can_see_groups;
								},
								_p1._0))
					});
			case 'UpdateCanSeeContactNames':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						can_see_contact_names: A2(
							_monty5811$apostello$Pages_Forms_UserProfile$getNewBool,
							model.can_see_contact_names,
							A2(
								_elm_lang$core$Maybe$map,
								function (_) {
									return _.can_see_contact_names;
								},
								_p1._0))
					});
			case 'UpdateCanSeeKeywords':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						can_see_keywords: A2(
							_monty5811$apostello$Pages_Forms_UserProfile$getNewBool,
							model.can_see_keywords,
							A2(
								_elm_lang$core$Maybe$map,
								function (_) {
									return _.can_see_keywords;
								},
								_p1._0))
					});
			case 'UpdateCanSeeOutgoing':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						can_see_outgoing: A2(
							_monty5811$apostello$Pages_Forms_UserProfile$getNewBool,
							model.can_see_outgoing,
							A2(
								_elm_lang$core$Maybe$map,
								function (_) {
									return _.can_see_outgoing;
								},
								_p1._0))
					});
			case 'UpdateCanSeeIncoming':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						can_see_incoming: A2(
							_monty5811$apostello$Pages_Forms_UserProfile$getNewBool,
							model.can_see_incoming,
							A2(
								_elm_lang$core$Maybe$map,
								function (_) {
									return _.can_see_incoming;
								},
								_p1._0))
					});
			case 'UpdateCanSendSms':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						can_send_sms: A2(
							_monty5811$apostello$Pages_Forms_UserProfile$getNewBool,
							model.can_send_sms,
							A2(
								_elm_lang$core$Maybe$map,
								function (_) {
									return _.can_send_sms;
								},
								_p1._0))
					});
			case 'UpdateCanSeeContactNums':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						can_see_contact_nums: A2(
							_monty5811$apostello$Pages_Forms_UserProfile$getNewBool,
							model.can_see_contact_nums,
							A2(
								_elm_lang$core$Maybe$map,
								function (_) {
									return _.can_see_contact_nums;
								},
								_p1._0))
					});
			case 'UpdateCanSeeContactNotes':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						can_see_contact_notes: A2(
							_monty5811$apostello$Pages_Forms_UserProfile$getNewBool,
							model.can_see_contact_notes,
							A2(
								_elm_lang$core$Maybe$map,
								function (_) {
									return _.can_see_contact_nums;
								},
								_p1._0))
					});
			case 'UpdateCanImport':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						can_import: A2(
							_monty5811$apostello$Pages_Forms_UserProfile$getNewBool,
							model.can_import,
							A2(
								_elm_lang$core$Maybe$map,
								function (_) {
									return _.can_import;
								},
								_p1._0))
					});
			case 'UpdateCanArchive':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						can_archive: A2(
							_monty5811$apostello$Pages_Forms_UserProfile$getNewBool,
							model.can_archive,
							A2(
								_elm_lang$core$Maybe$map,
								function (_) {
									return _.can_archive;
								},
								_p1._0))
					});
			default:
				var _p2 = _elm_lang$core$String$toFloat(_p1._0);
				if (_p2.ctor === 'Ok') {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							message_cost_limit: _elm_lang$core$Maybe$Just(_p2._0)
						});
				} else {
					return model;
				}
		}
	});
var _monty5811$apostello$Pages_Forms_UserProfile$initialModel = {approved: _elm_lang$core$Maybe$Nothing, message_cost_limit: _elm_lang$core$Maybe$Nothing, can_see_groups: _elm_lang$core$Maybe$Nothing, can_see_contact_names: _elm_lang$core$Maybe$Nothing, can_see_keywords: _elm_lang$core$Maybe$Nothing, can_see_outgoing: _elm_lang$core$Maybe$Nothing, can_see_incoming: _elm_lang$core$Maybe$Nothing, can_send_sms: _elm_lang$core$Maybe$Nothing, can_see_contact_nums: _elm_lang$core$Maybe$Nothing, can_see_contact_notes: _elm_lang$core$Maybe$Nothing, can_import: _elm_lang$core$Maybe$Nothing, can_archive: _elm_lang$core$Maybe$Nothing};
var _monty5811$apostello$Pages_Forms_UserProfile$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return {approved: a, message_cost_limit: b, can_see_groups: c, can_see_contact_names: d, can_see_keywords: e, can_see_outgoing: f, can_see_incoming: g, can_send_sms: h, can_see_contact_nums: i, can_see_contact_notes: j, can_import: k, can_archive: l};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _monty5811$apostello$Pages_Forms_UserProfile$Messages = F2(
	function (a, b) {
		return {form: a, postForm: b};
	});
var _monty5811$apostello$Pages_Forms_UserProfile$UpdateCanArchive = function (a) {
	return {ctor: 'UpdateCanArchive', _0: a};
};
var _monty5811$apostello$Pages_Forms_UserProfile$UpdateCanImport = function (a) {
	return {ctor: 'UpdateCanImport', _0: a};
};
var _monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSeeContactNotes = function (a) {
	return {ctor: 'UpdateCanSeeContactNotes', _0: a};
};
var _monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSeeContactNums = function (a) {
	return {ctor: 'UpdateCanSeeContactNums', _0: a};
};
var _monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSendSms = function (a) {
	return {ctor: 'UpdateCanSendSms', _0: a};
};
var _monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSeeIncoming = function (a) {
	return {ctor: 'UpdateCanSeeIncoming', _0: a};
};
var _monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSeeOutgoing = function (a) {
	return {ctor: 'UpdateCanSeeOutgoing', _0: a};
};
var _monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSeeKeywords = function (a) {
	return {ctor: 'UpdateCanSeeKeywords', _0: a};
};
var _monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSeeContactNames = function (a) {
	return {ctor: 'UpdateCanSeeContactNames', _0: a};
};
var _monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSeeGroups = function (a) {
	return {ctor: 'UpdateCanSeeGroups', _0: a};
};
var _monty5811$apostello$Pages_Forms_UserProfile$UpdateMessageCostLimit = function (a) {
	return {ctor: 'UpdateMessageCostLimit', _0: a};
};
var _monty5811$apostello$Pages_Forms_UserProfile$UpdateApproved = function (a) {
	return {ctor: 'UpdateApproved', _0: a};
};
var _monty5811$apostello$Pages_Forms_UserProfile$approvedField = F3(
	function (msgs, profile, fieldMeta) {
		return A4(
			_monty5811$apostello$Forms_View$checkboxField,
			_elm_lang$core$Maybe$Just(profile),
			function (_) {
				return _.approved;
			},
			function (_p3) {
				return msgs.form(
					_monty5811$apostello$Pages_Forms_UserProfile$UpdateApproved(_p3));
			},
			fieldMeta);
	});
var _monty5811$apostello$Pages_Forms_UserProfile$viewHelp = F4(
	function (msgs, model, status, profile) {
		var fields = A2(
			_elm_lang$core$List$map,
			_monty5811$apostello$Forms_Model$FormField,
			{
				ctor: '::',
				_0: A2(
					_monty5811$apostello$Forms_Model$Field,
					_monty5811$apostello$Pages_Forms_Meta_UserProfile$meta.approved,
					A2(_monty5811$apostello$Pages_Forms_UserProfile$approvedField, msgs, profile)),
				_1: {
					ctor: '::',
					_0: A2(
						_monty5811$apostello$Forms_Model$Field,
						_monty5811$apostello$Pages_Forms_Meta_UserProfile$meta.message_cost_limit,
						A2(
							_monty5811$apostello$Forms_View$simpleFloatField,
							_elm_lang$core$Maybe$Just(profile.message_cost_limit),
							function (_p4) {
								return msgs.form(
									_monty5811$apostello$Pages_Forms_UserProfile$UpdateMessageCostLimit(_p4));
							})),
					_1: {
						ctor: '::',
						_0: A2(
							_monty5811$apostello$Forms_Model$Field,
							_monty5811$apostello$Pages_Forms_Meta_UserProfile$meta.can_see_groups,
							A3(
								_monty5811$apostello$Forms_View$checkboxField,
								_elm_lang$core$Maybe$Just(profile),
								function (_) {
									return _.can_see_groups;
								},
								function (_p5) {
									return msgs.form(
										_monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSeeGroups(_p5));
								})),
						_1: {
							ctor: '::',
							_0: A2(
								_monty5811$apostello$Forms_Model$Field,
								_monty5811$apostello$Pages_Forms_Meta_UserProfile$meta.can_see_contact_names,
								A3(
									_monty5811$apostello$Forms_View$checkboxField,
									_elm_lang$core$Maybe$Just(profile),
									function (_) {
										return _.can_see_contact_names;
									},
									function (_p6) {
										return msgs.form(
											_monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSeeContactNames(_p6));
									})),
							_1: {
								ctor: '::',
								_0: A2(
									_monty5811$apostello$Forms_Model$Field,
									_monty5811$apostello$Pages_Forms_Meta_UserProfile$meta.can_see_keywords,
									A3(
										_monty5811$apostello$Forms_View$checkboxField,
										_elm_lang$core$Maybe$Just(profile),
										function (_) {
											return _.can_see_keywords;
										},
										function (_p7) {
											return msgs.form(
												_monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSeeKeywords(_p7));
										})),
								_1: {
									ctor: '::',
									_0: A2(
										_monty5811$apostello$Forms_Model$Field,
										_monty5811$apostello$Pages_Forms_Meta_UserProfile$meta.can_see_outgoing,
										A3(
											_monty5811$apostello$Forms_View$checkboxField,
											_elm_lang$core$Maybe$Just(profile),
											function (_) {
												return _.can_see_outgoing;
											},
											function (_p8) {
												return msgs.form(
													_monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSeeOutgoing(_p8));
											})),
									_1: {
										ctor: '::',
										_0: A2(
											_monty5811$apostello$Forms_Model$Field,
											_monty5811$apostello$Pages_Forms_Meta_UserProfile$meta.can_see_incoming,
											A3(
												_monty5811$apostello$Forms_View$checkboxField,
												_elm_lang$core$Maybe$Just(profile),
												function (_) {
													return _.can_see_incoming;
												},
												function (_p9) {
													return msgs.form(
														_monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSeeIncoming(_p9));
												})),
										_1: {
											ctor: '::',
											_0: A2(
												_monty5811$apostello$Forms_Model$Field,
												_monty5811$apostello$Pages_Forms_Meta_UserProfile$meta.can_send_sms,
												A3(
													_monty5811$apostello$Forms_View$checkboxField,
													_elm_lang$core$Maybe$Just(profile),
													function (_) {
														return _.can_send_sms;
													},
													function (_p10) {
														return msgs.form(
															_monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSendSms(_p10));
													})),
											_1: {
												ctor: '::',
												_0: A2(
													_monty5811$apostello$Forms_Model$Field,
													_monty5811$apostello$Pages_Forms_Meta_UserProfile$meta.can_see_contact_nums,
													A3(
														_monty5811$apostello$Forms_View$checkboxField,
														_elm_lang$core$Maybe$Just(profile),
														function (_) {
															return _.can_see_contact_nums;
														},
														function (_p11) {
															return msgs.form(
																_monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSeeContactNums(_p11));
														})),
												_1: {
													ctor: '::',
													_0: A2(
														_monty5811$apostello$Forms_Model$Field,
														_monty5811$apostello$Pages_Forms_Meta_UserProfile$meta.can_see_contact_notes,
														A3(
															_monty5811$apostello$Forms_View$checkboxField,
															_elm_lang$core$Maybe$Just(profile),
															function (_) {
																return _.can_see_contact_notes;
															},
															function (_p12) {
																return msgs.form(
																	_monty5811$apostello$Pages_Forms_UserProfile$UpdateCanSeeContactNotes(_p12));
															})),
													_1: {
														ctor: '::',
														_0: A2(
															_monty5811$apostello$Forms_Model$Field,
															_monty5811$apostello$Pages_Forms_Meta_UserProfile$meta.can_import,
															A3(
																_monty5811$apostello$Forms_View$checkboxField,
																_elm_lang$core$Maybe$Just(profile),
																function (_) {
																	return _.can_import;
																},
																function (_p13) {
																	return msgs.form(
																		_monty5811$apostello$Pages_Forms_UserProfile$UpdateCanImport(_p13));
																})),
														_1: {
															ctor: '::',
															_0: A2(
																_monty5811$apostello$Forms_Model$Field,
																_monty5811$apostello$Pages_Forms_Meta_UserProfile$meta.can_archive,
																A3(
																	_monty5811$apostello$Forms_View$checkboxField,
																	_elm_lang$core$Maybe$Just(profile),
																	function (_) {
																		return _.can_archive;
																	},
																	function (_p14) {
																		return msgs.form(
																			_monty5811$apostello$Pages_Forms_UserProfile$UpdateCanArchive(_p14));
																	})),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			});
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h3,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(_elm_lang$core$Basics_ops['++'], 'User Profile: ', profile.user.email)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A4(
						_monty5811$apostello$Forms_View$form,
						status,
						fields,
						msgs.postForm,
						A2(
							_monty5811$apostello$Forms_View$submitButton,
							_elm_lang$core$Maybe$Just(profile),
							false)),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_Forms_UserProfile$view = F5(
	function (msgs, pk, profiles_, model, status) {
		var profiles = _monty5811$remote_list$RemoteList$toList(profiles_);
		var currentProfile = _elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$filter,
				function (x) {
					return _elm_lang$core$Native_Utils.eq(x.user.pk, pk);
				},
				profiles));
		var _p15 = currentProfile;
		if (_p15.ctor === 'Nothing') {
			return _monty5811$apostello$Pages_Fragments_Loader$loader;
		} else {
			return A4(_monty5811$apostello$Pages_Forms_UserProfile$viewHelp, msgs, model, status, _p15._0);
		}
	});

var _monty5811$apostello$Pages_GroupComposer$isNothing = function (x) {
	var _p0 = x;
	if (_p0.ctor === 'Just') {
		return false;
	} else {
		return true;
	}
};
var _monty5811$apostello$Pages_GroupComposer$getMembers = F2(
	function (groups, gPk) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.pk;
				},
				function (_) {
					return _.members;
				}(
					A2(
						_elm_lang$core$Maybe$withDefault,
						_monty5811$apostello$Data$nullGroup,
						_elm_lang$core$List$head(
							A2(
								_elm_lang$core$List$filter,
								function (x) {
									return _elm_lang$core$Native_Utils.eq(x.pk, gPk);
								},
								groups))))));
	});
var _monty5811$apostello$Pages_GroupComposer$selectGroups = function (queryString) {
	return A2(
		_elm_lang$core$List$map,
		function (_p1) {
			return A2(
				_elm_lang$core$Result$withDefault,
				0,
				_elm_lang$core$String$toInt(
					function (_) {
						return _.match;
					}(_p1)));
		},
		A3(
			_elm_lang$core$Regex$find,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('\\d+'),
			queryString));
};
var _monty5811$apostello$Pages_GroupComposer$updateMatchedLoc = F4(
	function (bracketIndex, nothingIndex, mapIndex, t) {
		var _p2 = nothingIndex;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Native_Utils.eq(_p2._0, mapIndex) ? _elm_lang$core$Native_Utils.update(
				t,
				{
					close: _elm_lang$core$Maybe$Just(bracketIndex)
				}) : t;
		} else {
			return t;
		}
	});
var _monty5811$apostello$Pages_GroupComposer$replaceLastNothing = F2(
	function (res, bracketIndex) {
		var resIndex = _elm_lang$core$List$maximum(
			A2(
				_elm_community$list_extra$List_Extra$findIndices,
				function (x) {
					return _monty5811$apostello$Pages_GroupComposer$isNothing(x.close);
				},
				res));
		return A2(
			_elm_lang$core$List$indexedMap,
			A2(_monty5811$apostello$Pages_GroupComposer$updateMatchedLoc, bracketIndex, resIndex),
			res);
	});
var _monty5811$apostello$Pages_GroupComposer$shouldKeepHelp = F3(
	function (left, right, _p3) {
		var _p4 = _p3;
		var _p5 = _p4._0;
		return ((_elm_lang$core$Native_Utils.cmp(_p5, left) > -1) && (_elm_lang$core$Native_Utils.cmp(_p5, right) < 0)) ? _elm_lang$core$Maybe$Just(_p4._1) : _elm_lang$core$Maybe$Nothing;
	});
var _monty5811$apostello$Pages_GroupComposer$slice = F3(
	function (left, right, list) {
		return A2(
			_elm_lang$core$List$filterMap,
			A2(_monty5811$apostello$Pages_GroupComposer$shouldKeepHelp, left, right),
			A2(
				_elm_lang$core$List$indexedMap,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				list));
	});
var _monty5811$apostello$Pages_GroupComposer$replaceOp = F4(
	function (left, right, op, query) {
		var rhs = A3(
			_monty5811$apostello$Pages_GroupComposer$slice,
			right + 1,
			_elm_lang$core$List$length(query),
			query);
		var lhs = A3(_monty5811$apostello$Pages_GroupComposer$slice, 0, left, query);
		return _elm_lang$core$List$concat(
			{
				ctor: '::',
				_0: lhs,
				_1: {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: op,
						_1: {ctor: '[]'}
					},
					_1: {
						ctor: '::',
						_0: rhs,
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _monty5811$apostello$Pages_GroupComposer$evenPairs = function (locs) {
	return A2(
		_elm_lang$core$List$all,
		function (x) {
			return !_monty5811$apostello$Pages_GroupComposer$isNothing(x.close);
		},
		locs);
};
var _monty5811$apostello$Pages_GroupComposer$applyOperator = F3(
	function (opL, opR, existingPeople) {
		var newPeople = function () {
			var _p6 = opR;
			if (_p6.ctor === 'G') {
				return _p6._0;
			} else {
				return _elm_lang$core$Set$empty;
			}
		}();
		var _p7 = opL;
		switch (_p7.ctor) {
			case 'Union':
				return A2(_elm_lang$core$Set$union, existingPeople, newPeople);
			case 'Intersect':
				return A2(_elm_lang$core$Set$intersect, existingPeople, newPeople);
			case 'Diff':
				return A2(_elm_lang$core$Set$diff, existingPeople, newPeople);
			default:
				return existingPeople;
		}
	});
var _monty5811$apostello$Pages_GroupComposer$helpView = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h2,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Group Composer'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('You can use this tool to \"compose\" an adhoc group.'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Enter a query in the box below. E.g. \"1|2\" would result in a group made up of everyone in group 1 as well as everyone in group 2.'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('There are 3 operators available:'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$ul,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$li,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$b,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('|'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(' : Keep all members (union)'),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$li,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$b,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('+'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html$text(' : Keep members that are in both (intersect)'),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$li,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$b,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('-'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html$text(' : Keep member that do not exist on right hand side (diff)'),
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('The operators are applied from left to right. Use brackets to build more complex queries.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('The best thing to do is experiment and use the live preview.'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _monty5811$apostello$Pages_GroupComposer$groupLink = F2(
	function (props, people) {
		return _elm_lang$core$List$isEmpty(people) ? A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'}) : props.groupLink(
			_elm_lang$core$Maybe$Just(
				A2(
					_elm_lang$core$List$map,
					function (_) {
						return _.pk;
					},
					people)));
	});
var _monty5811$apostello$Pages_GroupComposer$personRow = function (person) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('item'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(person.full_name),
			_1: {ctor: '[]'}
		});
};
var _monty5811$apostello$Pages_GroupComposer$groupPreview = F2(
	function (props, people) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('segment'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h4,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Live preview'),
								_1: {
									ctor: '::',
									_0: A2(_monty5811$apostello$Pages_GroupComposer$groupLink, props, people),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('list'),
									_1: {ctor: '[]'}
								},
								A2(_elm_lang$core$List$map, _monty5811$apostello$Pages_GroupComposer$personRow, people)),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_GroupComposer$activeGroupStyle = F2(
	function (activeGroupPks, group) {
		var _p8 = A2(_elm_lang$core$List$member, group.pk, activeGroupPks);
		if (_p8 === true) {
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'color', _1: '#38AF3C'},
				_1: {ctor: '[]'}
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _monty5811$apostello$Pages_GroupComposer$groupRow = F2(
	function (activeGroupPks, group) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						A2(_monty5811$apostello$Pages_GroupComposer$activeGroupStyle, activeGroupPks, group)),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('groupRow'),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('float-right'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(group.pk)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(group.name),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_GroupComposer$groupsList = F3(
	function (props, groups, activeGroupPks) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('segment'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h4,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Groups'),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('button float-right'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(props.loadData),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$id('refreshButton'),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Refresh'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('list'),
										_1: {ctor: '[]'}
									},
									A2(
										_elm_lang$core$List$map,
										_monty5811$apostello$Pages_GroupComposer$groupRow(activeGroupPks),
										groups)),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_GroupComposer$dataView = F4(
	function (props, groups, people, activeGroupPks) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'display', _1: 'grid'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'grid-template-columns', _1: '50% 50%'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A3(_monty5811$apostello$Pages_GroupComposer$groupsList, props, groups, activeGroupPks),
				_1: {
					ctor: '::',
					_0: A2(_monty5811$apostello$Pages_GroupComposer$groupPreview, props, people),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_GroupComposer$collectPeople = function (groups) {
	return A2(
		_elm_lang$core$List$sortBy,
		function (_) {
			return _.full_name;
		},
		A2(
			_elm_community$list_extra$List_Extra$uniqueBy,
			function (_) {
				return _.pk;
			},
			A2(
				_elm_lang$core$List$concatMap,
				function (x) {
					return x.members;
				},
				groups)));
};
var _monty5811$apostello$Pages_GroupComposer$update = function (_p9) {
	var _p10 = _p9;
	return _elm_lang$core$Maybe$Just(_p10._0);
};
var _monty5811$apostello$Pages_GroupComposer$initialModel = _elm_lang$core$Maybe$Nothing;
var _monty5811$apostello$Pages_GroupComposer$ParenLoc = F2(
	function (a, b) {
		return {open: a, close: b};
	});
var _monty5811$apostello$Pages_GroupComposer$parenPairs = F5(
	function (maxL, query, idx, depth, res) {
		parenPairs:
		while (true) {
			var nextI = idx + 1;
			if (_elm_lang$core$Native_Utils.cmp(idx, maxL) > 0) {
				return res;
			} else {
				var _p11 = query;
				if (_p11.ctor === '::') {
					switch (_p11._0.ctor) {
						case 'OpenBracket':
							var _v8 = maxL,
								_v9 = _p11._1,
								_v10 = nextI,
								_v11 = depth + 1,
								_v12 = A2(
								_elm_lang$core$List$append,
								res,
								{
									ctor: '::',
									_0: A2(
										_monty5811$apostello$Pages_GroupComposer$ParenLoc,
										_elm_lang$core$Maybe$Just(idx),
										_elm_lang$core$Maybe$Nothing),
									_1: {ctor: '[]'}
								});
							maxL = _v8;
							query = _v9;
							idx = _v10;
							depth = _v11;
							res = _v12;
							continue parenPairs;
						case 'CloseBracket':
							var _v13 = maxL,
								_v14 = _p11._1,
								_v15 = nextI,
								_v16 = depth - 1,
								_v17 = A2(_monty5811$apostello$Pages_GroupComposer$replaceLastNothing, res, idx);
							maxL = _v13;
							query = _v14;
							idx = _v15;
							depth = _v16;
							res = _v17;
							continue parenPairs;
						default:
							var _v18 = maxL,
								_v19 = _p11._1,
								_v20 = nextI,
								_v21 = depth,
								_v22 = res;
							maxL = _v18;
							query = _v19;
							idx = _v20;
							depth = _v21;
							res = _v22;
							continue parenPairs;
					}
				} else {
					return res;
				}
			}
		}
	});
var _monty5811$apostello$Pages_GroupComposer$Props = F3(
	function (a, b, c) {
		return {form: a, groupLink: b, loadData: c};
	});
var _monty5811$apostello$Pages_GroupComposer$NoOp = {ctor: 'NoOp'};
var _monty5811$apostello$Pages_GroupComposer$G = function (a) {
	return {ctor: 'G', _0: a};
};
var _monty5811$apostello$Pages_GroupComposer$decodeGroup = F2(
	function (groups, s) {
		var _p12 = _elm_lang$core$String$toInt(s);
		if (_p12.ctor === 'Ok') {
			return _monty5811$apostello$Pages_GroupComposer$G(
				A2(_monty5811$apostello$Pages_GroupComposer$getMembers, groups, _p12._0));
		} else {
			return _monty5811$apostello$Pages_GroupComposer$NoOp;
		}
	});
var _monty5811$apostello$Pages_GroupComposer$CloseBracket = {ctor: 'CloseBracket'};
var _monty5811$apostello$Pages_GroupComposer$OpenBracket = {ctor: 'OpenBracket'};
var _monty5811$apostello$Pages_GroupComposer$Diff = {ctor: 'Diff'};
var _monty5811$apostello$Pages_GroupComposer$Intersect = {ctor: 'Intersect'};
var _monty5811$apostello$Pages_GroupComposer$Union = {ctor: 'Union'};
var _monty5811$apostello$Pages_GroupComposer$replaceExpr = F2(
	function (query, pLoc) {
		var right = A2(_elm_lang$core$Maybe$withDefault, 0, pLoc.close);
		var left = A2(_elm_lang$core$Maybe$withDefault, 0, pLoc.open);
		var newExpr = _monty5811$apostello$Pages_GroupComposer$G(
			A2(
				_monty5811$apostello$Pages_GroupComposer$applyQuery,
				_elm_lang$core$Set$empty,
				A2(
					F2(
						function (x, y) {
							return A2(_elm_lang$core$Basics_ops['++'], x, y);
						}),
					{
						ctor: '::',
						_0: _monty5811$apostello$Pages_GroupComposer$Union,
						_1: {ctor: '[]'}
					},
					A3(_monty5811$apostello$Pages_GroupComposer$slice, left + 1, right, query))));
		return A4(_monty5811$apostello$Pages_GroupComposer$replaceOp, left, right, newExpr, query);
	});
var _monty5811$apostello$Pages_GroupComposer$applyQuery = F2(
	function (pks, q) {
		var _p13 = _monty5811$apostello$Pages_GroupComposer$handleBrackets(q);
		if (_p13.ctor === '::') {
			if (_p13._1.ctor === '::') {
				return A3(
					_elm_lang$core$Basics$flip,
					_monty5811$apostello$Pages_GroupComposer$applyQuery,
					_p13._1._1,
					A3(_monty5811$apostello$Pages_GroupComposer$applyOperator, _p13._0, _p13._1._0, pks));
			} else {
				return pks;
			}
		} else {
			return pks;
		}
	});
var _monty5811$apostello$Pages_GroupComposer$handleBrackets = function (query) {
	handleBrackets:
	while (true) {
		var pairs = A5(
			_monty5811$apostello$Pages_GroupComposer$parenPairs,
			_elm_lang$core$List$length(query),
			query,
			0,
			0,
			{ctor: '[]'});
		if (_monty5811$apostello$Pages_GroupComposer$evenPairs(pairs)) {
			var _p14 = pairs;
			if (_p14.ctor === '::') {
				var _v26 = A2(_monty5811$apostello$Pages_GroupComposer$replaceExpr, query, _p14._0);
				query = _v26;
				continue handleBrackets;
			} else {
				return query;
			}
		} else {
			return query;
		}
	}
};
var _monty5811$apostello$Pages_GroupComposer$parseOp = F2(
	function (groups, string) {
		var _p15 = string;
		switch (_p15) {
			case '+':
				return _monty5811$apostello$Pages_GroupComposer$Intersect;
			case '-':
				return _monty5811$apostello$Pages_GroupComposer$Diff;
			case '|':
				return _monty5811$apostello$Pages_GroupComposer$Union;
			case '(':
				return _monty5811$apostello$Pages_GroupComposer$OpenBracket;
			case ')':
				return _monty5811$apostello$Pages_GroupComposer$CloseBracket;
			default:
				return A2(_monty5811$apostello$Pages_GroupComposer$decodeGroup, groups, string);
		}
	});
var _monty5811$apostello$Pages_GroupComposer$parseQueryString = F2(
	function (groups, queryString) {
		return A2(
			_elm_lang$core$List$map,
			function (_p16) {
				return A2(
					_monty5811$apostello$Pages_GroupComposer$parseOp,
					groups,
					function (_) {
						return _.match;
					}(_p16));
			},
			A3(
				_elm_lang$core$Regex$find,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex('\\d+|\\(|\\)|-|\\+|\\|'),
				A2(_elm_lang$core$Basics_ops['++'], '|', queryString)));
	});
var _monty5811$apostello$Pages_GroupComposer$runQuery = F3(
	function (groups, people, queryString) {
		var peoplePks = A2(
			_monty5811$apostello$Pages_GroupComposer$applyQuery,
			_elm_lang$core$Set$empty,
			A2(_monty5811$apostello$Pages_GroupComposer$parseQueryString, groups, queryString));
		var result = A2(
			_elm_lang$core$List$filter,
			function (person) {
				return A2(_elm_lang$core$Set$member, person.pk, peoplePks);
			},
			people);
		var selectedGroups = _monty5811$apostello$Pages_GroupComposer$selectGroups(queryString);
		return {ctor: '_Tuple2', _0: result, _1: selectedGroups};
	});
var _monty5811$apostello$Pages_GroupComposer$UpdateQueryString = function (a) {
	return {ctor: 'UpdateQueryString', _0: a};
};
var _monty5811$apostello$Pages_GroupComposer$queryEntry = F2(
	function (props, query) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$placeholder('Query goes here: e.g. 1 + 2 - 3'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('text'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$id('queryInputBox'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(
										function (_p17) {
											return props.form(
												_monty5811$apostello$Pages_GroupComposer$UpdateQueryString(_p17));
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$value(
											A2(_elm_lang$core$Maybe$withDefault, '', query)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_GroupComposer$view = F3(
	function (props, model, groups_) {
		var groups = _monty5811$remote_list$RemoteList$toList(groups_);
		var _p18 = A3(
			_monty5811$apostello$Pages_GroupComposer$runQuery,
			groups,
			_monty5811$apostello$Pages_GroupComposer$collectPeople(groups),
			A2(_elm_lang$core$Maybe$withDefault, '', model));
		var activePeople = _p18._0;
		var activeGroupPks = _p18._1;
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _monty5811$apostello$Pages_GroupComposer$helpView,
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(_monty5811$apostello$Pages_GroupComposer$queryEntry, props, model),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A4(_monty5811$apostello$Pages_GroupComposer$dataView, props, groups, activePeople, activeGroupPks),
						_1: {ctor: '[]'}
					}
				}
			});
	});

var _monty5811$apostello$Pages_KeyRespTable$dealtWithButton = F2(
	function (props, sms) {
		var _p0 = sms.dealt_with;
		if (_p0 === true) {
			return A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('button button-success'),
					_1: {
						ctor: '::',
						_0: _monty5811$apostello$Helpers$onClick(
							A2(props.toggleDealtWith, sms.dealt_with, sms.pk)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('unDealWithButton'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$i,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('fa fa-check'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(' Dealt With'),
						_1: {ctor: '[]'}
					}
				});
		} else {
			return A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('button button-warning'),
					_1: {
						ctor: '::',
						_0: _monty5811$apostello$Helpers$onClick(
							A2(props.toggleDealtWith, sms.dealt_with, sms.pk)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('dealWithButton'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$i,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('fa fa-exclamation'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(' Requires Action'),
						_1: {ctor: '[]'}
					}
				});
		}
	});
var _monty5811$apostello$Pages_KeyRespTable$recipientCell = F2(
	function (props, sms) {
		return A2(
			_elm_lang$html$Html$td,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: props.pkToReplyLink(sms),
				_1: {
					ctor: '::',
					_0: props.pkToContactLink(sms),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_KeyRespTable$smsRow = F2(
	function (props, sms) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toString(sms.pk),
			_1: A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(_monty5811$apostello$Pages_KeyRespTable$recipientCell, props, sms),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_monty5811$apostello$Helpers$formatDate(sms.time_received)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(sms.content),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(_monty5811$apostello$Pages_KeyRespTable$dealtWithButton, props, sms),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_monty5811$apostello$Helpers$archiveCell,
										sms.is_archived,
										A2(props.toggleInboundSmsArchive, sms.is_archived, sms.pk)),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				})
		};
	});
var _monty5811$apostello$Pages_KeyRespTable$archiveAllButton = function (ticked) {
	var _p1 = ticked;
	if (_p1 === true) {
		return A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('button button-danger'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('archiveAllSmsButton'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Archive all!'),
				_1: {ctor: '[]'}
			});
	} else {
		return A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('button button-danger'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$disabled(true),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Archive all!'),
				_1: {ctor: '[]'}
			});
	}
};
var _monty5811$apostello$Pages_KeyRespTable$tableHead = A2(
	_elm_lang$html$Html$thead,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$th,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('From'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$th,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Time Received'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$th,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Message'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$th,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Requires Action?'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$th,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('hide-sm-down'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _monty5811$apostello$Pages_KeyRespTable$UpdateProps = F6(
	function (a, b, c, d, e, f) {
		return {csrftoken: a, keyRespModel: b, isArchive: c, keyword: d, store: e, optArchiveMatchingSms: f};
	});
var _monty5811$apostello$Pages_KeyRespTable$Props = F6(
	function (a, b, c, d, e, f) {
		return {form: a, tableMsg: b, toggleDealtWith: c, pkToReplyLink: d, pkToContactLink: e, toggleInboundSmsArchive: f};
	});
var _monty5811$apostello$Pages_KeyRespTable$ReceiveArchiveAllResp = function (a) {
	return {ctor: 'ReceiveArchiveAllResp', _0: a};
};
var _monty5811$apostello$Pages_KeyRespTable$archiveAll = F2(
	function (csrf, keyword) {
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'tick_to_archive_all_responses',
				_1: _elm_lang$core$Json_Encode$bool(true)
			},
			_1: {ctor: '[]'}
		};
		return A2(
			_elm_lang$http$Http$send,
			_monty5811$apostello$Pages_KeyRespTable$ReceiveArchiveAllResp,
			A4(
				_monty5811$apostello$DjangoSend$post,
				csrf,
				_monty5811$apostello$Urls$api_act_keyword_archive_all_responses(keyword),
				body,
				_monty5811$apostello$Helpers$decodeAlwaysTrue));
	});
var _monty5811$apostello$Pages_KeyRespTable$update = F2(
	function (msg, props) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'ArchiveAllCheckBoxClick':
				return {
					ctor: '_Tuple5',
					_0: !props.keyRespModel,
					_1: props.isArchive,
					_2: props.keyword,
					_3: props.store,
					_4: {ctor: '[]'}
				};
			case 'ArchiveAllButtonClick':
				var _p3 = _p2._0;
				return {
					ctor: '_Tuple5',
					_0: false,
					_1: props.isArchive,
					_2: _p3,
					_3: A2(props.optArchiveMatchingSms, props.keyword, props.store),
					_4: {
						ctor: '::',
						_0: A2(_monty5811$apostello$Pages_KeyRespTable$archiveAll, props.csrftoken, _p3),
						_1: {ctor: '[]'}
					}
				};
			default:
				return {
					ctor: '_Tuple5',
					_0: props.keyRespModel,
					_1: props.isArchive,
					_2: props.keyword,
					_3: props.store,
					_4: {ctor: '[]'}
				};
		}
	});
var _monty5811$apostello$Pages_KeyRespTable$ArchiveAllCheckBoxClick = {ctor: 'ArchiveAllCheckBoxClick'};
var _monty5811$apostello$Pages_KeyRespTable$ArchiveAllButtonClick = function (a) {
	return {ctor: 'ArchiveAllButtonClick', _0: a};
};
var _monty5811$apostello$Pages_KeyRespTable$archiveAllForm = F4(
	function (props, viewingArchive, ticked, k) {
		var _p4 = viewingArchive;
		if (_p4 === true) {
			return _elm_lang$html$Html$text('');
		} else {
			return A2(
				_elm_lang$html$Html$form,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onSubmit(
						props.form(
							_monty5811$apostello$Pages_KeyRespTable$ArchiveAllButtonClick(k))),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('input-field'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$label,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$input,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$id('id_tick_to_archive_all_responses'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$name('tick_to_archive_all_responses'),
												_1: {
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'required', ''),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$checked(ticked),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(
																	props.form(_monty5811$apostello$Pages_KeyRespTable$ArchiveAllCheckBoxClick)),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text(' Tick to archive all responses'),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _monty5811$apostello$Pages_KeyRespTable$archiveAllButton(ticked),
						_1: {ctor: '[]'}
					}
				});
		}
	});
var _monty5811$apostello$Pages_KeyRespTable$view = F6(
	function (props, viewingArchive, tableModel, sms, ticked, keyword) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A5(
					_monty5811$apostello$FilteringTable$defaultTable,
					{top: props.tableMsg},
					_monty5811$apostello$Pages_KeyRespTable$tableHead,
					tableModel,
					_monty5811$apostello$Pages_KeyRespTable$smsRow(props),
					sms),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A4(_monty5811$apostello$Pages_KeyRespTable$archiveAllForm, props, viewingArchive, ticked, keyword),
						_1: {ctor: '[]'}
					}
				}
			});
	});

var _monty5811$apostello$Pages$ApiSetup = function (a) {
	return {ctor: 'ApiSetup', _0: a};
};
var _monty5811$apostello$Pages$ContactImport = function (a) {
	return {ctor: 'ContactImport', _0: a};
};
var _monty5811$apostello$Pages$Help = {ctor: 'Help'};
var _monty5811$apostello$Pages$UserProfileForm = F2(
	function (a, b) {
		return {ctor: 'UserProfileForm', _0: a, _1: b};
	});
var _monty5811$apostello$Pages$Usage = {ctor: 'Usage'};
var _monty5811$apostello$Pages$DefaultResponsesForm = function (a) {
	return {ctor: 'DefaultResponsesForm', _0: a};
};
var _monty5811$apostello$Pages$SiteConfigForm = function (a) {
	return {ctor: 'SiteConfigForm', _0: a};
};
var _monty5811$apostello$Pages$Wall = {ctor: 'Wall'};
var _monty5811$apostello$Pages$UserProfileTable = {ctor: 'UserProfileTable'};
var _monty5811$apostello$Pages$SendGroup = function (a) {
	return {ctor: 'SendGroup', _0: a};
};
var _monty5811$apostello$Pages$initSendGroup = F2(
	function (content, pk) {
		return _monty5811$apostello$Pages$SendGroup(
			A2(_monty5811$apostello$Pages_Forms_SendGroup$initialModel, content, pk));
	});
var _monty5811$apostello$Pages$SendAdhoc = function (a) {
	return {ctor: 'SendAdhoc', _0: a};
};
var _monty5811$apostello$Pages$initSendAdhoc = F2(
	function (content, pks) {
		return _monty5811$apostello$Pages$SendAdhoc(
			A2(_monty5811$apostello$Pages_Forms_SendAdhoc$initialModel, content, pks));
	});
var _monty5811$apostello$Pages$ScheduledSmsTable = {ctor: 'ScheduledSmsTable'};
var _monty5811$apostello$Pages$RecipientTable = function (a) {
	return {ctor: 'RecipientTable', _0: a};
};
var _monty5811$apostello$Pages$OutboundTable = {ctor: 'OutboundTable'};
var _monty5811$apostello$Pages$KeywordTable = function (a) {
	return {ctor: 'KeywordTable', _0: a};
};
var _monty5811$apostello$Pages$KeywordForm = F2(
	function (a, b) {
		return {ctor: 'KeywordForm', _0: a, _1: b};
	});
var _monty5811$apostello$Pages$KeyRespTable = F3(
	function (a, b, c) {
		return {ctor: 'KeyRespTable', _0: a, _1: b, _2: c};
	});
var _monty5811$apostello$Pages$InboundTable = {ctor: 'InboundTable'};
var _monty5811$apostello$Pages$GroupTable = function (a) {
	return {ctor: 'GroupTable', _0: a};
};
var _monty5811$apostello$Pages$GroupForm = F2(
	function (a, b) {
		return {ctor: 'GroupForm', _0: a, _1: b};
	});
var _monty5811$apostello$Pages$GroupComposer = function (a) {
	return {ctor: 'GroupComposer', _0: a};
};
var _monty5811$apostello$Pages$Debug = function (a) {
	return {ctor: 'Debug', _0: a};
};
var _monty5811$apostello$Pages$FirstRun = function (a) {
	return {ctor: 'FirstRun', _0: a};
};
var _monty5811$apostello$Pages$Error404 = {ctor: 'Error404'};
var _monty5811$apostello$Pages$ElvantoImport = {ctor: 'ElvantoImport'};
var _monty5811$apostello$Pages$Curator = {ctor: 'Curator'};
var _monty5811$apostello$Pages$CreateAllGroup = function (a) {
	return {ctor: 'CreateAllGroup', _0: a};
};
var _monty5811$apostello$Pages$ContactForm = F2(
	function (a, b) {
		return {ctor: 'ContactForm', _0: a, _1: b};
	});
var _monty5811$apostello$Pages$AccessDenied = {ctor: 'AccessDenied'};
var _monty5811$apostello$Pages$Home = {ctor: 'Home'};

var _monty5811$apostello$Store_DataTypes$dt2Url = function (dt) {
	var _p0 = dt;
	switch (_p0.ctor) {
		case 'IncomingSms':
			return {ctor: '_Tuple2', _0: false, _1: _monty5811$apostello$Urls$api_in_log};
		case 'OutgoingSms':
			return {ctor: '_Tuple2', _0: false, _1: _monty5811$apostello$Urls$api_out_log};
		case 'Contacts':
			var _p2 = _p0._0;
			var _p1 = _p2;
			if (_p1.ctor === 'Just') {
				return {
					ctor: '_Tuple2',
					_0: true,
					_1: _monty5811$apostello$Urls$api_recipients(_p2)
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: false,
					_1: _monty5811$apostello$Urls$api_recipients(_p2)
				};
			}
		case 'Groups':
			var _p4 = _p0._0;
			var _p3 = _p4;
			if (_p3.ctor === 'Just') {
				return {
					ctor: '_Tuple2',
					_0: true,
					_1: _monty5811$apostello$Urls$api_recipient_groups(_p4)
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: false,
					_1: _monty5811$apostello$Urls$api_recipient_groups(_p4)
				};
			}
		case 'Keywords':
			var _p6 = _p0._0;
			var _p5 = _p6;
			if (_p5.ctor === 'Nothing') {
				return {
					ctor: '_Tuple2',
					_0: false,
					_1: _monty5811$apostello$Urls$api_keywords(_p6)
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: true,
					_1: _monty5811$apostello$Urls$api_keywords(_p6)
				};
			}
		case 'ScheduledSms':
			return {ctor: '_Tuple2', _0: false, _1: _monty5811$apostello$Urls$api_queued_smss};
		case 'ElvantoGroups':
			return {ctor: '_Tuple2', _0: false, _1: _monty5811$apostello$Urls$api_elvanto_groups};
		case 'UserProfiles':
			return {ctor: '_Tuple2', _0: false, _1: _monty5811$apostello$Urls$api_user_profiles};
		default:
			return {ctor: '_Tuple2', _0: false, _1: _monty5811$apostello$Urls$api_users};
	}
};
var _monty5811$apostello$Store_DataTypes$Users = {ctor: 'Users'};
var _monty5811$apostello$Store_DataTypes$UserProfiles = {ctor: 'UserProfiles'};
var _monty5811$apostello$Store_DataTypes$ElvantoGroups = {ctor: 'ElvantoGroups'};
var _monty5811$apostello$Store_DataTypes$ScheduledSms = {ctor: 'ScheduledSms'};
var _monty5811$apostello$Store_DataTypes$Keywords = function (a) {
	return {ctor: 'Keywords', _0: a};
};
var _monty5811$apostello$Store_DataTypes$Groups = function (a) {
	return {ctor: 'Groups', _0: a};
};
var _monty5811$apostello$Store_DataTypes$Contacts = function (a) {
	return {ctor: 'Contacts', _0: a};
};
var _monty5811$apostello$Store_DataTypes$OutgoingSms = {ctor: 'OutgoingSms'};
var _monty5811$apostello$Store_DataTypes$IncomingSms = {ctor: 'IncomingSms'};
var _monty5811$apostello$Store_DataTypes$dt_from_page = function (p) {
	var _p7 = p;
	switch (_p7.ctor) {
		case 'OutboundTable':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$OutgoingSms,
				_1: {ctor: '[]'}
			};
		case 'InboundTable':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$IncomingSms,
				_1: {ctor: '[]'}
			};
		case 'GroupTable':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$Groups(_elm_lang$core$Maybe$Nothing),
				_1: {ctor: '[]'}
			};
		case 'GroupComposer':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$Groups(_elm_lang$core$Maybe$Nothing),
				_1: {ctor: '[]'}
			};
		case 'RecipientTable':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$Contacts(_elm_lang$core$Maybe$Nothing),
				_1: {ctor: '[]'}
			};
		case 'KeywordTable':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$Keywords(_elm_lang$core$Maybe$Nothing),
				_1: {ctor: '[]'}
			};
		case 'ElvantoImport':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$ElvantoGroups,
				_1: {ctor: '[]'}
			};
		case 'Wall':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$IncomingSms,
				_1: {ctor: '[]'}
			};
		case 'Curator':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$IncomingSms,
				_1: {ctor: '[]'}
			};
		case 'UserProfileTable':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$UserProfiles,
				_1: {ctor: '[]'}
			};
		case 'ScheduledSmsTable':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$ScheduledSms,
				_1: {ctor: '[]'}
			};
		case 'KeyRespTable':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$IncomingSms,
				_1: {
					ctor: '::',
					_0: _monty5811$apostello$Store_DataTypes$Keywords(_elm_lang$core$Maybe$Nothing),
					_1: {ctor: '[]'}
				}
			};
		case 'FirstRun':
			return {ctor: '[]'};
		case 'Debug':
			return {ctor: '[]'};
		case 'AccessDenied':
			return {ctor: '[]'};
		case 'SendAdhoc':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$Contacts(_elm_lang$core$Maybe$Nothing),
				_1: {ctor: '[]'}
			};
		case 'SendGroup':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$Groups(_elm_lang$core$Maybe$Nothing),
				_1: {ctor: '[]'}
			};
		case 'GroupForm':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$Groups(_elm_lang$core$Maybe$Nothing),
				_1: {
					ctor: '::',
					_0: _monty5811$apostello$Store_DataTypes$Groups(_p7._1),
					_1: {ctor: '[]'}
				}
			};
		case 'ContactForm':
			var _p9 = _p7._1;
			var _p8 = _p9;
			if (_p8.ctor === 'Nothing') {
				return {
					ctor: '::',
					_0: _monty5811$apostello$Store_DataTypes$Contacts(_p9),
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: _monty5811$apostello$Store_DataTypes$IncomingSms,
					_1: {
						ctor: '::',
						_0: _monty5811$apostello$Store_DataTypes$Contacts(_p9),
						_1: {
							ctor: '::',
							_0: _monty5811$apostello$Store_DataTypes$Contacts(_elm_lang$core$Maybe$Nothing),
							_1: {ctor: '[]'}
						}
					}
				};
			}
		case 'KeywordForm':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$Keywords(_p7._1),
				_1: {
					ctor: '::',
					_0: _monty5811$apostello$Store_DataTypes$Keywords(_elm_lang$core$Maybe$Nothing),
					_1: {
						ctor: '::',
						_0: _monty5811$apostello$Store_DataTypes$Groups(_elm_lang$core$Maybe$Nothing),
						_1: {
							ctor: '::',
							_0: _monty5811$apostello$Store_DataTypes$Users,
							_1: {ctor: '[]'}
						}
					}
				}
			};
		case 'Error404':
			return {ctor: '[]'};
		case 'Home':
			return {ctor: '[]'};
		case 'SiteConfigForm':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$Groups(_elm_lang$core$Maybe$Nothing),
				_1: {ctor: '[]'}
			};
		case 'DefaultResponsesForm':
			return {ctor: '[]'};
		case 'CreateAllGroup':
			return {ctor: '[]'};
		case 'Usage':
			return {ctor: '[]'};
		case 'Help':
			return {ctor: '[]'};
		case 'UserProfileForm':
			return {
				ctor: '::',
				_0: _monty5811$apostello$Store_DataTypes$UserProfiles,
				_1: {ctor: '[]'}
			};
		case 'ContactImport':
			return {ctor: '[]'};
		default:
			return {ctor: '[]'};
	}
};

var _monty5811$apostello$Store_Model$handleFailed = F3(
	function (dt, err, ds) {
		var _p0 = dt;
		switch (_p0.ctor) {
			case 'IncomingSms':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						inboundSms: A2(
							_monty5811$remote_list$RemoteList$RespFailed,
							err,
							_monty5811$remote_list$RemoteList$toList(ds.inboundSms))
					});
			case 'OutgoingSms':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						outboundSms: A2(
							_monty5811$remote_list$RemoteList$RespFailed,
							err,
							_monty5811$remote_list$RemoteList$toList(ds.outboundSms))
					});
			case 'Contacts':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						recipients: A2(
							_monty5811$remote_list$RemoteList$RespFailed,
							err,
							_monty5811$remote_list$RemoteList$toList(ds.recipients))
					});
			case 'Groups':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						groups: A2(
							_monty5811$remote_list$RemoteList$RespFailed,
							err,
							_monty5811$remote_list$RemoteList$toList(ds.groups))
					});
			case 'Keywords':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						keywords: A2(
							_monty5811$remote_list$RemoteList$RespFailed,
							err,
							_monty5811$remote_list$RemoteList$toList(ds.keywords))
					});
			case 'ScheduledSms':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						queuedSms: A2(
							_monty5811$remote_list$RemoteList$RespFailed,
							err,
							_monty5811$remote_list$RemoteList$toList(ds.queuedSms))
					});
			case 'ElvantoGroups':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						elvantoGroups: A2(
							_monty5811$remote_list$RemoteList$RespFailed,
							err,
							_monty5811$remote_list$RemoteList$toList(ds.elvantoGroups))
					});
			case 'UserProfiles':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						userprofiles: A2(
							_monty5811$remote_list$RemoteList$RespFailed,
							err,
							_monty5811$remote_list$RemoteList$toList(ds.userprofiles))
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						users: A2(
							_monty5811$remote_list$RemoteList$RespFailed,
							err,
							_monty5811$remote_list$RemoteList$toList(ds.users))
					});
		}
	});
var _monty5811$apostello$Store_Model$dt2Failed = F2(
	function (ds, dt) {
		var _p1 = dt;
		switch (_p1.ctor) {
			case 'IncomingSms':
				return _monty5811$remote_list$RemoteList$hasFailed(ds.inboundSms);
			case 'OutgoingSms':
				return _monty5811$remote_list$RemoteList$hasFailed(ds.outboundSms);
			case 'Contacts':
				return _monty5811$remote_list$RemoteList$hasFailed(ds.recipients);
			case 'Groups':
				return _monty5811$remote_list$RemoteList$hasFailed(ds.groups);
			case 'Keywords':
				return _monty5811$remote_list$RemoteList$hasFailed(ds.keywords);
			case 'ScheduledSms':
				return _monty5811$remote_list$RemoteList$hasFailed(ds.queuedSms);
			case 'ElvantoGroups':
				return _monty5811$remote_list$RemoteList$hasFailed(ds.elvantoGroups);
			case 'UserProfiles':
				return _monty5811$remote_list$RemoteList$hasFailed(ds.userprofiles);
			default:
				return _monty5811$remote_list$RemoteList$hasFailed(ds.users);
		}
	});
var _monty5811$apostello$Store_Model$anyFailed = F2(
	function (page, ds) {
		return A2(
			_elm_lang$core$List$any,
			_monty5811$apostello$Store_Model$dt2Failed(ds),
			_monty5811$apostello$Store_DataTypes$dt_from_page(page));
	});
var _monty5811$apostello$Store_Model$dt2Finished = F2(
	function (ds, dt) {
		var _p2 = dt;
		switch (_p2.ctor) {
			case 'IncomingSms':
				return _monty5811$remote_list$RemoteList$hasFinished(ds.inboundSms);
			case 'OutgoingSms':
				return _monty5811$remote_list$RemoteList$hasFinished(ds.outboundSms);
			case 'Contacts':
				return _monty5811$remote_list$RemoteList$hasFinished(ds.recipients);
			case 'Groups':
				return _monty5811$remote_list$RemoteList$hasFinished(ds.groups);
			case 'Keywords':
				return _monty5811$remote_list$RemoteList$hasFinished(ds.keywords);
			case 'ScheduledSms':
				return _monty5811$remote_list$RemoteList$hasFinished(ds.queuedSms);
			case 'ElvantoGroups':
				return _monty5811$remote_list$RemoteList$hasFinished(ds.elvantoGroups);
			case 'UserProfiles':
				return _monty5811$remote_list$RemoteList$hasFinished(ds.userprofiles);
			default:
				return _monty5811$remote_list$RemoteList$hasFinished(ds.users);
		}
	});
var _monty5811$apostello$Store_Model$allFinished = F2(
	function (page, ds) {
		return A2(
			_elm_lang$core$List$all,
			_monty5811$apostello$Store_Model$dt2Finished(ds),
			_monty5811$apostello$Store_DataTypes$dt_from_page(page));
	});
var _monty5811$apostello$Store_Model$resetStatus = function (ds) {
	return _elm_lang$core$Native_Utils.update(
		ds,
		{
			inboundSms: _monty5811$remote_list$RemoteList$NotAsked(
				_monty5811$remote_list$RemoteList$toList(ds.inboundSms)),
			outboundSms: _monty5811$remote_list$RemoteList$NotAsked(
				_monty5811$remote_list$RemoteList$toList(ds.outboundSms)),
			recipients: _monty5811$remote_list$RemoteList$NotAsked(
				_monty5811$remote_list$RemoteList$toList(ds.recipients)),
			groups: _monty5811$remote_list$RemoteList$NotAsked(
				_monty5811$remote_list$RemoteList$toList(ds.groups)),
			keywords: _monty5811$remote_list$RemoteList$NotAsked(
				_monty5811$remote_list$RemoteList$toList(ds.keywords)),
			queuedSms: _monty5811$remote_list$RemoteList$NotAsked(
				_monty5811$remote_list$RemoteList$toList(ds.queuedSms)),
			elvantoGroups: _monty5811$remote_list$RemoteList$NotAsked(
				_monty5811$remote_list$RemoteList$toList(ds.elvantoGroups)),
			userprofiles: _monty5811$remote_list$RemoteList$NotAsked(
				_monty5811$remote_list$RemoteList$toList(ds.userprofiles)),
			users: _monty5811$remote_list$RemoteList$NotAsked(
				_monty5811$remote_list$RemoteList$toList(ds.users))
		});
};
var _monty5811$apostello$Store_Model$setLoadDataStatusHelp = function (rl) {
	var _p3 = rl;
	switch (_p3.ctor) {
		case 'WaitingOnRefresh':
			return _monty5811$remote_list$RemoteList$WaitingOnRefresh(_p3._0);
		case 'NotAsked':
			return _monty5811$remote_list$RemoteList$WaitingForFirstResp(_p3._0);
		default:
			return _monty5811$remote_list$RemoteList$WaitingForPage(
				_monty5811$remote_list$RemoteList$toList(rl));
	}
};
var _monty5811$apostello$Store_Model$setLoadDataStatus = F2(
	function (dt, ds) {
		var _p4 = dt;
		switch (_p4.ctor) {
			case 'IncomingSms':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						inboundSms: _monty5811$apostello$Store_Model$setLoadDataStatusHelp(ds.inboundSms)
					});
			case 'OutgoingSms':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						outboundSms: _monty5811$apostello$Store_Model$setLoadDataStatusHelp(ds.outboundSms)
					});
			case 'Contacts':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						recipients: _monty5811$apostello$Store_Model$setLoadDataStatusHelp(ds.recipients)
					});
			case 'Groups':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						groups: _monty5811$apostello$Store_Model$setLoadDataStatusHelp(ds.groups)
					});
			case 'Keywords':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						keywords: _monty5811$apostello$Store_Model$setLoadDataStatusHelp(ds.keywords)
					});
			case 'ScheduledSms':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						queuedSms: _monty5811$apostello$Store_Model$setLoadDataStatusHelp(ds.queuedSms)
					});
			case 'ElvantoGroups':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						elvantoGroups: _monty5811$apostello$Store_Model$setLoadDataStatusHelp(ds.elvantoGroups)
					});
			case 'UserProfiles':
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						userprofiles: _monty5811$apostello$Store_Model$setLoadDataStatusHelp(ds.userprofiles)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					ds,
					{
						users: _monty5811$apostello$Store_Model$setLoadDataStatusHelp(ds.users)
					});
		}
	});
var _monty5811$apostello$Store_Model$filterArchived = F2(
	function (viewingArchive, data) {
		return A2(
			_monty5811$remote_list$RemoteList$filter,
			function (x) {
				return _elm_lang$core$Native_Utils.eq(x.is_archived, viewingArchive);
			},
			data);
	});
var _monty5811$apostello$Store_Model$emptyDataStore = {
	inboundSms: _monty5811$remote_list$RemoteList$NotAsked(
		{ctor: '[]'}),
	outboundSms: _monty5811$remote_list$RemoteList$NotAsked(
		{ctor: '[]'}),
	elvantoGroups: _monty5811$remote_list$RemoteList$NotAsked(
		{ctor: '[]'}),
	userprofiles: _monty5811$remote_list$RemoteList$NotAsked(
		{ctor: '[]'}),
	keywords: _monty5811$remote_list$RemoteList$NotAsked(
		{ctor: '[]'}),
	recipients: _monty5811$remote_list$RemoteList$NotAsked(
		{ctor: '[]'}),
	groups: _monty5811$remote_list$RemoteList$NotAsked(
		{ctor: '[]'}),
	queuedSms: _monty5811$remote_list$RemoteList$NotAsked(
		{ctor: '[]'}),
	users: _monty5811$remote_list$RemoteList$NotAsked(
		{ctor: '[]'})
};
var _monty5811$apostello$Store_Model$DataStore = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {inboundSms: a, outboundSms: b, elvantoGroups: c, userprofiles: d, keywords: e, recipients: f, groups: g, queuedSms: h, users: i};
	});
var _monty5811$apostello$Store_Model$RawResponse = F2(
	function (a, b) {
		return {body: a, next: b};
	});

var _monty5811$apostello$Store_Messages$ReceiveReprocessSms = function (a) {
	return {ctor: 'ReceiveReprocessSms', _0: a};
};
var _monty5811$apostello$Store_Messages$ReceiveToggleInboundSmsDealtWith = function (a) {
	return {ctor: 'ReceiveToggleInboundSmsDealtWith', _0: a};
};
var _monty5811$apostello$Store_Messages$ReceiveToggleInboundSmsArchive = function (a) {
	return {ctor: 'ReceiveToggleInboundSmsArchive', _0: a};
};
var _monty5811$apostello$Store_Messages$ToggleInboundSmsDealtWith = F2(
	function (a, b) {
		return {ctor: 'ToggleInboundSmsDealtWith', _0: a, _1: b};
	});
var _monty5811$apostello$Store_Messages$ToggleInboundSmsArchive = F2(
	function (a, b) {
		return {ctor: 'ToggleInboundSmsArchive', _0: a, _1: b};
	});
var _monty5811$apostello$Store_Messages$ReprocessSms = function (a) {
	return {ctor: 'ReprocessSms', _0: a};
};
var _monty5811$apostello$Store_Messages$ReceiveLazy = function (a) {
	return {ctor: 'ReceiveLazy', _0: a};
};
var _monty5811$apostello$Store_Messages$ReceiveToggleWallDisplay = function (a) {
	return {ctor: 'ReceiveToggleWallDisplay', _0: a};
};
var _monty5811$apostello$Store_Messages$ReceiveToggleProfileField = function (a) {
	return {ctor: 'ReceiveToggleProfileField', _0: a};
};
var _monty5811$apostello$Store_Messages$ToggleProfileField = function (a) {
	return {ctor: 'ToggleProfileField', _0: a};
};
var _monty5811$apostello$Store_Messages$ToggleGroupArchive = F2(
	function (a, b) {
		return {ctor: 'ToggleGroupArchive', _0: a, _1: b};
	});
var _monty5811$apostello$Store_Messages$ToggleWallDisplay = F2(
	function (a, b) {
		return {ctor: 'ToggleWallDisplay', _0: a, _1: b};
	});
var _monty5811$apostello$Store_Messages$ToggleKeywordArchive = F2(
	function (a, b) {
		return {ctor: 'ToggleKeywordArchive', _0: a, _1: b};
	});
var _monty5811$apostello$Store_Messages$ToggleRecipientArchive = F2(
	function (a, b) {
		return {ctor: 'ToggleRecipientArchive', _0: a, _1: b};
	});
var _monty5811$apostello$Store_Messages$CancelSms = function (a) {
	return {ctor: 'CancelSms', _0: a};
};
var _monty5811$apostello$Store_Messages$ReceiveToggleElvantoGroupSync = function (a) {
	return {ctor: 'ReceiveToggleElvantoGroupSync', _0: a};
};
var _monty5811$apostello$Store_Messages$ToggleElvantoGroupSync = function (a) {
	return {ctor: 'ToggleElvantoGroupSync', _0: a};
};
var _monty5811$apostello$Store_Messages$ReceiveToggleGroupMembership = function (a) {
	return {ctor: 'ReceiveToggleGroupMembership', _0: a};
};
var _monty5811$apostello$Store_Messages$ToggleGroupMembership = F2(
	function (a, b) {
		return {ctor: 'ToggleGroupMembership', _0: a, _1: b};
	});
var _monty5811$apostello$Store_Messages$ReceiveRawResp = F3(
	function (a, b, c) {
		return {ctor: 'ReceiveRawResp', _0: a, _1: b, _2: c};
	});
var _monty5811$apostello$Store_Messages$LoadDataStore = function (a) {
	return {ctor: 'LoadDataStore', _0: a};
};
var _monty5811$apostello$Store_Messages$LoadData = {ctor: 'LoadData'};

var _monty5811$apostello$WebPush$button = F3(
	function (msg, colour, text) {
		return A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(_elm_lang$core$Basics_ops['++'], 'button ', colour)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(msg),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(text),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$WebPush$header = function (m) {
	var _p0 = m;
	switch (_p0.ctor) {
		case 'Unknown':
			return 'Unknown';
		case 'Subscribed':
			return 'Subscribed';
		case 'NotSubscribed':
			return 'Not Subscribed';
		case 'NoSupport':
			return 'Push Not Supported';
		default:
			return 'Error! Reload and try again.';
	}
};
var _monty5811$apostello$WebPush$acceptPushSub = _elm_lang$core$Native_Platform.incomingPort('acceptPushSub', _elm_lang$core$Json_Decode$value);
var _monty5811$apostello$WebPush$pushSubEvent = _elm_lang$core$Native_Platform.outgoingPort(
	'pushSubEvent',
	function (v) {
		return v;
	});
var _monty5811$apostello$WebPush$Error = {ctor: 'Error'};
var _monty5811$apostello$WebPush$NoSupport = {ctor: 'NoSupport'};
var _monty5811$apostello$WebPush$NotSubscribed = {ctor: 'NotSubscribed'};
var _monty5811$apostello$WebPush$Subscribed = {ctor: 'Subscribed'};
var _monty5811$apostello$WebPush$Unknown = {ctor: 'Unknown'};
var _monty5811$apostello$WebPush$initial = _monty5811$apostello$WebPush$Unknown;
var _monty5811$apostello$WebPush$NoOp = {ctor: 'NoOp'};
var _monty5811$apostello$WebPush$addId = F2(
	function (csrftoken, endpoint) {
		return A2(
			_elm_lang$http$Http$send,
			function (_p1) {
				return _monty5811$apostello$WebPush$NoOp;
			},
			A4(
				_monty5811$apostello$DjangoSend$post,
				csrftoken,
				_monty5811$apostello$Urls$api_act_add_cm_id,
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'endpoint',
						_1: _elm_lang$core$Json_Encode$string(endpoint)
					},
					_1: {ctor: '[]'}
				},
				_elm_lang$core$Json_Decode$succeed(
					{ctor: '_Tuple0'})));
	});
var _monty5811$apostello$WebPush$removeId = F2(
	function (csrftoken, endpoint) {
		return A2(
			_elm_lang$http$Http$send,
			function (_p2) {
				return _monty5811$apostello$WebPush$NoOp;
			},
			A4(
				_monty5811$apostello$DjangoSend$post,
				csrftoken,
				_monty5811$apostello$Urls$api_act_remove_cm_id,
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'endpoint',
						_1: _elm_lang$core$Json_Encode$string(endpoint)
					},
					_1: {ctor: '[]'}
				},
				_elm_lang$core$Json_Decode$succeed(
					{ctor: '_Tuple0'})));
	});
var _monty5811$apostello$WebPush$Unregister = {ctor: 'Unregister'};
var _monty5811$apostello$WebPush$Register = {ctor: 'Register'};
var _monty5811$apostello$WebPush$UpdateRecieved = function (a) {
	return {ctor: 'UpdateRecieved', _0: a};
};
var _monty5811$apostello$WebPush$subscriptions = function (_p3) {
	return _monty5811$apostello$WebPush$acceptPushSub(_monty5811$apostello$WebPush$UpdateRecieved);
};
var _monty5811$apostello$WebPush$CheckSubscribed = {ctor: 'CheckSubscribed'};
var _monty5811$apostello$WebPush$view = function (model) {
	return {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_monty5811$apostello$WebPush$header(model)),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: function () {
				var _p4 = model;
				switch (_p4.ctor) {
					case 'Unknown':
						return A3(_monty5811$apostello$WebPush$button, _monty5811$apostello$WebPush$CheckSubscribed, 'button-secondary', 'Click to check');
					case 'Subscribed':
						return A3(_monty5811$apostello$WebPush$button, _monty5811$apostello$WebPush$Unregister, 'button-info', 'Click to stop');
					case 'NotSubscribed':
						return A3(_monty5811$apostello$WebPush$button, _monty5811$apostello$WebPush$Register, 'button-info', 'Click to start');
					case 'NoSupport':
						return _elm_lang$html$Html$text('');
					default:
						return _elm_lang$html$Html$text('');
				}
			}(),
			_1: {ctor: '[]'}
		}
	};
};
var _monty5811$apostello$WebPush$NotSupported = {ctor: 'NotSupported'};
var _monty5811$apostello$WebPush$decodeNotSupported = A2(
	_elm_lang$core$Json_Decode$map,
	function (_p5) {
		return _monty5811$apostello$WebPush$NotSupported;
	},
	A2(_elm_lang$core$Json_Decode$field, 'noSupport', _elm_lang$core$Json_Decode$bool));
var _monty5811$apostello$WebPush$UnregisterEvent = function (a) {
	return {ctor: 'UnregisterEvent', _0: a};
};
var _monty5811$apostello$WebPush$decodeUnregister = A2(
	_elm_lang$core$Json_Decode$map,
	_monty5811$apostello$WebPush$UnregisterEvent,
	A2(
		_elm_lang$core$Json_Decode$field,
		'unregValue',
		_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string)));
var _monty5811$apostello$WebPush$RegisterEvent = function (a) {
	return {ctor: 'RegisterEvent', _0: a};
};
var _monty5811$apostello$WebPush$decodeRegister = A2(
	_elm_lang$core$Json_Decode$map,
	_monty5811$apostello$WebPush$RegisterEvent,
	A2(
		_elm_lang$core$Json_Decode$field,
		'regValue',
		_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string)));
var _monty5811$apostello$WebPush$CheckFailed = {ctor: 'CheckFailed'};
var _monty5811$apostello$WebPush$decodeFailed = A2(
	_elm_lang$core$Json_Decode$map,
	function (_p6) {
		return _monty5811$apostello$WebPush$CheckFailed;
	},
	A2(_elm_lang$core$Json_Decode$field, 'failed', _elm_lang$core$Json_Decode$bool));
var _monty5811$apostello$WebPush$decodeEvent = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: _monty5811$apostello$WebPush$decodeFailed,
		_1: {
			ctor: '::',
			_0: _monty5811$apostello$WebPush$decodeRegister,
			_1: {
				ctor: '::',
				_0: _monty5811$apostello$WebPush$decodeUnregister,
				_1: {
					ctor: '::',
					_0: _monty5811$apostello$WebPush$decodeNotSupported,
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _monty5811$apostello$WebPush$update = F3(
	function (csrftoken, msg, model) {
		var _p7 = msg;
		switch (_p7.ctor) {
			case 'NoOp':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'CheckSubscribed':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: _monty5811$apostello$WebPush$pushSubEvent('check'),
						_1: {ctor: '[]'}
					});
			case 'Register':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: _monty5811$apostello$WebPush$pushSubEvent('register'),
						_1: {ctor: '[]'}
					});
			case 'Unregister':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: _monty5811$apostello$WebPush$pushSubEvent('unregister'),
						_1: {ctor: '[]'}
					});
			default:
				var event = A2(_elm_lang$core$Json_Decode$decodeValue, _monty5811$apostello$WebPush$decodeEvent, _p7._0);
				var _p8 = event;
				if (_p8.ctor === 'Err') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_monty5811$apostello$WebPush$Error,
						{ctor: '[]'});
				} else {
					switch (_p8._0.ctor) {
						case 'CheckFailed':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								_monty5811$apostello$WebPush$Error,
								{ctor: '[]'});
						case 'RegisterEvent':
							var _p9 = _p8._0._0;
							if (_p9.ctor === 'Nothing') {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									_monty5811$apostello$WebPush$NotSubscribed,
									{ctor: '[]'});
							} else {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									_monty5811$apostello$WebPush$Subscribed,
									{
										ctor: '::',
										_0: A2(_monty5811$apostello$WebPush$addId, csrftoken, _p9._0),
										_1: {ctor: '[]'}
									});
							}
						case 'UnregisterEvent':
							var _p10 = _p8._0._0;
							if (_p10.ctor === 'Nothing') {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									_monty5811$apostello$WebPush$Error,
									{ctor: '[]'});
							} else {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									_monty5811$apostello$WebPush$NotSubscribed,
									{
										ctor: '::',
										_0: A2(_monty5811$apostello$WebPush$removeId, csrftoken, _p10._0),
										_1: {ctor: '[]'}
									});
							}
						default:
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								_monty5811$apostello$WebPush$NoSupport,
								{ctor: '[]'});
					}
				}
		}
	});

var _monty5811$apostello$Messages$VisibilityChange = function (a) {
	return {ctor: 'VisibilityChange', _0: a};
};
var _monty5811$apostello$Messages$KeyPressed = function (a) {
	return {ctor: 'KeyPressed', _0: a};
};
var _monty5811$apostello$Messages$ToggleMenu = {ctor: 'ToggleMenu'};
var _monty5811$apostello$Messages$Nope = {ctor: 'Nope'};
var _monty5811$apostello$Messages$CurrentTime = function (a) {
	return {ctor: 'CurrentTime', _0: a};
};
var _monty5811$apostello$Messages$NotificationMsg = function (a) {
	return {ctor: 'NotificationMsg', _0: a};
};
var _monty5811$apostello$Messages$WebPushMsg = function (a) {
	return {ctor: 'WebPushMsg', _0: a};
};
var _monty5811$apostello$Messages$ApiSetupMsg = function (a) {
	return {ctor: 'ApiSetupMsg', _0: a};
};
var _monty5811$apostello$Messages$SidePanelMsg = function (a) {
	return {ctor: 'SidePanelMsg', _0: a};
};
var _monty5811$apostello$Messages$DebugMsg = function (a) {
	return {ctor: 'DebugMsg', _0: a};
};
var _monty5811$apostello$Messages$FirstRunMsg = function (a) {
	return {ctor: 'FirstRunMsg', _0: a};
};
var _monty5811$apostello$Messages$KeyRespTableMsg = function (a) {
	return {ctor: 'KeyRespTableMsg', _0: a};
};
var _monty5811$apostello$Messages$GroupComposerMsg = function (a) {
	return {ctor: 'GroupComposerMsg', _0: a};
};
var _monty5811$apostello$Messages$ElvantoMsg = function (a) {
	return {ctor: 'ElvantoMsg', _0: a};
};
var _monty5811$apostello$Messages$TableMsg = function (a) {
	return {ctor: 'TableMsg', _0: a};
};
var _monty5811$apostello$Messages$FormMsg = function (a) {
	return {ctor: 'FormMsg', _0: a};
};
var _monty5811$apostello$Messages$NewUrl = function (a) {
	return {ctor: 'NewUrl', _0: a};
};
var _monty5811$apostello$Messages$UrlChange = function (a) {
	return {ctor: 'UrlChange', _0: a};
};
var _monty5811$apostello$Messages$StoreMsg = function (a) {
	return {ctor: 'StoreMsg', _0: a};
};
var _monty5811$apostello$Messages$ReceiveArchiveResp = F2(
	function (a, b) {
		return {ctor: 'ReceiveArchiveResp', _0: a, _1: b};
	});
var _monty5811$apostello$Messages$ArchiveItem = F3(
	function (a, b, c) {
		return {ctor: 'ArchiveItem', _0: a, _1: b, _2: c};
	});
var _monty5811$apostello$Messages$SendGroupMsg = function (a) {
	return {ctor: 'SendGroupMsg', _0: a};
};
var _monty5811$apostello$Messages$SendAdhocMsg = function (a) {
	return {ctor: 'SendAdhocMsg', _0: a};
};
var _monty5811$apostello$Messages$ContactImportMsg = function (a) {
	return {ctor: 'ContactImportMsg', _0: a};
};
var _monty5811$apostello$Messages$CreateAllGroupMsg = function (a) {
	return {ctor: 'CreateAllGroupMsg', _0: a};
};
var _monty5811$apostello$Messages$DefaultResponsesFormMsg = function (a) {
	return {ctor: 'DefaultResponsesFormMsg', _0: a};
};
var _monty5811$apostello$Messages$SiteConfigFormMsg = function (a) {
	return {ctor: 'SiteConfigFormMsg', _0: a};
};
var _monty5811$apostello$Messages$UserProfileFormMsg = function (a) {
	return {ctor: 'UserProfileFormMsg', _0: a};
};
var _monty5811$apostello$Messages$KeywordFormMsg = function (a) {
	return {ctor: 'KeywordFormMsg', _0: a};
};
var _monty5811$apostello$Messages$ContactFormMsg = function (a) {
	return {ctor: 'ContactFormMsg', _0: a};
};
var _monty5811$apostello$Messages$GroupFormMsg = function (a) {
	return {ctor: 'GroupFormMsg', _0: a};
};
var _monty5811$apostello$Messages$ReceiveFormResp = F2(
	function (a, b) {
		return {ctor: 'ReceiveFormResp', _0: a, _1: b};
	});
var _monty5811$apostello$Messages$PostUserProfileForm = {ctor: 'PostUserProfileForm'};
var _monty5811$apostello$Messages$PostSiteConfigForm = {ctor: 'PostSiteConfigForm'};
var _monty5811$apostello$Messages$PostSendGroupForm = {ctor: 'PostSendGroupForm'};
var _monty5811$apostello$Messages$PostSendAdhocForm = {ctor: 'PostSendAdhocForm'};
var _monty5811$apostello$Messages$PostGroupForm = {ctor: 'PostGroupForm'};
var _monty5811$apostello$Messages$PostDefaultRespForm = {ctor: 'PostDefaultRespForm'};
var _monty5811$apostello$Messages$PostCreateAllGroupForm = {ctor: 'PostCreateAllGroupForm'};
var _monty5811$apostello$Messages$PostContactImportForm = {ctor: 'PostContactImportForm'};
var _monty5811$apostello$Messages$PostContactForm = F2(
	function (a, b) {
		return {ctor: 'PostContactForm', _0: a, _1: b};
	});
var _monty5811$apostello$Messages$PostKeywordForm = {ctor: 'PostKeywordForm'};

var _monty5811$apostello$Models$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {page: a, table: b, settings: c, dataStore: d, notifications: e, currentTime: f, formStatus: g, webPush: h, menuState: i, pageVisibility: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _monty5811$apostello$Models$Settings = F7(
	function (a, b, c, d, e, f, g) {
		return {csrftoken: a, userPerms: b, twilio: c, isEmailSetup: d, smsCharLimit: e, defaultNumberPrefix: f, blockedKeywords: g};
	});
var _monty5811$apostello$Models$TwilioSettings = F2(
	function (a, b) {
		return {sendingCost: a, fromNumber: b};
	});
var _monty5811$apostello$Models$decodeTwilioSettings = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'from_num',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'sending_cost',
		_elm_lang$core$Json_Decode$float,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Models$TwilioSettings)));
var _monty5811$apostello$Models$decodeSettings = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'blockedKeywords',
	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'defaultNumberPrefix',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'smsCharLimit',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'isEmailSetup',
				_elm_lang$core$Json_Decode$bool,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'twilio',
					_elm_lang$core$Json_Decode$maybe(_monty5811$apostello$Models$decodeTwilioSettings),
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'userPerms',
						_monty5811$apostello$Data$decodeUserProfile,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'csrftoken',
							A2(
								_elm_lang$core$Json_Decode$andThen,
								function (t) {
									return _elm_lang$core$Json_Decode$succeed(
										_monty5811$apostello$DjangoSend$CSRFToken(t));
								},
								_elm_lang$core$Json_Decode$string),
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Models$Settings))))))));
var _monty5811$apostello$Models$Flags = function (a) {
	return {settings: a};
};
var _monty5811$apostello$Models$decodeFlags = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'settings',
	_monty5811$apostello$Models$decodeSettings,
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Models$Flags));
var _monty5811$apostello$Models$MenuVisible = {ctor: 'MenuVisible'};
var _monty5811$apostello$Models$MenuHidden = {ctor: 'MenuHidden'};
var _monty5811$apostello$Models$initialModel = F2(
	function (settings, page) {
		return {page: page, table: _monty5811$apostello$FilteringTable$initialModel, settings: settings, dataStore: _monty5811$apostello$Store_Model$emptyDataStore, notifications: _monty5811$apostello$Notification$empty, currentTime: 0, formStatus: _monty5811$apostello$Forms_Model$NoAction, webPush: _monty5811$apostello$WebPush$initial, menuState: _monty5811$apostello$Models$MenuHidden, pageVisibility: _elm_lang$page_visibility$PageVisibility$Visible};
	});

var _monty5811$apostello$Route$groupParam = function (g) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (x) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'recipient_group=',
				_elm_lang$core$Basics$toString(x));
		},
		g);
};
var _monty5811$apostello$Route$contactsParam = function (contacts) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (x) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'recipients=[',
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$String$join,
						',',
						A2(_elm_lang$core$List$map, _elm_lang$core$Basics$toString, x)),
					']'));
		},
		contacts);
};
var _monty5811$apostello$Route$contentParam = function (content) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (x) {
			return A2(_elm_lang$core$Basics_ops['++'], 'content=', x);
		},
		content);
};
var _monty5811$apostello$Route$notNothing = function (m) {
	var _p0 = m;
	if (_p0.ctor === 'Just') {
		return true;
	} else {
		return false;
	}
};
var _monty5811$apostello$Route$addGroupParams = F3(
	function (maybeContent, maybePk, url) {
		var params = A2(
			_elm_lang$core$String$join,
			'&',
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Maybe$withDefault(''),
				A2(
					_elm_lang$core$List$filter,
					_monty5811$apostello$Route$notNothing,
					{
						ctor: '::',
						_0: _monty5811$apostello$Route$contentParam(maybeContent),
						_1: {
							ctor: '::',
							_0: _monty5811$apostello$Route$groupParam(maybePk),
							_1: {ctor: '[]'}
						}
					})));
		return A2(
			_elm_lang$core$Basics_ops['++'],
			url,
			A2(_elm_lang$core$Basics_ops['++'], '?', params));
	});
var _monty5811$apostello$Route$addAdhocParams = F3(
	function (maybeContent, maybePks, url) {
		var params = A2(
			_elm_lang$core$String$join,
			'&',
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Maybe$withDefault(''),
				A2(
					_elm_lang$core$List$filter,
					_monty5811$apostello$Route$notNothing,
					{
						ctor: '::',
						_0: _monty5811$apostello$Route$contentParam(maybeContent),
						_1: {
							ctor: '::',
							_0: _monty5811$apostello$Route$contactsParam(maybePks),
							_1: {ctor: '[]'}
						}
					})));
		return A2(
			_elm_lang$core$Basics_ops['++'],
			url,
			A2(_elm_lang$core$Basics_ops['++'], '?', params));
	});
var _monty5811$apostello$Route$page2loc = function (page) {
	var _p1 = page;
	switch (_p1.ctor) {
		case 'Home':
			return '/';
		case 'OutboundTable':
			return '/outgoing/';
		case 'InboundTable':
			return '/incoming/';
		case 'GroupTable':
			if (_p1._0 === true) {
				return '/group/archive/';
			} else {
				return '/group/all/';
			}
		case 'GroupComposer':
			return '/group/composer/';
		case 'RecipientTable':
			if (_p1._0 === true) {
				return '/recipient/archive/';
			} else {
				return '/recipient/all/';
			}
		case 'KeywordTable':
			if (_p1._0 === true) {
				return '/keyword/archive/';
			} else {
				return '/keyword/all/';
			}
		case 'ElvantoImport':
			return '/elvanto/import/';
		case 'Wall':
			return '/incoming/wall/';
		case 'Curator':
			return '/incoming/curate_wall/';
		case 'UserProfileTable':
			return '/users/profiles/';
		case 'ScheduledSmsTable':
			return '/scheduled/sms/';
		case 'KeyRespTable':
			if (_p1._1 === true) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'/keyword/responses/archive/',
					A2(_elm_lang$core$Basics_ops['++'], _p1._2, '/'));
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'/keyword/responses/',
					A2(_elm_lang$core$Basics_ops['++'], _p1._2, '/'));
			}
		case 'FirstRun':
			return '/config/first_run/';
		case 'SendAdhoc':
			var _p2 = _p1._0;
			return A3(
				_monty5811$apostello$Route$addAdhocParams,
				_elm_lang$core$Maybe$Just(_p2.content),
				_elm_lang$core$Maybe$Just(_p2.selectedContacts),
				'/send/adhoc/');
		case 'SendGroup':
			var _p3 = _p1._0;
			return A3(
				_monty5811$apostello$Route$addGroupParams,
				_elm_lang$core$Maybe$Just(_p3.content),
				_p3.selectedPk,
				'/send/group/');
		case 'GroupForm':
			var _p4 = _p1._1;
			if (_p4.ctor === 'Nothing') {
				return '/group/new/';
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'/group/edit/',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p4._0),
						'/'));
			}
		case 'ContactForm':
			var _p5 = _p1._1;
			if (_p5.ctor === 'Nothing') {
				return '/recipient/new/';
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'/recipient/edit/',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p5._0),
						'/'));
			}
		case 'KeywordForm':
			var _p6 = _p1._1;
			if (_p6.ctor === 'Nothing') {
				return '/keyword/new/';
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'/keyword/edit/',
					A2(_elm_lang$core$Basics_ops['++'], _p6._0, '/'));
			}
		case 'SiteConfigForm':
			return '/config/site/';
		case 'DefaultResponsesForm':
			return '/config/responses/';
		case 'Debug':
			return '/config/debug/';
		case 'CreateAllGroup':
			return '/group/create_all/';
		case 'Usage':
			return '/usage/';
		case 'Help':
			return '/help/';
		case 'UserProfileForm':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'/users/profiles/',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p1._1),
					'/'));
		case 'ContactImport':
			return '/recipient/import/';
		case 'ApiSetup':
			return '/api-setup/';
		case 'AccessDenied':
			return '/';
		default:
			return '/';
	}
};
var _monty5811$apostello$Route$delayedNavigate = F2(
	function (t, page) {
		return A2(
			_elm_lang$core$Task$perform,
			_elm_lang$core$Basics$identity,
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Basics$always(
					_elm_lang$core$Task$succeed(
						_monty5811$apostello$Messages$NewUrl(
							_monty5811$apostello$Route$page2loc(page)))),
				_elm_lang$core$Process$sleep(t)));
	});
var _monty5811$apostello$Route$checkPerm = F3(
	function (blockedKeywords, userPerms, page) {
		var permBool = function () {
			var _p7 = page;
			switch (_p7.ctor) {
				case 'OutboundTable':
					return userPerms.can_see_outgoing;
				case 'InboundTable':
					return userPerms.can_see_incoming;
				case 'GroupTable':
					if (_p7._0 === false) {
						return userPerms.can_see_groups;
					} else {
						return userPerms.user.is_staff;
					}
				case 'GroupComposer':
					return userPerms.can_see_contact_names && userPerms.can_see_groups;
				case 'RecipientTable':
					if (_p7._0 === false) {
						return userPerms.can_see_contact_names;
					} else {
						return userPerms.user.is_staff;
					}
				case 'KeywordTable':
					if (_p7._0 === false) {
						return userPerms.can_see_keywords;
					} else {
						return userPerms.user.is_staff;
					}
				case 'ElvantoImport':
					return userPerms.can_import;
				case 'Wall':
					return userPerms.can_see_incoming;
				case 'Curator':
					return userPerms.can_see_incoming;
				case 'UserProfileTable':
					return userPerms.user.is_staff;
				case 'ScheduledSmsTable':
					return userPerms.user.is_staff;
				case 'KeyRespTable':
					return userPerms.can_see_keywords && (!A2(_elm_lang$core$List$member, _p7._2, blockedKeywords));
				case 'FirstRun':
					return true;
				case 'AccessDenied':
					return true;
				case 'SendAdhoc':
					return userPerms.can_send_sms;
				case 'SendGroup':
					return userPerms.can_send_sms;
				case 'Error404':
					return true;
				case 'GroupForm':
					return userPerms.can_see_groups;
				case 'ContactForm':
					return userPerms.can_see_contact_names;
				case 'KeywordForm':
					var _p8 = _p7._1;
					if (_p8.ctor === 'Nothing') {
						return userPerms.can_see_keywords;
					} else {
						return userPerms.can_see_keywords && (!A2(_elm_lang$core$List$member, _p8._0, blockedKeywords));
					}
				case 'Home':
					return true;
				case 'SiteConfigForm':
					return userPerms.user.is_staff;
				case 'DefaultResponsesForm':
					return userPerms.user.is_staff;
				case 'CreateAllGroup':
					return userPerms.user.is_staff;
				case 'Usage':
					return userPerms.user.is_staff;
				case 'Help':
					return true;
				case 'UserProfileForm':
					return userPerms.user.is_staff;
				case 'ContactImport':
					return userPerms.can_import;
				case 'ApiSetup':
					return userPerms.user.is_staff;
				default:
					return userPerms.user.is_staff;
			}
		}();
		var _p9 = permBool;
		if (_p9 === true) {
			return {ctor: '_Tuple2', _0: page, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			return {
				ctor: '_Tuple2',
				_0: _monty5811$apostello$Pages$AccessDenied,
				_1: A2(_monty5811$apostello$Route$delayedNavigate, 3 * _elm_lang$core$Time$second, _monty5811$apostello$Pages$Home)
			};
		}
	});
var _monty5811$apostello$Route$checkPagePerms = F2(
	function (settings, _p10) {
		var _p11 = _p10;
		var _p13 = _p11._0;
		var _p12 = settings.userPerms.user.is_staff;
		if (_p12 === true) {
			return {ctor: '_Tuple2', _0: _p13, _1: _p11._1};
		} else {
			return A3(_monty5811$apostello$Route$checkPerm, settings.blockedKeywords, settings.userPerms, _p13);
		}
	});
var _monty5811$apostello$Route$maybePreventDefault = F2(
	function (msg, preventDefault) {
		var _p14 = preventDefault;
		if (_p14 === true) {
			return _elm_lang$core$Json_Decode$succeed(msg);
		} else {
			return _elm_lang$core$Json_Decode$fail('Normal link');
		}
	});
var _monty5811$apostello$Route$spaLinkClick = function (message) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'click',
		{stopPropagation: true, preventDefault: true},
		A2(
			_elm_lang$core$Json_Decode$andThen,
			_monty5811$apostello$Route$maybePreventDefault(message),
			A4(
				_elm_lang$core$Json_Decode$map3,
				F3(
					function (x, y, z) {
						return !(x || (y || z));
					}),
				A2(_elm_lang$core$Json_Decode$field, 'ctrlKey', _elm_lang$core$Json_Decode$bool),
				A2(_elm_lang$core$Json_Decode$field, 'metaKey', _elm_lang$core$Json_Decode$bool),
				A2(_elm_lang$core$Json_Decode$field, 'shiftKey', _elm_lang$core$Json_Decode$bool))));
};
var _monty5811$apostello$Route$spaLink = F4(
	function (node, attrs, nodes, page) {
		var uri = _monty5811$apostello$Route$page2loc(page);
		return A2(
			node,
			A2(
				_elm_lang$core$List$append,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href(uri),
					_1: {
						ctor: '::',
						_0: _monty5811$apostello$Route$spaLinkClick(
							_monty5811$apostello$Messages$NewUrl(uri)),
						_1: {ctor: '[]'}
					}
				},
				attrs),
			nodes);
	});
var _monty5811$apostello$Route$withEffects = function (page) {
	var _p15 = page;
	switch (_p15.ctor) {
		case 'SendAdhoc':
			return {
				ctor: '_Tuple2',
				_0: page,
				_1: A2(
					_elm_lang$core$Platform_Cmd$map,
					function (_p16) {
						return _monty5811$apostello$Messages$FormMsg(
							_monty5811$apostello$Messages$SendAdhocMsg(_p16));
					},
					_monty5811$apostello$Pages_Forms_SendAdhoc$init(_p15._0))
			};
		case 'SendGroup':
			return {
				ctor: '_Tuple2',
				_0: page,
				_1: A2(
					_elm_lang$core$Platform_Cmd$map,
					function (_p17) {
						return _monty5811$apostello$Messages$FormMsg(
							_monty5811$apostello$Messages$SendGroupMsg(_p17));
					},
					_monty5811$apostello$Pages_Forms_SendGroup$init(_p15._0))
			};
		case 'KeywordForm':
			return {
				ctor: '_Tuple2',
				_0: page,
				_1: A2(
					_elm_lang$core$Platform_Cmd$map,
					function (_p18) {
						return _monty5811$apostello$Messages$FormMsg(
							_monty5811$apostello$Messages$KeywordFormMsg(_p18));
					},
					_monty5811$apostello$Pages_Forms_Keyword$init(_p15._0))
			};
		case 'SiteConfigForm':
			return {
				ctor: '_Tuple2',
				_0: page,
				_1: A2(
					_elm_lang$core$Platform_Cmd$map,
					function (_p19) {
						return _monty5811$apostello$Messages$FormMsg(
							_monty5811$apostello$Messages$SiteConfigFormMsg(_p19));
					},
					_monty5811$apostello$Pages_Forms_SiteConfig$init)
			};
		case 'DefaultResponsesForm':
			return {
				ctor: '_Tuple2',
				_0: page,
				_1: A2(
					_elm_lang$core$Platform_Cmd$map,
					function (_p20) {
						return _monty5811$apostello$Messages$FormMsg(
							_monty5811$apostello$Messages$DefaultResponsesFormMsg(_p20));
					},
					_monty5811$apostello$Pages_Forms_DefaultResponses$init)
			};
		default:
			return {ctor: '_Tuple2', _0: page, _1: _elm_lang$core$Platform_Cmd$none};
	}
};
var _monty5811$apostello$Route$parseListInts = function (str) {
	var _p21 = str;
	if (_p21.ctor === 'Nothing') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		var _p22 = _p21._0;
		return (A2(_elm_lang$core$String$startsWith, '[', _p22) && A2(_elm_lang$core$String$endsWith, ']', _p22)) ? _elm_lang$core$Result$toMaybe(
			A3(
				_elm_lang$core$List$foldr,
				_elm_lang$core$Result$map2(
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})),
				_elm_lang$core$Result$Ok(
					{ctor: '[]'}),
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$String$toInt,
					A2(
						_elm_lang$core$String$split,
						',',
						A2(
							_elm_lang$core$String$dropRight,
							1,
							A2(_elm_lang$core$String$dropLeft, 1, _p22)))))) : _elm_lang$core$Maybe$Nothing;
	}
};
var _monty5811$apostello$Route$intListParam = function (name) {
	return A2(_evancz$url_parser$UrlParser$customParam, name, _monty5811$apostello$Route$parseListInts);
};
var _monty5811$apostello$Route$route = _evancz$url_parser$UrlParser$oneOf(
	{
		ctor: '::',
		_0: A2(_evancz$url_parser$UrlParser$map, _monty5811$apostello$Pages$Home, _evancz$url_parser$UrlParser$top),
		_1: {
			ctor: '::',
			_0: A2(
				_evancz$url_parser$UrlParser$map,
				_monty5811$apostello$Pages$initSendAdhoc,
				A2(
					_evancz$url_parser$UrlParser_ops['</>'],
					_evancz$url_parser$UrlParser$s('send'),
					A2(
						_evancz$url_parser$UrlParser_ops['<?>'],
						A2(
							_evancz$url_parser$UrlParser_ops['<?>'],
							_evancz$url_parser$UrlParser$s('adhoc'),
							_evancz$url_parser$UrlParser$stringParam('content')),
						_monty5811$apostello$Route$intListParam('recipients')))),
			_1: {
				ctor: '::',
				_0: A2(
					_evancz$url_parser$UrlParser$map,
					_monty5811$apostello$Pages$initSendGroup,
					A2(
						_evancz$url_parser$UrlParser_ops['</>'],
						_evancz$url_parser$UrlParser$s('send'),
						A2(
							_evancz$url_parser$UrlParser_ops['<?>'],
							A2(
								_evancz$url_parser$UrlParser_ops['<?>'],
								_evancz$url_parser$UrlParser$s('group'),
								_evancz$url_parser$UrlParser$stringParam('content')),
							_evancz$url_parser$UrlParser$intParam('recipient_group')))),
				_1: {
					ctor: '::',
					_0: A2(
						_evancz$url_parser$UrlParser$map,
						_monty5811$apostello$Pages$InboundTable,
						_evancz$url_parser$UrlParser$s('incoming')),
					_1: {
						ctor: '::',
						_0: A2(
							_evancz$url_parser$UrlParser$map,
							_monty5811$apostello$Pages$Curator,
							A2(
								_evancz$url_parser$UrlParser_ops['</>'],
								_evancz$url_parser$UrlParser$s('incoming'),
								_evancz$url_parser$UrlParser$s('curate_wall'))),
						_1: {
							ctor: '::',
							_0: A2(
								_evancz$url_parser$UrlParser$map,
								_monty5811$apostello$Pages$GroupTable(false),
								A2(
									_evancz$url_parser$UrlParser_ops['</>'],
									_evancz$url_parser$UrlParser$s('group'),
									_evancz$url_parser$UrlParser$s('all'))),
							_1: {
								ctor: '::',
								_0: A2(
									_evancz$url_parser$UrlParser$map,
									_monty5811$apostello$Pages$GroupTable(true),
									A2(
										_evancz$url_parser$UrlParser_ops['</>'],
										_evancz$url_parser$UrlParser$s('group'),
										_evancz$url_parser$UrlParser$s('archive'))),
								_1: {
									ctor: '::',
									_0: A2(
										_evancz$url_parser$UrlParser$map,
										_monty5811$apostello$Pages$GroupComposer(_monty5811$apostello$Pages_GroupComposer$initialModel),
										A2(
											_evancz$url_parser$UrlParser_ops['</>'],
											_evancz$url_parser$UrlParser$s('group'),
											_evancz$url_parser$UrlParser$s('composer'))),
									_1: {
										ctor: '::',
										_0: A2(
											_evancz$url_parser$UrlParser$map,
											_monty5811$apostello$Pages$RecipientTable(false),
											A2(
												_evancz$url_parser$UrlParser_ops['</>'],
												_evancz$url_parser$UrlParser$s('recipient'),
												_evancz$url_parser$UrlParser$s('all'))),
										_1: {
											ctor: '::',
											_0: A2(
												_evancz$url_parser$UrlParser$map,
												_monty5811$apostello$Pages$RecipientTable(true),
												A2(
													_evancz$url_parser$UrlParser_ops['</>'],
													_evancz$url_parser$UrlParser$s('recipient'),
													_evancz$url_parser$UrlParser$s('archive'))),
											_1: {
												ctor: '::',
												_0: A2(
													_evancz$url_parser$UrlParser$map,
													_monty5811$apostello$Pages$KeywordTable(false),
													A2(
														_evancz$url_parser$UrlParser_ops['</>'],
														_evancz$url_parser$UrlParser$s('keyword'),
														_evancz$url_parser$UrlParser$s('all'))),
												_1: {
													ctor: '::',
													_0: A2(
														_evancz$url_parser$UrlParser$map,
														_monty5811$apostello$Pages$KeywordTable(true),
														A2(
															_evancz$url_parser$UrlParser_ops['</>'],
															_evancz$url_parser$UrlParser$s('keyword'),
															_evancz$url_parser$UrlParser$s('archive'))),
													_1: {
														ctor: '::',
														_0: A2(
															_evancz$url_parser$UrlParser$map,
															A2(_monty5811$apostello$Pages$KeyRespTable, false, false),
															A2(
																_evancz$url_parser$UrlParser_ops['</>'],
																_evancz$url_parser$UrlParser$s('keyword'),
																A2(
																	_evancz$url_parser$UrlParser_ops['</>'],
																	_evancz$url_parser$UrlParser$s('responses'),
																	_evancz$url_parser$UrlParser$string))),
														_1: {
															ctor: '::',
															_0: A2(
																_evancz$url_parser$UrlParser$map,
																A2(_monty5811$apostello$Pages$KeyRespTable, false, true),
																A2(
																	_evancz$url_parser$UrlParser_ops['</>'],
																	_evancz$url_parser$UrlParser$s('keyword'),
																	A2(
																		_evancz$url_parser$UrlParser_ops['</>'],
																		_evancz$url_parser$UrlParser$s('responses'),
																		A2(
																			_evancz$url_parser$UrlParser_ops['</>'],
																			_evancz$url_parser$UrlParser$s('archive'),
																			_evancz$url_parser$UrlParser$string)))),
															_1: {
																ctor: '::',
																_0: A2(
																	_evancz$url_parser$UrlParser$map,
																	_monty5811$apostello$Pages$OutboundTable,
																	_evancz$url_parser$UrlParser$s('outgoing')),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_evancz$url_parser$UrlParser$map,
																		_monty5811$apostello$Pages$ScheduledSmsTable,
																		A2(
																			_evancz$url_parser$UrlParser_ops['</>'],
																			_evancz$url_parser$UrlParser$s('scheduled'),
																			_evancz$url_parser$UrlParser$s('sms'))),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_evancz$url_parser$UrlParser$map,
																			_monty5811$apostello$Pages$UserProfileTable,
																			A2(
																				_evancz$url_parser$UrlParser_ops['</>'],
																				_evancz$url_parser$UrlParser$s('users'),
																				_evancz$url_parser$UrlParser$s('profiles'))),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_evancz$url_parser$UrlParser$map,
																				_monty5811$apostello$Pages$ElvantoImport,
																				A2(
																					_evancz$url_parser$UrlParser_ops['</>'],
																					_evancz$url_parser$UrlParser$s('elvanto'),
																					_evancz$url_parser$UrlParser$s('import'))),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_evancz$url_parser$UrlParser$map,
																					_monty5811$apostello$Pages$FirstRun(_monty5811$apostello$Pages_FirstRun$initialModel),
																					A2(
																						_evancz$url_parser$UrlParser_ops['</>'],
																						_evancz$url_parser$UrlParser$s('config'),
																						_evancz$url_parser$UrlParser$s('first_run'))),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_evancz$url_parser$UrlParser$map,
																						_monty5811$apostello$Pages$Debug(_monty5811$apostello$Pages_Debug$initialModel),
																						A2(
																							_evancz$url_parser$UrlParser_ops['</>'],
																							_evancz$url_parser$UrlParser$s('config'),
																							_evancz$url_parser$UrlParser$s('debug'))),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_evancz$url_parser$UrlParser$map,
																							function (_p23) {
																								return A2(
																									_monty5811$apostello$Pages$GroupForm,
																									_monty5811$apostello$Pages_Forms_Group$initialModel,
																									_elm_lang$core$Maybe$Just(_p23));
																							},
																							A2(
																								_evancz$url_parser$UrlParser_ops['</>'],
																								_evancz$url_parser$UrlParser$s('group'),
																								A2(
																									_evancz$url_parser$UrlParser_ops['</>'],
																									_evancz$url_parser$UrlParser$s('edit'),
																									_evancz$url_parser$UrlParser$int))),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_evancz$url_parser$UrlParser$map,
																								A2(_monty5811$apostello$Pages$GroupForm, _monty5811$apostello$Pages_Forms_Group$initialModel, _elm_lang$core$Maybe$Nothing),
																								A2(
																									_evancz$url_parser$UrlParser_ops['</>'],
																									_evancz$url_parser$UrlParser$s('group'),
																									_evancz$url_parser$UrlParser$s('new'))),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_evancz$url_parser$UrlParser$map,
																									function (_p24) {
																										return A2(
																											_monty5811$apostello$Pages$ContactForm,
																											_monty5811$apostello$Pages_Forms_Contact$initialModel,
																											_elm_lang$core$Maybe$Just(_p24));
																									},
																									A2(
																										_evancz$url_parser$UrlParser_ops['</>'],
																										_evancz$url_parser$UrlParser$s('recipient'),
																										A2(
																											_evancz$url_parser$UrlParser_ops['</>'],
																											_evancz$url_parser$UrlParser$s('edit'),
																											_evancz$url_parser$UrlParser$int))),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_evancz$url_parser$UrlParser$map,
																										A2(_monty5811$apostello$Pages$ContactForm, _monty5811$apostello$Pages_Forms_Contact$initialModel, _elm_lang$core$Maybe$Nothing),
																										A2(
																											_evancz$url_parser$UrlParser_ops['</>'],
																											_evancz$url_parser$UrlParser$s('recipient'),
																											_evancz$url_parser$UrlParser$s('new'))),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_evancz$url_parser$UrlParser$map,
																											A2(_monty5811$apostello$Pages$KeywordForm, _monty5811$apostello$Pages_Forms_Keyword$initialModel, _elm_lang$core$Maybe$Nothing),
																											A2(
																												_evancz$url_parser$UrlParser_ops['</>'],
																												_evancz$url_parser$UrlParser$s('keyword'),
																												_evancz$url_parser$UrlParser$s('new'))),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_evancz$url_parser$UrlParser$map,
																												function (_p25) {
																													return A2(
																														_monty5811$apostello$Pages$KeywordForm,
																														_monty5811$apostello$Pages_Forms_Keyword$initialModel,
																														_elm_lang$core$Maybe$Just(_p25));
																												},
																												A2(
																													_evancz$url_parser$UrlParser_ops['</>'],
																													_evancz$url_parser$UrlParser$s('keyword'),
																													A2(
																														_evancz$url_parser$UrlParser_ops['</>'],
																														_evancz$url_parser$UrlParser$s('edit'),
																														_evancz$url_parser$UrlParser$string))),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_evancz$url_parser$UrlParser$map,
																													_monty5811$apostello$Pages$SiteConfigForm(_elm_lang$core$Maybe$Nothing),
																													A2(
																														_evancz$url_parser$UrlParser_ops['</>'],
																														_evancz$url_parser$UrlParser$s('config'),
																														_evancz$url_parser$UrlParser$s('site'))),
																												_1: {
																													ctor: '::',
																													_0: A2(
																														_evancz$url_parser$UrlParser$map,
																														_monty5811$apostello$Pages$DefaultResponsesForm(_elm_lang$core$Maybe$Nothing),
																														A2(
																															_evancz$url_parser$UrlParser_ops['</>'],
																															_evancz$url_parser$UrlParser$s('config'),
																															_evancz$url_parser$UrlParser$s('responses'))),
																													_1: {
																														ctor: '::',
																														_0: A2(
																															_evancz$url_parser$UrlParser$map,
																															_monty5811$apostello$Pages$CreateAllGroup(''),
																															A2(
																																_evancz$url_parser$UrlParser_ops['</>'],
																																_evancz$url_parser$UrlParser$s('group'),
																																_evancz$url_parser$UrlParser$s('create_all'))),
																														_1: {
																															ctor: '::',
																															_0: A2(
																																_evancz$url_parser$UrlParser$map,
																																_monty5811$apostello$Pages$UserProfileForm(_monty5811$apostello$Pages_Forms_UserProfile$initialModel),
																																A2(
																																	_evancz$url_parser$UrlParser_ops['</>'],
																																	_evancz$url_parser$UrlParser$s('users'),
																																	A2(
																																		_evancz$url_parser$UrlParser_ops['</>'],
																																		_evancz$url_parser$UrlParser$s('profiles'),
																																		_evancz$url_parser$UrlParser$int))),
																															_1: {
																																ctor: '::',
																																_0: A2(
																																	_evancz$url_parser$UrlParser$map,
																																	_monty5811$apostello$Pages$ContactImport(''),
																																	A2(
																																		_evancz$url_parser$UrlParser_ops['</>'],
																																		_evancz$url_parser$UrlParser$s('recipient'),
																																		_evancz$url_parser$UrlParser$s('import'))),
																																_1: {
																																	ctor: '::',
																																	_0: A2(
																																		_evancz$url_parser$UrlParser$map,
																																		_monty5811$apostello$Pages$ApiSetup(_elm_lang$core$Maybe$Nothing),
																																		_evancz$url_parser$UrlParser$s('api-setup')),
																																	_1: {
																																		ctor: '::',
																																		_0: A2(
																																			_evancz$url_parser$UrlParser$map,
																																			_monty5811$apostello$Pages$Help,
																																			_evancz$url_parser$UrlParser$s('help')),
																																		_1: {
																																			ctor: '::',
																																			_0: A2(
																																				_evancz$url_parser$UrlParser$map,
																																				_monty5811$apostello$Pages$Wall,
																																				A2(
																																					_evancz$url_parser$UrlParser_ops['</>'],
																																					_evancz$url_parser$UrlParser$s('incoming'),
																																					_evancz$url_parser$UrlParser$s('wall'))),
																																			_1: {
																																				ctor: '::',
																																				_0: A2(
																																					_evancz$url_parser$UrlParser$map,
																																					_monty5811$apostello$Pages$Usage,
																																					_evancz$url_parser$UrlParser$s('usage')),
																																				_1: {ctor: '[]'}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _monty5811$apostello$Route$loc2Page = F2(
	function (location, settings) {
		return A2(
			_monty5811$apostello$Route$checkPagePerms,
			settings,
			_monty5811$apostello$Route$withEffects(
				A2(
					_elm_lang$core$Maybe$withDefault,
					_monty5811$apostello$Pages$Error404,
					A2(_evancz$url_parser$UrlParser$parsePath, _monty5811$apostello$Route$route, location))));
	});

var _monty5811$apostello$Forms_Update$extractFloat = F3(
	function (fn, field, maybeRec) {
		var _p0 = field;
		if (_p0.ctor === 'Nothing') {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				0,
				A2(_elm_lang$core$Maybe$map, fn, maybeRec));
		} else {
			return _p0._0;
		}
	});
var _monty5811$apostello$Forms_Update$extractField = F3(
	function (fn, field, maybeRec) {
		var _p1 = field;
		if (_p1.ctor === 'Nothing') {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				'',
				A2(_elm_lang$core$Maybe$map, fn, maybeRec));
		} else {
			return _p1._0;
		}
	});
var _monty5811$apostello$Forms_Update$extractBool = F3(
	function (fn, field, maybeRec) {
		var _p2 = field;
		if (_p2.ctor === 'Nothing') {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				false,
				A2(_elm_lang$core$Maybe$map, fn, maybeRec));
		} else {
			return _p2._0;
		}
	});
var _monty5811$apostello$Forms_Update$extractPks = F3(
	function (fn, field, maybeKeyword) {
		var _p3 = field;
		if (_p3.ctor === 'Nothing') {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				A2(_elm_lang$core$Maybe$map, fn, maybeKeyword));
		} else {
			return _p3._0;
		}
	});
var _monty5811$apostello$Forms_Update$extractMaybeDate = F3(
	function (fn, field, maybeKeyword) {
		var _p4 = field;
		if (_p4.ctor === 'Nothing') {
			return A2(_elm_lang$core$Maybe$andThen, fn, maybeKeyword);
		} else {
			return _elm_lang$core$Maybe$Just(_p4._0);
		}
	});
var _monty5811$apostello$Forms_Update$extractDate = F4(
	function (now, fn, field, maybeKeyword) {
		var _p5 = field;
		if (_p5.ctor === 'Nothing') {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				_elm_lang$core$Date$fromTime(now),
				A2(_elm_lang$core$Maybe$map, fn, maybeKeyword));
		} else {
			return _p5._0;
		}
	});
var _monty5811$apostello$Forms_Update$addPk = F2(
	function (maybeRecord, body) {
		var _p6 = maybeRecord;
		if (_p6.ctor === 'Nothing') {
			return body;
		} else {
			return {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'pk',
					_1: _elm_lang$core$Json_Encode$int(_p6._0.pk)
				},
				_1: body
			};
		}
	});
var _monty5811$apostello$Forms_Update$postUserProfileCmd = F3(
	function (csrf, model, maybeProfile) {
		var body = A2(
			_monty5811$apostello$Forms_Update$addPk,
			maybeProfile,
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'approved',
					_1: _elm_lang$core$Json_Encode$bool(
						A3(
							_monty5811$apostello$Forms_Update$extractBool,
							function (_) {
								return _.approved;
							},
							model.approved,
							maybeProfile))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'message_cost_limit',
						_1: _elm_lang$core$Json_Encode$float(
							A3(
								_monty5811$apostello$Forms_Update$extractFloat,
								function (_) {
									return _.message_cost_limit;
								},
								model.message_cost_limit,
								maybeProfile))
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'can_see_groups',
							_1: _elm_lang$core$Json_Encode$bool(
								A3(
									_monty5811$apostello$Forms_Update$extractBool,
									function (_) {
										return _.can_see_groups;
									},
									model.can_see_groups,
									maybeProfile))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'can_see_contact_names',
								_1: _elm_lang$core$Json_Encode$bool(
									A3(
										_monty5811$apostello$Forms_Update$extractBool,
										function (_) {
											return _.can_see_contact_names;
										},
										model.can_see_contact_names,
										maybeProfile))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'can_see_keywords',
									_1: _elm_lang$core$Json_Encode$bool(
										A3(
											_monty5811$apostello$Forms_Update$extractBool,
											function (_) {
												return _.can_see_keywords;
											},
											model.can_see_keywords,
											maybeProfile))
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'can_see_outgoing',
										_1: _elm_lang$core$Json_Encode$bool(
											A3(
												_monty5811$apostello$Forms_Update$extractBool,
												function (_) {
													return _.can_see_outgoing;
												},
												model.can_see_outgoing,
												maybeProfile))
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'can_see_incoming',
											_1: _elm_lang$core$Json_Encode$bool(
												A3(
													_monty5811$apostello$Forms_Update$extractBool,
													function (_) {
														return _.can_see_incoming;
													},
													model.can_see_incoming,
													maybeProfile))
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'can_send_sms',
												_1: _elm_lang$core$Json_Encode$bool(
													A3(
														_monty5811$apostello$Forms_Update$extractBool,
														function (_) {
															return _.can_send_sms;
														},
														model.can_send_sms,
														maybeProfile))
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'can_see_contact_nums',
													_1: _elm_lang$core$Json_Encode$bool(
														A3(
															_monty5811$apostello$Forms_Update$extractBool,
															function (_) {
																return _.can_see_contact_nums;
															},
															model.can_see_contact_nums,
															maybeProfile))
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'can_see_contact_notes',
														_1: _elm_lang$core$Json_Encode$bool(
															A3(
																_monty5811$apostello$Forms_Update$extractBool,
																function (_) {
																	return _.can_see_contact_notes;
																},
																model.can_see_contact_notes,
																maybeProfile))
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'can_import',
															_1: _elm_lang$core$Json_Encode$bool(
																A3(
																	_monty5811$apostello$Forms_Update$extractBool,
																	function (_) {
																		return _.can_import;
																	},
																	model.can_import,
																	maybeProfile))
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: 'can_archive',
																_1: _elm_lang$core$Json_Encode$bool(
																	A3(
																		_monty5811$apostello$Forms_Update$extractBool,
																		function (_) {
																			return _.can_archive;
																		},
																		model.can_archive,
																		maybeProfile))
															},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			});
		var _p7 = maybeProfile;
		if (_p7.ctor === 'Nothing') {
			return _elm_lang$core$Platform_Cmd$none;
		} else {
			return A2(
				_elm_lang$http$Http$send,
				function (_p8) {
					return _monty5811$apostello$Messages$FormMsg(
						A2(
							_monty5811$apostello$Messages$ReceiveFormResp,
							{
								ctor: '::',
								_0: _elm_lang$navigation$Navigation$newUrl(
									_monty5811$apostello$Route$page2loc(_monty5811$apostello$Pages$UserProfileTable)),
								_1: {ctor: '[]'}
							},
							_p8));
				},
				A3(_monty5811$apostello$DjangoSend$rawPost, csrf, _monty5811$apostello$Urls$api_user_profiles, body));
		}
	});
var _monty5811$apostello$Forms_Update$postSiteConfigCmd = F2(
	function (csrf, model) {
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'site_name',
				_1: _elm_lang$core$Json_Encode$string(model.site_name)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'sms_char_limit',
					_1: _elm_lang$core$Json_Encode$int(model.sms_char_limit)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'default_number_prefix',
						_1: _elm_lang$core$Json_Encode$string(model.default_number_prefix)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'disable_all_replies',
							_1: _elm_lang$core$Json_Encode$bool(model.disable_all_replies)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'disable_email_login_form',
								_1: _elm_lang$core$Json_Encode$bool(model.disable_email_login_form)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'office_email',
									_1: _elm_lang$core$Json_Encode$string(model.office_email)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'auto_add_new_groups',
										_1: _elm_lang$core$Json_Encode$list(
											A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$int, model.auto_add_new_groups))
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'sms_expiration_date',
											_1: _monty5811$apostello$Encode$encodeMaybeDateOnly(model.sms_expiration_date)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'sms_rolling_expiration_days',
												_1: A2(_monty5811$apostello$Encode$encodeMaybe, _elm_lang$core$Json_Encode$int, model.sms_rolling_expiration_days)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'slack_url',
													_1: _elm_lang$core$Json_Encode$string(model.slack_url)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'sync_elvanto',
														_1: _elm_lang$core$Json_Encode$bool(model.sync_elvanto)
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'not_approved_msg',
															_1: _elm_lang$core$Json_Encode$string(model.not_approved_msg)
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: 'email_host',
																_1: A2(_monty5811$apostello$Encode$encodeMaybe, _elm_lang$core$Json_Encode$string, model.email_host)
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: 'email_port',
																	_1: A2(_monty5811$apostello$Encode$encodeMaybe, _elm_lang$core$Json_Encode$int, model.email_port)
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: 'email_username',
																		_1: A2(_monty5811$apostello$Encode$encodeMaybe, _elm_lang$core$Json_Encode$string, model.email_username)
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '_Tuple2',
																			_0: 'email_password',
																			_1: A2(_monty5811$apostello$Encode$encodeMaybe, _elm_lang$core$Json_Encode$string, model.email_password)
																		},
																		_1: {
																			ctor: '::',
																			_0: {
																				ctor: '_Tuple2',
																				_0: 'email_from',
																				_1: A2(_monty5811$apostello$Encode$encodeMaybe, _elm_lang$core$Json_Encode$string, model.email_from)
																			},
																			_1: {
																				ctor: '::',
																				_0: {
																					ctor: '_Tuple2',
																					_0: 'twilio_from_num',
																					_1: A2(_monty5811$apostello$Encode$encodeMaybe, _elm_lang$core$Json_Encode$string, model.twilio_from_num)
																				},
																				_1: {
																					ctor: '::',
																					_0: {
																						ctor: '_Tuple2',
																						_0: 'twilio_sending_cost',
																						_1: A2(_monty5811$apostello$Encode$encodeMaybe, _elm_lang$core$Json_Encode$float, model.twilio_sending_cost)
																					},
																					_1: {
																						ctor: '::',
																						_0: {
																							ctor: '_Tuple2',
																							_0: 'twilio_auth_token',
																							_1: A2(_monty5811$apostello$Encode$encodeMaybe, _elm_lang$core$Json_Encode$string, model.twilio_auth_token)
																						},
																						_1: {
																							ctor: '::',
																							_0: {
																								ctor: '_Tuple2',
																								_0: 'twilio_account_sid',
																								_1: A2(_monty5811$apostello$Encode$encodeMaybe, _elm_lang$core$Json_Encode$string, model.twilio_account_sid)
																							},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		};
		return A2(
			_elm_lang$http$Http$send,
			function (_p9) {
				return _monty5811$apostello$Messages$FormMsg(
					A2(
						_monty5811$apostello$Messages$ReceiveFormResp,
						{
							ctor: '::',
							_0: _elm_lang$navigation$Navigation$newUrl(
								_monty5811$apostello$Route$page2loc(_monty5811$apostello$Pages$Home)),
							_1: {ctor: '[]'}
						},
						_p9));
			},
			A3(_monty5811$apostello$DjangoSend$rawPost, csrf, _monty5811$apostello$Urls$api_site_config, body));
	});
var _monty5811$apostello$Forms_Update$postSendGroupCmd = F3(
	function (csrf, userPerms, model) {
		var newLoc = function () {
			var _p10 = model.date;
			if (_p10.ctor === 'Nothing') {
				return _monty5811$apostello$Pages$OutboundTable;
			} else {
				var _p11 = userPerms.user.is_staff;
				if (_p11 === true) {
					return _monty5811$apostello$Pages$ScheduledSmsTable;
				} else {
					return _monty5811$apostello$Pages$OutboundTable;
				}
			}
		}();
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'content',
				_1: _elm_lang$core$Json_Encode$string(model.content)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'recipient_group',
					_1: _elm_lang$core$Json_Encode$int(
						A2(_elm_lang$core$Maybe$withDefault, 0, model.selectedPk))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'scheduled_time',
						_1: _monty5811$apostello$Encode$encodeMaybeDate(model.date)
					},
					_1: {ctor: '[]'}
				}
			}
		};
		return A2(
			_elm_lang$http$Http$send,
			function (_p12) {
				return _monty5811$apostello$Messages$FormMsg(
					A2(
						_monty5811$apostello$Messages$ReceiveFormResp,
						{
							ctor: '::',
							_0: _elm_lang$navigation$Navigation$newUrl(
								_monty5811$apostello$Route$page2loc(newLoc)),
							_1: {ctor: '[]'}
						},
						_p12));
			},
			A3(_monty5811$apostello$DjangoSend$rawPost, csrf, _monty5811$apostello$Urls$api_act_send_group, body));
	});
var _monty5811$apostello$Forms_Update$postSendAdhocCmd = F3(
	function (csrf, userPerms, model) {
		var newLoc = function () {
			var _p13 = model.date;
			if (_p13.ctor === 'Nothing') {
				return _monty5811$apostello$Pages$OutboundTable;
			} else {
				var _p14 = userPerms.user.is_staff;
				if (_p14 === true) {
					return _monty5811$apostello$Pages$ScheduledSmsTable;
				} else {
					return _monty5811$apostello$Pages$OutboundTable;
				}
			}
		}();
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'content',
				_1: _elm_lang$core$Json_Encode$string(model.content)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'recipients',
					_1: _elm_lang$core$Json_Encode$list(
						A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$int, model.selectedContacts))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'scheduled_time',
						_1: _monty5811$apostello$Encode$encodeMaybeDate(model.date)
					},
					_1: {ctor: '[]'}
				}
			}
		};
		return A2(
			_elm_lang$http$Http$send,
			function (_p15) {
				return _monty5811$apostello$Messages$FormMsg(
					A2(
						_monty5811$apostello$Messages$ReceiveFormResp,
						{
							ctor: '::',
							_0: _elm_lang$navigation$Navigation$newUrl(
								_monty5811$apostello$Route$page2loc(newLoc)),
							_1: {ctor: '[]'}
						},
						_p15));
			},
			A3(_monty5811$apostello$DjangoSend$rawPost, csrf, _monty5811$apostello$Urls$api_act_send_adhoc, body));
	});
var _monty5811$apostello$Forms_Update$postGroupCmd = F3(
	function (csrf, model, maybeGroup) {
		var body = A2(
			_monty5811$apostello$Forms_Update$addPk,
			maybeGroup,
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'name',
					_1: _elm_lang$core$Json_Encode$string(
						A3(
							_monty5811$apostello$Forms_Update$extractField,
							function (_) {
								return _.name;
							},
							model.name,
							maybeGroup))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'description',
						_1: _elm_lang$core$Json_Encode$string(
							A3(
								_monty5811$apostello$Forms_Update$extractField,
								function (_) {
									return _.description;
								},
								model.description,
								maybeGroup))
					},
					_1: {ctor: '[]'}
				}
			});
		return A2(
			_elm_lang$http$Http$send,
			function (_p16) {
				return _monty5811$apostello$Messages$FormMsg(
					A2(
						_monty5811$apostello$Messages$ReceiveFormResp,
						{
							ctor: '::',
							_0: _elm_lang$navigation$Navigation$newUrl(
								_monty5811$apostello$Route$page2loc(
									_monty5811$apostello$Pages$GroupTable(false))),
							_1: {ctor: '[]'}
						},
						_p16));
			},
			A3(
				_monty5811$apostello$DjangoSend$rawPost,
				csrf,
				_monty5811$apostello$Urls$api_recipient_groups(_elm_lang$core$Maybe$Nothing),
				body));
	});
var _monty5811$apostello$Forms_Update$postDefautlRespCmd = F2(
	function (csrf, model) {
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'keyword_no_match',
				_1: _elm_lang$core$Json_Encode$string(model.keyword_no_match)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'default_no_keyword_auto_reply',
					_1: _elm_lang$core$Json_Encode$string(model.default_no_keyword_auto_reply)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'default_no_keyword_not_live',
						_1: _elm_lang$core$Json_Encode$string(model.default_no_keyword_not_live)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'start_reply',
							_1: _elm_lang$core$Json_Encode$string(model.start_reply)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'auto_name_request',
								_1: _elm_lang$core$Json_Encode$string(model.auto_name_request)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'name_update_reply',
									_1: _elm_lang$core$Json_Encode$string(model.name_update_reply)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'name_failure_reply',
										_1: _elm_lang$core$Json_Encode$string(model.name_failure_reply)
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		};
		return A2(
			_elm_lang$http$Http$send,
			function (_p17) {
				return _monty5811$apostello$Messages$FormMsg(
					A2(
						_monty5811$apostello$Messages$ReceiveFormResp,
						{
							ctor: '::',
							_0: _elm_lang$navigation$Navigation$newUrl(
								_monty5811$apostello$Route$page2loc(_monty5811$apostello$Pages$Home)),
							_1: {ctor: '[]'}
						},
						_p17));
			},
			A3(_monty5811$apostello$DjangoSend$rawPost, csrf, _monty5811$apostello$Urls$api_default_responses, body));
	});
var _monty5811$apostello$Forms_Update$postCreateAllGroupCmd = F2(
	function (csrf, name) {
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'group_name',
				_1: _elm_lang$core$Json_Encode$string(name)
			},
			_1: {ctor: '[]'}
		};
		return A2(
			_elm_lang$http$Http$send,
			function (_p18) {
				return _monty5811$apostello$Messages$FormMsg(
					A2(
						_monty5811$apostello$Messages$ReceiveFormResp,
						{
							ctor: '::',
							_0: _elm_lang$navigation$Navigation$newUrl(
								_monty5811$apostello$Route$page2loc(
									_monty5811$apostello$Pages$GroupTable(false))),
							_1: {ctor: '[]'}
						},
						_p18));
			},
			A3(_monty5811$apostello$DjangoSend$rawPost, csrf, _monty5811$apostello$Urls$api_act_create_all_group, body));
	});
var _monty5811$apostello$Forms_Update$postContactImportCmd = F2(
	function (csrf, csv) {
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'csv_data',
				_1: _elm_lang$core$Json_Encode$string(csv)
			},
			_1: {ctor: '[]'}
		};
		return A2(
			_elm_lang$http$Http$send,
			function (_p19) {
				return _monty5811$apostello$Messages$FormMsg(
					A2(
						_monty5811$apostello$Messages$ReceiveFormResp,
						{
							ctor: '::',
							_0: _elm_lang$navigation$Navigation$newUrl(
								_monty5811$apostello$Route$page2loc(_monty5811$apostello$Pages$Home)),
							_1: {ctor: '[]'}
						},
						_p19));
			},
			A3(_monty5811$apostello$DjangoSend$rawPost, csrf, _monty5811$apostello$Urls$api_recipients_import_csv, body));
	});
var _monty5811$apostello$Forms_Update$addContactNotes = F4(
	function (model, canSeeContactNotes, maybeContact, body) {
		return canSeeContactNotes ? {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'notes',
				_1: _elm_lang$core$Json_Encode$string(
					A3(
						_monty5811$apostello$Forms_Update$extractField,
						function (_) {
							return _.notes;
						},
						model.notes,
						maybeContact))
			},
			_1: body
		} : body;
	});
var _monty5811$apostello$Forms_Update$addContactNumber = F4(
	function (model, canSeeContactNum, maybeContact, body) {
		return canSeeContactNum ? {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'number',
				_1: _elm_lang$core$Json_Encode$string(
					A3(
						_monty5811$apostello$Forms_Update$extractField,
						function (_p20) {
							return A2(
								_elm_lang$core$Maybe$withDefault,
								'',
								function (_) {
									return _.number;
								}(_p20));
						},
						model.number,
						maybeContact))
			},
			_1: body
		} : body;
	});
var _monty5811$apostello$Forms_Update$postContactFormCmd = F5(
	function (csrf, model, canSeeContactNum, canSeeContactNotes, maybeContact) {
		var body = A4(
			_monty5811$apostello$Forms_Update$addContactNotes,
			model,
			canSeeContactNotes,
			maybeContact,
			A4(
				_monty5811$apostello$Forms_Update$addContactNumber,
				model,
				canSeeContactNum,
				maybeContact,
				A2(
					_monty5811$apostello$Forms_Update$addPk,
					maybeContact,
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'first_name',
							_1: _elm_lang$core$Json_Encode$string(
								A3(
									_monty5811$apostello$Forms_Update$extractField,
									function (_) {
										return _.first_name;
									},
									model.first_name,
									maybeContact))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'last_name',
								_1: _elm_lang$core$Json_Encode$string(
									A3(
										_monty5811$apostello$Forms_Update$extractField,
										function (_) {
											return _.last_name;
										},
										model.last_name,
										maybeContact))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'do_not_reply',
									_1: _elm_lang$core$Json_Encode$bool(
										A3(
											_monty5811$apostello$Forms_Update$extractBool,
											function (_) {
												return _.do_not_reply;
											},
											model.do_not_reply,
											maybeContact))
								},
								_1: {ctor: '[]'}
							}
						}
					})));
		return A2(
			_elm_lang$http$Http$send,
			function (_p21) {
				return _monty5811$apostello$Messages$FormMsg(
					A2(
						_monty5811$apostello$Messages$ReceiveFormResp,
						{
							ctor: '::',
							_0: _elm_lang$navigation$Navigation$newUrl(
								_monty5811$apostello$Route$page2loc(
									_monty5811$apostello$Pages$RecipientTable(false))),
							_1: {ctor: '[]'}
						},
						_p21));
			},
			A3(
				_monty5811$apostello$DjangoSend$rawPost,
				csrf,
				_monty5811$apostello$Urls$api_recipients(_elm_lang$core$Maybe$Nothing),
				body));
	});
var _monty5811$apostello$Forms_Update$postKeywordFormCmd = F4(
	function (csrf, now, model, maybeKeyword) {
		var body = A2(
			_monty5811$apostello$Forms_Update$addPk,
			maybeKeyword,
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'keyword',
					_1: _elm_lang$core$Json_Encode$string(
						A3(
							_monty5811$apostello$Forms_Update$extractField,
							function (_) {
								return _.keyword;
							},
							model.keyword,
							maybeKeyword))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'description',
						_1: _elm_lang$core$Json_Encode$string(
							A3(
								_monty5811$apostello$Forms_Update$extractField,
								function (_) {
									return _.description;
								},
								model.description,
								maybeKeyword))
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'disable_all_replies',
							_1: _elm_lang$core$Json_Encode$bool(
								A3(
									_monty5811$apostello$Forms_Update$extractBool,
									function (_) {
										return _.disable_all_replies;
									},
									model.disable_all_replies,
									maybeKeyword))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'custom_response',
								_1: _elm_lang$core$Json_Encode$string(
									A3(
										_monty5811$apostello$Forms_Update$extractField,
										function (_) {
											return _.custom_response;
										},
										model.custom_response,
										maybeKeyword))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'custom_response_new_person',
									_1: _elm_lang$core$Json_Encode$string(
										A3(
											_monty5811$apostello$Forms_Update$extractField,
											function (_) {
												return _.custom_response_new_person;
											},
											model.custom_response_new_person,
											maybeKeyword))
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'deactivated_response',
										_1: _elm_lang$core$Json_Encode$string(
											A3(
												_monty5811$apostello$Forms_Update$extractField,
												function (_) {
													return _.deactivated_response;
												},
												model.deactivated_response,
												maybeKeyword))
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'too_early_response',
											_1: _elm_lang$core$Json_Encode$string(
												A3(
													_monty5811$apostello$Forms_Update$extractField,
													function (_) {
														return _.too_early_response;
													},
													model.too_early_response,
													maybeKeyword))
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'activate_time',
												_1: _monty5811$apostello$Encode$encodeDate(
													A4(
														_monty5811$apostello$Forms_Update$extractDate,
														now,
														function (_) {
															return _.activate_time;
														},
														model.activate_time,
														maybeKeyword))
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'deactivate_time',
													_1: _monty5811$apostello$Encode$encodeMaybeDate(
														A3(
															_monty5811$apostello$Forms_Update$extractMaybeDate,
															function (_) {
																return _.deactivate_time;
															},
															model.deactivate_time,
															maybeKeyword))
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'linked_groups',
														_1: _elm_lang$core$Json_Encode$list(
															A2(
																_elm_lang$core$List$map,
																_elm_lang$core$Json_Encode$int,
																A3(
																	_monty5811$apostello$Forms_Update$extractPks,
																	function (_) {
																		return _.linked_groups;
																	},
																	model.linked_groups,
																	maybeKeyword)))
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'owners',
															_1: _elm_lang$core$Json_Encode$list(
																A2(
																	_elm_lang$core$List$map,
																	_elm_lang$core$Json_Encode$int,
																	A3(
																		_monty5811$apostello$Forms_Update$extractPks,
																		function (_) {
																			return _.owners;
																		},
																		model.owners,
																		maybeKeyword)))
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: 'subscribed_to_digest',
																_1: _elm_lang$core$Json_Encode$list(
																	A2(
																		_elm_lang$core$List$map,
																		_elm_lang$core$Json_Encode$int,
																		A3(
																			_monty5811$apostello$Forms_Update$extractPks,
																			function (_) {
																				return _.subscribed_to_digest;
																			},
																			model.subscribers,
																			maybeKeyword)))
															},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			});
		return A2(
			_elm_lang$http$Http$send,
			function (_p22) {
				return _monty5811$apostello$Messages$FormMsg(
					A2(
						_monty5811$apostello$Messages$ReceiveFormResp,
						{
							ctor: '::',
							_0: _elm_lang$navigation$Navigation$newUrl(
								_monty5811$apostello$Route$page2loc(
									_monty5811$apostello$Pages$KeywordTable(false))),
							_1: {ctor: '[]'}
						},
						_p22));
			},
			A3(
				_monty5811$apostello$DjangoSend$rawPost,
				csrf,
				_monty5811$apostello$Urls$api_keywords(_elm_lang$core$Maybe$Nothing),
				body));
	});
var _monty5811$apostello$Forms_Update$setInProgress = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{formStatus: _monty5811$apostello$Forms_Model$InProgress});
};
var _monty5811$apostello$Forms_Update$update = F2(
	function (msg, model) {
		var _p23 = msg;
		switch (_p23.ctor) {
			case 'PostCreateAllGroupForm':
				var _p24 = model.page;
				if (_p24.ctor === 'CreateAllGroup') {
					return {
						ctor: '_Tuple2',
						_0: _monty5811$apostello$Forms_Update$setInProgress(model),
						_1: {
							ctor: '::',
							_0: A2(_monty5811$apostello$Forms_Update$postCreateAllGroupCmd, model.settings.csrftoken, _p24._0),
							_1: {ctor: '[]'}
						}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'PostDefaultRespForm':
				var _p25 = model.page;
				if ((_p25.ctor === 'DefaultResponsesForm') && (_p25._0.ctor === 'Just')) {
					return {
						ctor: '_Tuple2',
						_0: _monty5811$apostello$Forms_Update$setInProgress(model),
						_1: {
							ctor: '::',
							_0: A2(_monty5811$apostello$Forms_Update$postDefautlRespCmd, model.settings.csrftoken, _p25._0._0),
							_1: {ctor: '[]'}
						}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'PostGroupForm':
				var _p26 = model.page;
				if (_p26.ctor === 'GroupForm') {
					return {
						ctor: '_Tuple2',
						_0: _monty5811$apostello$Forms_Update$setInProgress(model),
						_1: {
							ctor: '::',
							_0: A3(
								_monty5811$apostello$Forms_Update$postGroupCmd,
								model.settings.csrftoken,
								_p26._0,
								_elm_lang$core$List$head(
									_monty5811$remote_list$RemoteList$toList(
										A2(
											_monty5811$remote_list$RemoteList$filter,
											function (x) {
												return _elm_lang$core$Native_Utils.eq(
													_elm_lang$core$Maybe$Just(x.pk),
													_p26._1);
											},
											model.dataStore.groups)))),
							_1: {ctor: '[]'}
						}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'PostSendAdhocForm':
				var _p27 = model.page;
				if (_p27.ctor === 'SendAdhoc') {
					return {
						ctor: '_Tuple2',
						_0: _monty5811$apostello$Forms_Update$setInProgress(model),
						_1: {
							ctor: '::',
							_0: A3(_monty5811$apostello$Forms_Update$postSendAdhocCmd, model.settings.csrftoken, model.settings.userPerms, _p27._0),
							_1: {ctor: '[]'}
						}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'PostSendGroupForm':
				var _p28 = model.page;
				if (_p28.ctor === 'SendGroup') {
					return {
						ctor: '_Tuple2',
						_0: _monty5811$apostello$Forms_Update$setInProgress(model),
						_1: {
							ctor: '::',
							_0: A3(_monty5811$apostello$Forms_Update$postSendGroupCmd, model.settings.csrftoken, model.settings.userPerms, _p28._0),
							_1: {ctor: '[]'}
						}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'PostSiteConfigForm':
				var _p29 = model.page;
				if ((_p29.ctor === 'SiteConfigForm') && (_p29._0.ctor === 'Just')) {
					return {
						ctor: '_Tuple2',
						_0: _monty5811$apostello$Forms_Update$setInProgress(model),
						_1: {
							ctor: '::',
							_0: A2(_monty5811$apostello$Forms_Update$postSiteConfigCmd, model.settings.csrftoken, _p29._0._0),
							_1: {ctor: '[]'}
						}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'PostUserProfileForm':
				var _p30 = model.page;
				if (_p30.ctor === 'UserProfileForm') {
					return {
						ctor: '_Tuple2',
						_0: _monty5811$apostello$Forms_Update$setInProgress(model),
						_1: {
							ctor: '::',
							_0: A3(
								_monty5811$apostello$Forms_Update$postUserProfileCmd,
								model.settings.csrftoken,
								_p30._0,
								_elm_lang$core$List$head(
									_monty5811$remote_list$RemoteList$toList(
										A2(
											_monty5811$remote_list$RemoteList$filter,
											function (x) {
												return _elm_lang$core$Native_Utils.eq(x.user.pk, _p30._1);
											},
											model.dataStore.userprofiles)))),
							_1: {ctor: '[]'}
						}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'PostKeywordForm':
				var _p31 = model.page;
				if (_p31.ctor === 'KeywordForm') {
					return {
						ctor: '_Tuple2',
						_0: _monty5811$apostello$Forms_Update$setInProgress(model),
						_1: {
							ctor: '::',
							_0: A4(
								_monty5811$apostello$Forms_Update$postKeywordFormCmd,
								model.settings.csrftoken,
								model.currentTime,
								_p31._0,
								_elm_lang$core$List$head(
									_monty5811$remote_list$RemoteList$toList(
										A2(
											_monty5811$remote_list$RemoteList$filter,
											function (x) {
												return _elm_lang$core$Native_Utils.eq(
													_elm_lang$core$Maybe$Just(x.keyword),
													_p31._1);
											},
											model.dataStore.keywords)))),
							_1: {ctor: '[]'}
						}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'PostContactForm':
				var _p32 = model.page;
				if (_p32.ctor === 'ContactForm') {
					return {
						ctor: '_Tuple2',
						_0: _monty5811$apostello$Forms_Update$setInProgress(model),
						_1: {
							ctor: '::',
							_0: A5(
								_monty5811$apostello$Forms_Update$postContactFormCmd,
								model.settings.csrftoken,
								_p32._0,
								_p23._0,
								_p23._1,
								_elm_lang$core$List$head(
									_monty5811$remote_list$RemoteList$toList(
										A2(
											_monty5811$remote_list$RemoteList$filter,
											function (x) {
												return _elm_lang$core$Native_Utils.eq(
													_elm_lang$core$Maybe$Just(x.pk),
													_p32._1);
											},
											model.dataStore.recipients)))),
							_1: {ctor: '[]'}
						}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'PostContactImportForm':
				var _p33 = model.page;
				if (_p33.ctor === 'ContactImport') {
					return {
						ctor: '_Tuple2',
						_0: _monty5811$apostello$Forms_Update$setInProgress(model),
						_1: {
							ctor: '::',
							_0: A2(_monty5811$apostello$Forms_Update$postContactImportCmd, model.settings.csrftoken, _p33._0),
							_1: {ctor: '[]'}
						}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'ReceiveFormResp':
				if (_p23._1.ctor === 'Ok') {
					var _p34 = A2(_elm_lang$core$Json_Decode$decodeString, _monty5811$apostello$Forms_Model$decodeFormResp, _p23._1._0.body);
					if (_p34.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									formStatus: _monty5811$apostello$Forms_Model$Success,
									notifications: A2(_monty5811$apostello$Notification$addListOfDjangoMessages, _p34._0.messages, model.notifications)
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$core$Platform_Cmd$map,
									function (_p35) {
										return _monty5811$apostello$Messages$FormMsg(
											_monty5811$apostello$Messages$SiteConfigFormMsg(_p35));
									},
									_monty5811$apostello$Pages_Forms_SiteConfig$init),
								_1: _p23._0
							}
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									formStatus: _monty5811$apostello$Forms_Model$Failed(
										_monty5811$apostello$Forms_Model$formDecodeError(_p34._0))
								}),
							_1: {ctor: '[]'}
						};
					}
				} else {
					var _p36 = _p23._1._0;
					if (_p36.ctor === 'BadStatus') {
						var _p37 = A2(_elm_lang$core$Json_Decode$decodeString, _monty5811$apostello$Forms_Model$decodeFormResp, _p36._0.body);
						if (_p37.ctor === 'Ok') {
							var _p38 = _p37._0;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										formStatus: _monty5811$apostello$Forms_Model$Failed(_p38.errors),
										notifications: A2(_monty5811$apostello$Notification$addListOfDjangoMessages, _p38.messages, model.notifications)
									}),
								_1: {ctor: '[]'}
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										formStatus: _monty5811$apostello$Forms_Model$Failed(
											_monty5811$apostello$Forms_Model$formDecodeError(_p37._0)),
										notifications: _monty5811$apostello$Notification$addRefreshNotif(model.notifications)
									}),
								_1: {ctor: '[]'}
							};
						}
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									formStatus: _monty5811$apostello$Forms_Model$Failed(_monty5811$apostello$Forms_Model$noErrors),
									notifications: _monty5811$apostello$Notification$addRefreshNotif(model.notifications)
								}),
							_1: {ctor: '[]'}
						};
					}
				}
			case 'UserProfileFormMsg':
				var _p39 = model.page;
				if (_p39.ctor === 'UserProfileForm') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: A2(
									_monty5811$apostello$Pages$UserProfileForm,
									A2(_monty5811$apostello$Pages_Forms_UserProfile$update, _p23._0, _p39._0),
									_p39._1)
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'GroupFormMsg':
				var _p40 = model.page;
				if (_p40.ctor === 'GroupForm') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: A2(
									_monty5811$apostello$Pages$GroupForm,
									A2(_monty5811$apostello$Pages_Forms_Group$update, _p23._0, _p40._0),
									_p40._1)
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'ContactFormMsg':
				var _p41 = model.page;
				if (_p41.ctor === 'ContactForm') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: A2(
									_monty5811$apostello$Pages$ContactForm,
									A2(_monty5811$apostello$Pages_Forms_Contact$update, _p23._0, _p41._0),
									_p41._1)
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'KeywordFormMsg':
				var _p42 = model.page;
				if (_p42.ctor === 'KeywordForm') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: A2(
									_monty5811$apostello$Pages$KeywordForm,
									A2(_monty5811$apostello$Pages_Forms_Keyword$update, _p23._0, _p42._0),
									_p42._1)
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'SiteConfigFormMsg':
				var _p43 = model.page;
				if (_p43.ctor === 'SiteConfigForm') {
					var _p44 = A2(_monty5811$apostello$Pages_Forms_SiteConfig$update, _p23._0, _p43._0);
					var newSCModel = _p44._0;
					var scCmd = _p44._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: _monty5811$apostello$Pages$SiteConfigForm(newSCModel)
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Platform_Cmd$map,
								function (_p45) {
									return _monty5811$apostello$Messages$FormMsg(
										_monty5811$apostello$Messages$SiteConfigFormMsg(_p45));
								},
								scCmd),
							_1: {ctor: '[]'}
						}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'DefaultResponsesFormMsg':
				var _p46 = model.page;
				if (_p46.ctor === 'DefaultResponsesForm') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: _monty5811$apostello$Pages$DefaultResponsesForm(
									A2(_monty5811$apostello$Pages_Forms_DefaultResponses$update, _p23._0, _p46._0))
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'SendAdhocMsg':
				var _p47 = model.page;
				if (_p47.ctor === 'SendAdhoc') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: _monty5811$apostello$Pages$SendAdhoc(
									A3(_monty5811$apostello$Pages_Forms_SendAdhoc$update, model.settings.twilio, _p23._0, _p47._0))
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'SendGroupMsg':
				var _p48 = model.page;
				if (_p48.ctor === 'SendGroup') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: _monty5811$apostello$Pages$SendGroup(
									A3(
										_monty5811$apostello$Pages_Forms_SendGroup$update,
										_monty5811$remote_list$RemoteList$toList(model.dataStore.groups),
										_p23._0,
										_p48._0))
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'CreateAllGroupMsg':
				var _p49 = model.page;
				if (_p49.ctor === 'CreateAllGroup') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: _monty5811$apostello$Pages$CreateAllGroup(
									_monty5811$apostello$Pages_Forms_CreateAllGroup$update(_p23._0))
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			default:
				var _p50 = model.page;
				if (_p50.ctor === 'ContactImport') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: _monty5811$apostello$Pages$ContactImport(
									_monty5811$apostello$Pages_Forms_ContactImport$update(_p23._0))
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
		}
	});

var _monty5811$apostello$Subscriptions$reloadData = F3(
	function (pageVisibility, page, dataStore) {
		var anyFailed = A2(_monty5811$apostello$Store_Model$anyFailed, page, dataStore);
		var allFinished = A2(_monty5811$apostello$Store_Model$allFinished, page, dataStore);
		var _p0 = page;
		switch (_p0.ctor) {
			case 'SendAdhoc':
				return _elm_lang$core$Platform_Sub$none;
			case 'SendGroup':
				return _elm_lang$core$Platform_Sub$none;
			default:
				var interval = function () {
					var _p1 = page;
					switch (_p1.ctor) {
						case 'Wall':
							return 5 * _elm_lang$core$Time$second;
						case 'Curator':
							return 20 * _elm_lang$core$Time$second;
						default:
							return 60 * _elm_lang$core$Time$second;
					}
				}();
				var _p2 = pageVisibility;
				if (_p2.ctor === 'Visible') {
					return (allFinished || anyFailed) ? A2(
						_elm_lang$core$Time$every,
						interval,
						function (_p3) {
							return _monty5811$apostello$Messages$StoreMsg(_monty5811$apostello$Store_Messages$LoadData);
						}) : _elm_lang$core$Platform_Sub$none;
				} else {
					return _elm_lang$core$Platform_Sub$none;
				}
		}
	});
var _monty5811$apostello$Subscriptions$keyUps = function (model) {
	var _p4 = model.menuState;
	if (_p4.ctor === 'MenuHidden') {
		return _elm_lang$core$Platform_Sub$none;
	} else {
		return _elm_lang$keyboard$Keyboard$ups(_monty5811$apostello$Messages$KeyPressed);
	}
};
var _monty5811$apostello$Subscriptions$getCurrentTime = A2(
	_elm_lang$core$Time$every,
	60 * _elm_lang$core$Time$second,
	function (t) {
		return _monty5811$apostello$Messages$CurrentTime(t);
	});
var _monty5811$apostello$Subscriptions$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A3(_monty5811$apostello$Subscriptions$reloadData, model.pageVisibility, model.page, model.dataStore),
			_1: {
				ctor: '::',
				_0: _monty5811$apostello$Subscriptions$getCurrentTime,
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Platform_Sub$map,
						_monty5811$apostello$Messages$WebPushMsg,
						_monty5811$apostello$WebPush$subscriptions(model.webPush)),
					_1: {
						ctor: '::',
						_0: _elm_lang$page_visibility$PageVisibility$visibilityChanges(_monty5811$apostello$Messages$VisibilityChange),
						_1: {
							ctor: '::',
							_0: _monty5811$apostello$Subscriptions$keyUps(model),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};

var _monty5811$apostello$Pages_Fragments_SidePanel$archiveButton = F4(
	function (page, url, maybeIsArchived, canArchive) {
		var _p0 = canArchive;
		if (_p0 === false) {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'});
		} else {
			var _p1 = maybeIsArchived;
			if (_p1.ctor === 'Nothing') {
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('button button-secondary'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Loading...'),
						_1: {ctor: '[]'}
					});
			} else {
				var _p3 = _p1._0;
				var clickAction = _monty5811$apostello$Messages$SidePanelMsg(
					A3(
						_monty5811$apostello$Messages$ArchiveItem,
						_monty5811$apostello$Route$page2loc(page),
						url,
						_p3));
				var _p2 = _p3;
				if (_p2 === true) {
					return A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('button-success'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('button'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(clickAction),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$id('restoreItemButton'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Restore'),
							_1: {ctor: '[]'}
						});
				} else {
					return A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('button-danger'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('button'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(clickAction),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$id('archiveItemButton'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Remove'),
							_1: {ctor: '[]'}
						});
				}
			}
		}
	});
var _monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink = F2(
	function (page, linkText) {
		return A4(
			_monty5811$apostello$Route$spaLink,
			_elm_lang$html$Html$a,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(linkText),
				_1: {ctor: '[]'}
			},
			page);
	});
var _monty5811$apostello$Pages_Fragments_SidePanel$newKeywordSpa = A2(
	_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink,
	A2(_monty5811$apostello$Pages$KeywordForm, _monty5811$apostello$Pages_Forms_Keyword$initialModel, _elm_lang$core$Maybe$Nothing),
	'New Keyword');
var _monty5811$apostello$Pages_Fragments_SidePanel$keywords = A2(
	_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink,
	_monty5811$apostello$Pages$KeywordTable(false),
	'Keywords');
var _monty5811$apostello$Pages_Fragments_SidePanel$keywordArchive = A2(
	_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink,
	_monty5811$apostello$Pages$KeywordTable(true),
	'Archived Keywords');
var _monty5811$apostello$Pages_Fragments_SidePanel$keywordEdit = function (k) {
	return A2(
		_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink,
		A2(
			_monty5811$apostello$Pages$KeywordForm,
			_monty5811$apostello$Pages_Forms_Keyword$initialModel,
			_elm_lang$core$Maybe$Just(k)),
		'Edit');
};
var _monty5811$apostello$Pages_Fragments_SidePanel$newContactSpa = A2(
	_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink,
	A2(_monty5811$apostello$Pages$ContactForm, _monty5811$apostello$Pages_Forms_Contact$initialModel, _elm_lang$core$Maybe$Nothing),
	'New Contact');
var _monty5811$apostello$Pages_Fragments_SidePanel$contactsSpa = A2(
	_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink,
	_monty5811$apostello$Pages$RecipientTable(false),
	' Contacts');
var _monty5811$apostello$Pages_Fragments_SidePanel$contactArchiveSpa = A2(
	_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink,
	_monty5811$apostello$Pages$RecipientTable(true),
	'Archived Contacts');
var _monty5811$apostello$Pages_Fragments_SidePanel$groupsArchiveSpa = A2(
	_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink,
	_monty5811$apostello$Pages$GroupTable(true),
	'Archived Groups');
var _monty5811$apostello$Pages_Fragments_SidePanel$groupsSpa = A2(
	_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink,
	_monty5811$apostello$Pages$GroupTable(false),
	'Groups');
var _monty5811$apostello$Pages_Fragments_SidePanel$newGroupSpa = A2(
	_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink,
	A2(_monty5811$apostello$Pages$GroupForm, _monty5811$apostello$Pages_Forms_Group$initialModel, _elm_lang$core$Maybe$Nothing),
	'New Group');
var _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks = {
	ctor: '::',
	_0: _monty5811$apostello$Pages_Fragments_SidePanel$newKeywordSpa,
	_1: {
		ctor: '::',
		_0: _monty5811$apostello$Pages_Fragments_SidePanel$newContactSpa,
		_1: {
			ctor: '::',
			_0: _monty5811$apostello$Pages_Fragments_SidePanel$newGroupSpa,
			_1: {ctor: '[]'}
		}
	}
};
var _monty5811$apostello$Pages_Fragments_SidePanel$incomingWall = A2(_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink, _monty5811$apostello$Pages$Wall, 'Live Updates');
var _monty5811$apostello$Pages_Fragments_SidePanel$wallCurator = A2(_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink, _monty5811$apostello$Pages$Curator, 'Live Curator');
var _monty5811$apostello$Pages_Fragments_SidePanel$fabLink = F2(
	function (uri, linkText) {
		return A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$href(uri),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(linkText),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_Fragments_SidePanel$keywordCsv = function (k) {
	return A2(
		_monty5811$apostello$Pages_Fragments_SidePanel$fabLink,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'/keyword/responses/csv/',
			A2(_elm_lang$core$Basics_ops['++'], k, '/')),
		'Export responses');
};
var _monty5811$apostello$Pages_Fragments_SidePanel$keywordResponsesSpa = function (maybeK) {
	var _p4 = maybeK;
	if (_p4.ctor === 'Nothing') {
		return A2(_monty5811$apostello$Pages_Fragments_SidePanel$fabLink, '#', '...');
	} else {
		var _p5 = _p4._0;
		return A2(
			_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink,
			A3(_monty5811$apostello$Pages$KeyRespTable, false, false, _p5.keyword),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Replies (',
				A2(_elm_lang$core$Basics_ops['++'], _p5.num_replies, ')')));
	}
};
var _monty5811$apostello$Pages_Fragments_SidePanel$keywordArchiveResponsesSpa = function (k) {
	var _p6 = k;
	if (_p6.ctor === 'Nothing') {
		return A2(_monty5811$apostello$Pages_Fragments_SidePanel$fabLink, '#', '...');
	} else {
		var _p7 = _p6._0;
		return A2(
			_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink,
			A3(_monty5811$apostello$Pages$KeyRespTable, false, true, _p7.keyword),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Archived Replies (',
				A2(_elm_lang$core$Basics_ops['++'], _p7.num_archived_replies, ')')));
	}
};
var _monty5811$apostello$Pages_Fragments_SidePanel$keywordResponses = function (maybeK) {
	var _p8 = maybeK;
	if (_p8.ctor === 'Nothing') {
		return A2(_monty5811$apostello$Pages_Fragments_SidePanel$fabLink, '#', '...');
	} else {
		var _p9 = _p8._0;
		return A2(
			_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink,
			A3(_monty5811$apostello$Pages$KeyRespTable, false, false, _p9.keyword),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Replies (',
				A2(_elm_lang$core$Basics_ops['++'], _p9.num_replies, ')')));
	}
};
var _monty5811$apostello$Pages_Fragments_SidePanel$keywordArchiveResponses = function (k) {
	var _p10 = k;
	if (_p10.ctor === 'Nothing') {
		return A2(_monty5811$apostello$Pages_Fragments_SidePanel$fabLink, '#', '...');
	} else {
		var _p11 = _p10._0;
		return A2(
			_monty5811$apostello$Pages_Fragments_SidePanel$fabSpaLink,
			A3(_monty5811$apostello$Pages$KeyRespTable, false, true, _p11.keyword),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Archived Replies (',
				A2(_elm_lang$core$Basics_ops['++'], _p11.num_archived_replies, ')')));
	}
};
var _monty5811$apostello$Pages_Fragments_SidePanel$fabLinks = F3(
	function (ds, page, canArchive) {
		var _p12 = page;
		switch (_p12.ctor) {
			case 'OutboundTable':
				return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
			case 'InboundTable':
				return {
					ctor: '::',
					_0: _monty5811$apostello$Pages_Fragments_SidePanel$incomingWall,
					_1: {
						ctor: '::',
						_0: _monty5811$apostello$Pages_Fragments_SidePanel$wallCurator,
						_1: {ctor: '[]'}
					}
				};
			case 'GroupTable':
				var otherLink = function () {
					var _p13 = _p12._0;
					if (_p13 === true) {
						return _monty5811$apostello$Pages_Fragments_SidePanel$groupsSpa;
					} else {
						return _monty5811$apostello$Pages_Fragments_SidePanel$groupsArchiveSpa;
					}
				}();
				return {
					ctor: '::',
					_0: _monty5811$apostello$Pages_Fragments_SidePanel$newGroupSpa,
					_1: {
						ctor: '::',
						_0: otherLink,
						_1: {ctor: '[]'}
					}
				};
			case 'GroupComposer':
				return {
					ctor: '::',
					_0: _monty5811$apostello$Pages_Fragments_SidePanel$newGroupSpa,
					_1: {
						ctor: '::',
						_0: _monty5811$apostello$Pages_Fragments_SidePanel$groupsSpa,
						_1: {
							ctor: '::',
							_0: _monty5811$apostello$Pages_Fragments_SidePanel$groupsArchiveSpa,
							_1: {ctor: '[]'}
						}
					}
				};
			case 'RecipientTable':
				var otherLink = function () {
					var _p14 = _p12._0;
					if (_p14 === true) {
						return _monty5811$apostello$Pages_Fragments_SidePanel$contactsSpa;
					} else {
						return _monty5811$apostello$Pages_Fragments_SidePanel$contactArchiveSpa;
					}
				}();
				return {
					ctor: '::',
					_0: _monty5811$apostello$Pages_Fragments_SidePanel$newContactSpa,
					_1: {
						ctor: '::',
						_0: otherLink,
						_1: {ctor: '[]'}
					}
				};
			case 'KeywordTable':
				var otherLink = function () {
					var _p15 = _p12._0;
					if (_p15 === true) {
						return _monty5811$apostello$Pages_Fragments_SidePanel$keywords;
					} else {
						return _monty5811$apostello$Pages_Fragments_SidePanel$keywordArchive;
					}
				}();
				return {
					ctor: '::',
					_0: _monty5811$apostello$Pages_Fragments_SidePanel$newKeywordSpa,
					_1: {
						ctor: '::',
						_0: otherLink,
						_1: {ctor: '[]'}
					}
				};
			case 'ElvantoImport':
				return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
			case 'Wall':
				return {ctor: '[]'};
			case 'Curator':
				return {
					ctor: '::',
					_0: _monty5811$apostello$Pages_Fragments_SidePanel$incomingWall,
					_1: {ctor: '[]'}
				};
			case 'UserProfileTable':
				return {
					ctor: '::',
					_0: A2(_monty5811$apostello$Pages_Fragments_SidePanel$fabLink, '/admin/auth/user/', 'Admin: Users'),
					_1: {ctor: '[]'}
				};
			case 'ScheduledSmsTable':
				return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
			case 'KeyRespTable':
				var _p16 = _p12._2;
				var keyword = _elm_lang$core$List$head(
					A2(
						_elm_lang$core$List$filter,
						function (x) {
							return _elm_lang$core$Native_Utils.eq(x.keyword, _p16);
						},
						_monty5811$remote_list$RemoteList$toList(ds.keywords)));
				return {
					ctor: '::',
					_0: _monty5811$apostello$Pages_Fragments_SidePanel$keywordEdit(_p16),
					_1: {
						ctor: '::',
						_0: _monty5811$apostello$Pages_Fragments_SidePanel$keywordCsv(_p16),
						_1: {
							ctor: '::',
							_0: _monty5811$apostello$Pages_Fragments_SidePanel$keywordResponsesSpa(keyword),
							_1: {
								ctor: '::',
								_0: _monty5811$apostello$Pages_Fragments_SidePanel$keywordArchiveResponsesSpa(keyword),
								_1: {ctor: '[]'}
							}
						}
					}
				};
			case 'FirstRun':
				return {ctor: '[]'};
			case 'Debug':
				return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
			case 'AccessDenied':
				return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
			case 'SendAdhoc':
				return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
			case 'SendGroup':
				return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
			case 'Error404':
				return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
			case 'Home':
				return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
			case 'GroupForm':
				var _p17 = _p12._1;
				if (_p17.ctor === 'Nothing') {
					return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
				} else {
					var _p18 = _p17._0;
					var isArchived = A2(
						_elm_lang$core$Maybe$map,
						function (_) {
							return _.is_archived;
						},
						_elm_lang$core$List$head(
							A2(
								_elm_lang$core$List$filter,
								function (x) {
									return _elm_lang$core$Native_Utils.eq(x.pk, _p18);
								},
								_monty5811$remote_list$RemoteList$toList(ds.groups))));
					return {
						ctor: '::',
						_0: A4(
							_monty5811$apostello$Pages_Fragments_SidePanel$archiveButton,
							_monty5811$apostello$Pages$GroupTable(false),
							_monty5811$apostello$Urls$api_act_archive_group(_p18),
							isArchived,
							canArchive),
						_1: {ctor: '[]'}
					};
				}
			case 'ContactForm':
				var _p19 = _p12._1;
				if (_p19.ctor === 'Nothing') {
					return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
				} else {
					var _p20 = _p19._0;
					var isArchived = A2(
						_elm_lang$core$Maybe$map,
						function (_) {
							return _.is_archived;
						},
						_elm_lang$core$List$head(
							A2(
								_elm_lang$core$List$filter,
								function (x) {
									return _elm_lang$core$Native_Utils.eq(x.pk, _p20);
								},
								_monty5811$remote_list$RemoteList$toList(ds.recipients))));
					return {
						ctor: '::',
						_0: A4(
							_monty5811$apostello$Pages_Fragments_SidePanel$archiveButton,
							_monty5811$apostello$Pages$RecipientTable(false),
							_monty5811$apostello$Urls$api_act_archive_recipient(_p20),
							isArchived,
							canArchive),
						_1: {ctor: '[]'}
					};
				}
			case 'KeywordForm':
				var _p21 = _p12._1;
				if (_p21.ctor === 'Nothing') {
					return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
				} else {
					var _p22 = _p21._0;
					var keyword = _elm_lang$core$List$head(
						A2(
							_elm_lang$core$List$filter,
							function (x) {
								return _elm_lang$core$Native_Utils.eq(x.keyword, _p22);
							},
							_monty5811$remote_list$RemoteList$toList(ds.keywords)));
					var isArchived = A2(
						_elm_lang$core$Maybe$map,
						function (_) {
							return _.is_archived;
						},
						keyword);
					return {
						ctor: '::',
						_0: _monty5811$apostello$Pages_Fragments_SidePanel$keywordResponses(keyword),
						_1: {
							ctor: '::',
							_0: _monty5811$apostello$Pages_Fragments_SidePanel$keywordArchiveResponses(keyword),
							_1: {
								ctor: '::',
								_0: A4(
									_monty5811$apostello$Pages_Fragments_SidePanel$archiveButton,
									_monty5811$apostello$Pages$KeywordTable(false),
									_monty5811$apostello$Urls$api_act_archive_keyword(_p22),
									isArchived,
									canArchive),
								_1: {ctor: '[]'}
							}
						}
					};
				}
			case 'SiteConfigForm':
				return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
			case 'DefaultResponsesForm':
				return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
			case 'CreateAllGroup':
				return {
					ctor: '::',
					_0: _monty5811$apostello$Pages_Fragments_SidePanel$newGroupSpa,
					_1: {
						ctor: '::',
						_0: _monty5811$apostello$Pages_Fragments_SidePanel$groupsSpa,
						_1: {
							ctor: '::',
							_0: _monty5811$apostello$Pages_Fragments_SidePanel$groupsArchiveSpa,
							_1: {ctor: '[]'}
						}
					}
				};
			case 'Usage':
				return {ctor: '[]'};
			case 'Help':
				return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
			case 'UserProfileForm':
				return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
			case 'ContactImport':
				return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
			default:
				return _monty5811$apostello$Pages_Fragments_SidePanel$defaultLinks;
		}
	});
var _monty5811$apostello$Pages_Fragments_SidePanel$view = F3(
	function (ds, page, canArchive) {
		return A2(
			_elm_lang$html$Html$nav,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('nav'),
				_1: {ctor: '[]'}
			},
			A3(_monty5811$apostello$Pages_Fragments_SidePanel$fabLinks, ds, page, canArchive));
	});
var _monty5811$apostello$Pages_Fragments_SidePanel$archiveItem = F4(
	function (csrf, redirectUrl, url, isArchived) {
		return A2(
			_elm_lang$http$Http$send,
			function (_p23) {
				return _monty5811$apostello$Messages$SidePanelMsg(
					A2(_monty5811$apostello$Messages$ReceiveArchiveResp, redirectUrl, _p23));
			},
			A4(_monty5811$apostello$DjangoSend$archivePost, csrf, url, isArchived, _monty5811$apostello$Helpers$decodeAlwaysTrue));
	});
var _monty5811$apostello$Pages_Fragments_SidePanel$update = F2(
	function (msg, model) {
		var _p24 = msg;
		if (_p24.ctor === 'ArchiveItem') {
			return {
				ctor: '_Tuple2',
				_0: model,
				_1: {
					ctor: '::',
					_0: A4(_monty5811$apostello$Pages_Fragments_SidePanel$archiveItem, model.settings.csrftoken, _p24._0, _p24._1, _p24._2),
					_1: {ctor: '[]'}
				}
			};
		} else {
			if (_p24._1.ctor === 'Err') {
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: {
						ctor: '::',
						_0: _elm_lang$navigation$Navigation$load(_p24._0),
						_1: {ctor: '[]'}
					}
				};
			}
		}
	});

var _monty5811$apostello$Store_Optimistic$archiveMatches = F2(
	function (k, sms) {
		var _p0 = _elm_lang$core$Native_Utils.eq(sms.matched_keyword, k);
		if (_p0 === true) {
			return _elm_lang$core$Native_Utils.update(
				sms,
				{is_archived: true});
		} else {
			return sms;
		}
	});
var _monty5811$apostello$Store_Optimistic$optArchiveMatchingSms = F2(
	function (k, ds) {
		return _elm_lang$core$Native_Utils.update(
			ds,
			{
				inboundSms: A2(
					_monty5811$remote_list$RemoteList$map,
					_monty5811$apostello$Store_Optimistic$archiveMatches(k),
					ds.inboundSms)
			});
	});
var _monty5811$apostello$Store_Optimistic$toggleIsArchivedPk = F2(
	function (pk, rec) {
		var _p1 = _elm_lang$core$Native_Utils.eq(pk, rec.pk);
		if (_p1 === true) {
			return _elm_lang$core$Native_Utils.update(
				rec,
				{is_archived: !rec.is_archived});
		} else {
			return rec;
		}
	});
var _monty5811$apostello$Store_Optimistic$archiveRecordWithPk = F2(
	function (pk, rec) {
		return A2(_monty5811$apostello$Store_Optimistic$toggleIsArchivedPk, pk, rec);
	});
var _monty5811$apostello$Store_Optimistic$cancelSms = F2(
	function (ds, pk) {
		return _elm_lang$core$Native_Utils.update(
			ds,
			{
				queuedSms: A2(
					_monty5811$remote_list$RemoteList$filter,
					function (r) {
						return !_elm_lang$core$Native_Utils.eq(r.pk, pk);
					},
					ds.queuedSms)
			});
	});
var _monty5811$apostello$Store_Optimistic$removeRecipient = F2(
	function (ds, pk) {
		return _elm_lang$core$Native_Utils.update(
			ds,
			{
				recipients: A2(
					_monty5811$remote_list$RemoteList$map,
					_monty5811$apostello$Store_Optimistic$archiveRecordWithPk(pk),
					ds.recipients)
			});
	});
var _monty5811$apostello$Store_Optimistic$archiveKeywordHelper = F2(
	function (k, rec) {
		var _p2 = _elm_lang$core$Native_Utils.eq(k, rec.keyword);
		if (_p2 === true) {
			return _elm_lang$core$Native_Utils.update(
				rec,
				{is_archived: !rec.is_archived});
		} else {
			return rec;
		}
	});
var _monty5811$apostello$Store_Optimistic$archiveKeyword = F2(
	function (ds, k) {
		return _elm_lang$core$Native_Utils.update(
			ds,
			{
				keywords: A2(
					_monty5811$remote_list$RemoteList$map,
					_monty5811$apostello$Store_Optimistic$archiveKeywordHelper(k),
					ds.keywords)
			});
	});
var _monty5811$apostello$Store_Optimistic$toggleGroupSync = F2(
	function (pk, group) {
		return _elm_lang$core$Native_Utils.eq(pk, group.pk) ? _elm_lang$core$Native_Utils.update(
			group,
			{sync: !group.sync}) : group;
	});
var _monty5811$apostello$Store_Optimistic$toggleElvantoGroup = F2(
	function (group, ds) {
		return _elm_lang$core$Native_Utils.update(
			ds,
			{
				elvantoGroups: A2(
					_monty5811$remote_list$RemoteList$map,
					_monty5811$apostello$Store_Optimistic$toggleGroupSync(group.pk),
					ds.elvantoGroups)
			});
	});
var _monty5811$apostello$Store_Optimistic$memberInList = F2(
	function (existingList, contact) {
		return A2(
			_elm_lang$core$List$member,
			contact.pk,
			A2(
				_elm_lang$core$List$map,
				function (x) {
					return x.pk;
				},
				existingList));
	});
var _monty5811$apostello$Store_Optimistic$updateGroupMembers = F2(
	function (existingList, contact) {
		var _p3 = A2(_monty5811$apostello$Store_Optimistic$memberInList, existingList, contact);
		if (_p3 === true) {
			return A2(
				_elm_lang$core$List$filter,
				function (x) {
					return !_elm_lang$core$Native_Utils.eq(x.pk, contact.pk);
				},
				existingList);
		} else {
			return {ctor: '::', _0: contact, _1: existingList};
		}
	});
var _monty5811$apostello$Store_Optimistic$archiveGroup = F2(
	function (ds, pk) {
		return _elm_lang$core$Native_Utils.update(
			ds,
			{
				groups: A2(
					_monty5811$remote_list$RemoteList$map,
					_monty5811$apostello$Store_Optimistic$archiveRecordWithPk(pk),
					ds.groups)
			});
	});
var _monty5811$apostello$Store_Optimistic$switchDealtWith = F2(
	function (pk, sms) {
		return _elm_lang$core$Native_Utils.eq(pk, sms.pk) ? _elm_lang$core$Native_Utils.update(
			sms,
			{dealt_with: !sms.dealt_with}) : sms;
	});
var _monty5811$apostello$Store_Optimistic$toggleDealtWith = F2(
	function (ds, pk) {
		return _elm_lang$core$Native_Utils.update(
			ds,
			{
				inboundSms: A2(
					_monty5811$remote_list$RemoteList$map,
					_monty5811$apostello$Store_Optimistic$switchDealtWith(pk),
					ds.inboundSms)
			});
	});
var _monty5811$apostello$Store_Optimistic$archiveSms = F2(
	function (ds, pk) {
		return _elm_lang$core$Native_Utils.update(
			ds,
			{
				inboundSms: A2(
					_monty5811$remote_list$RemoteList$map,
					_monty5811$apostello$Store_Optimistic$archiveRecordWithPk(pk),
					ds.inboundSms)
			});
	});

var _monty5811$apostello$Store_Request$increasePageSize = function (url) {
	var _p0 = A2(_elm_lang$core$String$contains, 'page_size', url);
	if (_p0 === true) {
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('page=2&page_size=100$'),
			function (_p1) {
				return 'page_size=1000';
			},
			url);
	} else {
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('page=2$'),
			function (_p2) {
				return 'page_size=100';
			},
			url);
	}
};
var _monty5811$apostello$Store_Request$nextFromBody = function (body) {
	return A2(
		_elm_lang$core$Result$withDefault,
		_elm_lang$core$Maybe$Nothing,
		A2(
			_elm_lang$core$Json_Decode$decodeString,
			A2(
				_elm_lang$core$Json_Decode$field,
				'next',
				_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string)),
			body));
};
var _monty5811$apostello$Store_Request$extractRawResponse = function (resp) {
	return {
		body: resp.body,
		next: _monty5811$apostello$Store_Request$nextFromBody(resp.body)
	};
};
var _monty5811$apostello$Store_Request$makeRequest = function (dataUrl) {
	return _elm_lang$http$Http$request(
		{
			method: 'GET',
			headers: {
				ctor: '::',
				_0: A2(_elm_lang$http$Http$header, 'Accept', 'application/json'),
				_1: {ctor: '[]'}
			},
			url: dataUrl,
			body: _elm_lang$http$Http$emptyBody,
			expect: _elm_lang$http$Http$expectStringResponse(
				function (resp) {
					return _elm_lang$core$Result$Ok(
						_monty5811$apostello$Store_Request$extractRawResponse(resp));
				}),
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: true
		});
};
var _monty5811$apostello$Store_Request$itemFromResp = F3(
	function (defaultCallback, decoder, rawResp) {
		return A2(
			_elm_lang$core$Result$withDefault,
			defaultCallback,
			A2(_elm_lang$core$Json_Decode$decodeString, decoder, rawResp.body));
	});
var _monty5811$apostello$Store_Request$dataFromResp = F2(
	function (decoder, rawResp) {
		return A2(
			_elm_lang$core$Result$withDefault,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Json_Decode$decodeString,
				A2(
					_elm_lang$core$Json_Decode$field,
					'results',
					_elm_lang$core$Json_Decode$list(decoder)),
				rawResp.body));
	});
var _monty5811$apostello$Store_Request$fetchData = function (_p3) {
	var _p4 = _p3;
	return A2(
		_elm_lang$http$Http$send,
		A2(_monty5811$apostello$Store_Messages$ReceiveRawResp, _p4._0, _p4._1._0),
		_monty5811$apostello$Store_Request$makeRequest(_p4._1._1));
};
var _monty5811$apostello$Store_Request$maybeFetchData = F2(
	function (page, dataStore) {
		var dataTypes = _monty5811$apostello$Store_DataTypes$dt_from_page(page);
		var newDs = A3(_elm_lang$core$List$foldl, _monty5811$apostello$Store_Model$setLoadDataStatus, dataStore, dataTypes);
		var fetchCmds = A2(
			_elm_lang$core$List$map,
			_monty5811$apostello$Store_Request$fetchData,
			A2(
				_elm_lang$core$List$map,
				function (dt) {
					return {
						ctor: '_Tuple2',
						_0: dt,
						_1: _monty5811$apostello$Store_DataTypes$dt2Url(dt)
					};
				},
				dataTypes));
		return {ctor: '_Tuple2', _0: newDs, _1: fetchCmds};
	});

var _monty5811$apostello$Store_Decode$remoteList = function (l) {
	return _elm_lang$core$Json_Decode$succeed(
		_monty5811$remote_list$RemoteList$NotAsked(l));
};
var _monty5811$apostello$Store_Decode$decodeDataStore = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'users',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		_monty5811$apostello$Store_Decode$remoteList,
		_elm_lang$core$Json_Decode$list(_monty5811$apostello$Data$decodeUser)),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'queuedSms',
		A2(
			_elm_lang$core$Json_Decode$andThen,
			_monty5811$apostello$Store_Decode$remoteList,
			_elm_lang$core$Json_Decode$list(_monty5811$apostello$Data$decodeQueuedSms)),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'groups',
			A2(
				_elm_lang$core$Json_Decode$andThen,
				_monty5811$apostello$Store_Decode$remoteList,
				_elm_lang$core$Json_Decode$list(_monty5811$apostello$Data$decodeRecipientGroup)),
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'recipients',
				A2(
					_elm_lang$core$Json_Decode$andThen,
					_monty5811$apostello$Store_Decode$remoteList,
					_elm_lang$core$Json_Decode$list(_monty5811$apostello$Data$decodeRecipient)),
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'keywords',
					A2(
						_elm_lang$core$Json_Decode$andThen,
						_monty5811$apostello$Store_Decode$remoteList,
						_elm_lang$core$Json_Decode$list(_monty5811$apostello$Data$decodeKeyword)),
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'userprofiles',
						A2(
							_elm_lang$core$Json_Decode$andThen,
							_monty5811$apostello$Store_Decode$remoteList,
							_elm_lang$core$Json_Decode$list(_monty5811$apostello$Data$decodeUserProfile)),
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'elvantoGroups',
							A2(
								_elm_lang$core$Json_Decode$andThen,
								_monty5811$apostello$Store_Decode$remoteList,
								_elm_lang$core$Json_Decode$list(_monty5811$apostello$Data$decodeElvantoGroup)),
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'outboundSms',
								A2(
									_elm_lang$core$Json_Decode$andThen,
									_monty5811$apostello$Store_Decode$remoteList,
									_elm_lang$core$Json_Decode$list(_monty5811$apostello$Data$decodeSmsOutbound)),
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'inboundSms',
									A2(
										_elm_lang$core$Json_Decode$andThen,
										_monty5811$apostello$Store_Decode$remoteList,
										_elm_lang$core$Json_Decode$list(_monty5811$apostello$Data$decodeSmsInbound)),
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Store_Model$DataStore))))))))));

var _monty5811$apostello$Store_Toggle$elvantoGroupSync = F2(
	function (csrf, group) {
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'sync',
				_1: _elm_lang$core$Json_Encode$bool(group.sync)
			},
			_1: {ctor: '[]'}
		};
		var url = _monty5811$apostello$Urls$api_toggle_elvanto_group_sync(group.pk);
		return A2(
			_elm_lang$http$Http$send,
			_monty5811$apostello$Store_Messages$ReceiveToggleElvantoGroupSync,
			A4(_monty5811$apostello$DjangoSend$post, csrf, url, body, _monty5811$apostello$Data$decodeElvantoGroup));
	});
var _monty5811$apostello$Store_Toggle$groupMembership = F4(
	function (csrf, groupPk, contactPk, isMember) {
		var url = _monty5811$apostello$Urls$api_act_update_group_members(groupPk);
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'member',
				_1: _elm_lang$core$Json_Encode$bool(isMember)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'contactPk',
					_1: _elm_lang$core$Json_Encode$int(contactPk)
				},
				_1: {ctor: '[]'}
			}
		};
		return A2(
			_elm_lang$http$Http$send,
			_monty5811$apostello$Store_Messages$ReceiveToggleGroupMembership,
			A4(_monty5811$apostello$DjangoSend$post, csrf, url, body, _monty5811$apostello$Data$decodeRecipientGroup));
	});
var _monty5811$apostello$Store_Toggle$cancelSms = F2(
	function (csrf, pk) {
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'cancel_sms',
				_1: _elm_lang$core$Json_Encode$bool(true)
			},
			_1: {ctor: '[]'}
		};
		var url = _monty5811$apostello$Urls$api_act_cancel_queued_sms(pk);
		return A2(
			_elm_lang$http$Http$send,
			_monty5811$apostello$Store_Messages$ReceiveLazy,
			A3(_monty5811$apostello$DjangoSend$rawPost, csrf, url, body));
	});
var _monty5811$apostello$Store_Toggle$wallDisplay = F3(
	function (csrf, isDisplayed, pk) {
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'display_on_wall',
				_1: _elm_lang$core$Json_Encode$bool(isDisplayed)
			},
			_1: {ctor: '[]'}
		};
		var url = _monty5811$apostello$Urls$api_toggle_display_on_wall(pk);
		return A2(
			_elm_lang$http$Http$send,
			_monty5811$apostello$Store_Messages$ReceiveToggleWallDisplay,
			A4(_monty5811$apostello$DjangoSend$post, csrf, url, body, _monty5811$apostello$Data$decodeSmsInbound));
	});
var _monty5811$apostello$Store_Toggle$archiveKeyword = F3(
	function (csrf, isArchived, k) {
		return A2(
			_elm_lang$http$Http$send,
			_monty5811$apostello$Store_Messages$ReceiveLazy,
			A3(
				_monty5811$apostello$DjangoSend$archivePostRaw,
				csrf,
				_monty5811$apostello$Urls$api_act_archive_keyword(k),
				isArchived));
	});
var _monty5811$apostello$Store_Toggle$recipientGroupArchive = F3(
	function (csrf, isArchived, pk) {
		return A2(
			_elm_lang$http$Http$send,
			_monty5811$apostello$Store_Messages$ReceiveLazy,
			A3(
				_monty5811$apostello$DjangoSend$archivePostRaw,
				csrf,
				_monty5811$apostello$Urls$api_act_archive_group(pk),
				isArchived));
	});
var _monty5811$apostello$Store_Toggle$recipientArchive = F3(
	function (csrf, isArchived, pk) {
		return A2(
			_elm_lang$http$Http$send,
			_monty5811$apostello$Store_Messages$ReceiveLazy,
			A3(
				_monty5811$apostello$DjangoSend$archivePostRaw,
				csrf,
				_monty5811$apostello$Urls$api_act_archive_recipient(pk),
				isArchived));
	});
var _monty5811$apostello$Store_Toggle$profileField = F2(
	function (csrf, profile) {
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'user_profile',
				_1: _monty5811$apostello$Data$encodeUserProfile(profile)
			},
			_1: {ctor: '[]'}
		};
		var url = _monty5811$apostello$Urls$api_user_profile_update(profile.pk);
		return A2(
			_elm_lang$http$Http$send,
			_monty5811$apostello$Store_Messages$ReceiveToggleProfileField,
			A4(_monty5811$apostello$DjangoSend$post, csrf, url, body, _monty5811$apostello$Data$decodeUserProfile));
	});
var _monty5811$apostello$Store_Toggle$reprocessSms = F2(
	function (csrf, pk) {
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'reingest',
				_1: _elm_lang$core$Json_Encode$bool(true)
			},
			_1: {ctor: '[]'}
		};
		return A2(
			_elm_lang$http$Http$send,
			_monty5811$apostello$Store_Messages$ReceiveReprocessSms,
			A4(
				_monty5811$apostello$DjangoSend$post,
				csrf,
				_monty5811$apostello$Urls$api_act_reingest_sms(pk),
				body,
				_monty5811$apostello$Data$decodeSmsInbound));
	});
var _monty5811$apostello$Store_Toggle$smsArchive = F3(
	function (csrf, isArchived, pk) {
		return A2(
			_elm_lang$http$Http$send,
			_monty5811$apostello$Store_Messages$ReceiveToggleInboundSmsArchive,
			A4(
				_monty5811$apostello$DjangoSend$archivePost,
				csrf,
				_monty5811$apostello$Urls$api_act_archive_sms(pk),
				isArchived,
				_monty5811$apostello$Data$decodeSmsInbound));
	});
var _monty5811$apostello$Store_Toggle$smsDealtWith = F3(
	function (csrf, isDealtWith, pk) {
		var body = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'dealt_with',
				_1: _elm_lang$core$Json_Encode$bool(isDealtWith)
			},
			_1: {ctor: '[]'}
		};
		return A2(
			_elm_lang$http$Http$send,
			_monty5811$apostello$Store_Messages$ReceiveToggleInboundSmsDealtWith,
			A4(
				_monty5811$apostello$DjangoSend$post,
				csrf,
				_monty5811$apostello$Urls$api_toggle_deal_with_sms(pk),
				body,
				_monty5811$apostello$Data$decodeSmsInbound));
	});

var _monty5811$apostello$Store_Update$compareTR = function (item) {
	var _p0 = item.time_received;
	if (_p0.ctor === 'Just') {
		return _elm_lang$core$Date$toTime(_p0._0);
	} else {
		return _elm_lang$core$Basics$toFloat(1);
	}
};
var _monty5811$apostello$Store_Update$sortByTimeReceived = function (items) {
	return _elm_lang$core$List$reverse(
		A2(_elm_lang$core$List$sortBy, _monty5811$apostello$Store_Update$compareTR, items));
};
var _monty5811$apostello$Store_Update$compareByT2S = function (sms) {
	var _p1 = sms.time_to_send;
	if (_p1.ctor === 'Just') {
		return _elm_lang$core$Date$toTime(_p1._0);
	} else {
		return _elm_lang$core$Basics$toFloat(1);
	}
};
var _monty5811$apostello$Store_Update$compareByTS = function (sms) {
	var _p2 = sms.time_sent;
	if (_p2.ctor === 'Just') {
		return _elm_lang$core$Date$toTime(_p2._0);
	} else {
		return _elm_lang$core$Basics$toFloat(1);
	}
};
var _monty5811$apostello$Store_Update$addItemToDic = F2(
	function (item, existingItems) {
		return A3(_elm_lang$core$Dict$insert, item.pk, item, existingItems);
	});
var _monty5811$apostello$Store_Update$addNewItems = F2(
	function (newItems, existingItemsDict) {
		return A3(_elm_lang$core$List$foldl, _monty5811$apostello$Store_Update$addItemToDic, existingItemsDict, newItems);
	});
var _monty5811$apostello$Store_Update$mergeItems = F2(
	function (newItems, existingItems) {
		return _elm_lang$core$Dict$values(
			A2(
				_monty5811$apostello$Store_Update$addNewItems,
				newItems,
				_elm_lang$core$Dict$fromList(
					A2(
						_elm_lang$core$List$map,
						function (x) {
							return {ctor: '_Tuple2', _0: x.pk, _1: x};
						},
						existingItems))));
	});
var _monty5811$apostello$Store_Update$updateStatus = F3(
	function (ignorePageInfo, next, rl) {
		var _p3 = ignorePageInfo;
		if (_p3 === true) {
			return rl;
		} else {
			var _p4 = next;
			if (_p4.ctor === 'Nothing') {
				return _monty5811$remote_list$RemoteList$FinalPageReceived(
					_monty5811$remote_list$RemoteList$toList(rl));
			} else {
				return _monty5811$apostello$Store_Model$setLoadDataStatusHelp(rl);
			}
		}
	});
var _monty5811$apostello$Store_Update$updateSmsOutbounds = F4(
	function (ignorePageInfo, ds, sms, next) {
		return _elm_lang$core$Native_Utils.update(
			ds,
			{
				outboundSms: A3(
					_monty5811$apostello$Store_Update$updateStatus,
					ignorePageInfo,
					next,
					A2(
						_monty5811$remote_list$RemoteList$apply,
						function (_p5) {
							return _elm_lang$core$List$reverse(
								A2(
									_elm_lang$core$List$sortBy,
									_monty5811$apostello$Store_Update$compareByTS,
									A2(_monty5811$apostello$Store_Update$mergeItems, sms, _p5)));
						},
						ds.outboundSms))
			});
	});
var _monty5811$apostello$Store_Update$updateSmsInbounds = F4(
	function (ignorePageInfo, ds, newSms, next) {
		return _elm_lang$core$Native_Utils.update(
			ds,
			{
				inboundSms: A3(
					_monty5811$apostello$Store_Update$updateStatus,
					ignorePageInfo,
					next,
					A2(
						_monty5811$remote_list$RemoteList$apply,
						function (_p6) {
							return _monty5811$apostello$Store_Update$sortByTimeReceived(
								A2(_monty5811$apostello$Store_Update$mergeItems, newSms, _p6));
						},
						ds.inboundSms))
			});
	});
var _monty5811$apostello$Store_Update$updateQueuedSms = F4(
	function (ignorePageInfo, ds, newSms, next) {
		return _elm_lang$core$Native_Utils.update(
			ds,
			{
				queuedSms: A3(
					_monty5811$apostello$Store_Update$updateStatus,
					ignorePageInfo,
					next,
					A2(
						_monty5811$remote_list$RemoteList$apply,
						function (_p7) {
							return A2(
								_elm_lang$core$List$sortBy,
								_monty5811$apostello$Store_Update$compareByT2S,
								A2(_monty5811$apostello$Store_Update$mergeItems, newSms, _p7));
						},
						ds.queuedSms))
			});
	});
var _monty5811$apostello$Store_Update$updateKeywords = F4(
	function (ignorePageInfo, ds, keywords, next) {
		return _elm_lang$core$Native_Utils.update(
			ds,
			{
				keywords: A3(
					_monty5811$apostello$Store_Update$updateStatus,
					ignorePageInfo,
					next,
					A2(
						_monty5811$remote_list$RemoteList$apply,
						function (_p8) {
							return A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.keyword;
								},
								A2(_monty5811$apostello$Store_Update$mergeItems, keywords, _p8));
						},
						ds.keywords))
			});
	});
var _monty5811$apostello$Store_Update$updateRecipients = F4(
	function (ignorePageInfo, dataStore, newRecipients, next) {
		return _elm_lang$core$Native_Utils.update(
			dataStore,
			{
				recipients: A3(
					_monty5811$apostello$Store_Update$updateStatus,
					ignorePageInfo,
					next,
					A2(
						_monty5811$remote_list$RemoteList$apply,
						function (_p9) {
							return A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.last_name;
								},
								A2(_monty5811$apostello$Store_Update$mergeItems, newRecipients, _p9));
						},
						dataStore.recipients))
			});
	});
var _monty5811$apostello$Store_Update$updateGroups = F4(
	function (ignorePageInfo, ds, groups, next) {
		return _elm_lang$core$Native_Utils.update(
			ds,
			{
				groups: A3(
					_monty5811$apostello$Store_Update$updateStatus,
					ignorePageInfo,
					next,
					A2(
						_monty5811$remote_list$RemoteList$apply,
						function (_p10) {
							return A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.name;
								},
								A2(_monty5811$apostello$Store_Update$mergeItems, groups, _p10));
						},
						ds.groups))
			});
	});
var _monty5811$apostello$Store_Update$updateUserProfiles = F4(
	function (ignorePageInfo, dataStore, profiles, next) {
		return _elm_lang$core$Native_Utils.update(
			dataStore,
			{
				userprofiles: A3(
					_monty5811$apostello$Store_Update$updateStatus,
					ignorePageInfo,
					next,
					A2(
						_monty5811$remote_list$RemoteList$apply,
						function (_p11) {
							return A2(
								_elm_lang$core$List$sortBy,
								function (_p12) {
									return function (_) {
										return _.email;
									}(
										function (_) {
											return _.user;
										}(_p12));
								},
								A2(_monty5811$apostello$Store_Update$mergeItems, profiles, _p11));
						},
						dataStore.userprofiles))
			});
	});
var _monty5811$apostello$Store_Update$updateElvantoGroups = F4(
	function (ignorePageInfo, ds, newGroups, next) {
		return _elm_lang$core$Native_Utils.update(
			ds,
			{
				elvantoGroups: A3(
					_monty5811$apostello$Store_Update$updateStatus,
					ignorePageInfo,
					next,
					A2(
						_monty5811$remote_list$RemoteList$apply,
						function (_p13) {
							return A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.name;
								},
								A2(_monty5811$apostello$Store_Update$mergeItems, newGroups, _p13));
						},
						ds.elvantoGroups))
			});
	});
var _monty5811$apostello$Store_Update$updateUsers = F4(
	function (ignorePageInfo, ds, newUsers, next) {
		return _elm_lang$core$Native_Utils.update(
			ds,
			{
				users: A3(
					_monty5811$apostello$Store_Update$updateStatus,
					ignorePageInfo,
					next,
					A2(
						_monty5811$remote_list$RemoteList$apply,
						function (_p14) {
							return A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.email;
								},
								A2(_monty5811$apostello$Store_Update$mergeItems, newUsers, _p14));
						},
						ds.users))
			});
	});
var _monty5811$apostello$Store_Update$updateNewData = F4(
	function (ignorePageInfo, dt, rawResp, model) {
		var _p15 = dt;
		switch (_p15.ctor) {
			case 'OutgoingSms':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						dataStore: A4(
							_monty5811$apostello$Store_Update$updateSmsOutbounds,
							ignorePageInfo,
							model.dataStore,
							A2(_monty5811$apostello$Store_Request$dataFromResp, _monty5811$apostello$Data$decodeSmsOutbound, rawResp),
							rawResp.next)
					});
			case 'IncomingSms':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						dataStore: A4(
							_monty5811$apostello$Store_Update$updateSmsInbounds,
							ignorePageInfo,
							model.dataStore,
							A2(_monty5811$apostello$Store_Request$dataFromResp, _monty5811$apostello$Data$decodeSmsInbound, rawResp),
							rawResp.next)
					});
			case 'Groups':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						dataStore: A4(
							_monty5811$apostello$Store_Update$updateGroups,
							ignorePageInfo,
							model.dataStore,
							A2(_monty5811$apostello$Store_Request$dataFromResp, _monty5811$apostello$Data$decodeRecipientGroup, rawResp),
							rawResp.next)
					});
			case 'Contacts':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						dataStore: A4(
							_monty5811$apostello$Store_Update$updateRecipients,
							ignorePageInfo,
							model.dataStore,
							A2(_monty5811$apostello$Store_Request$dataFromResp, _monty5811$apostello$Data$decodeRecipient, rawResp),
							rawResp.next)
					});
			case 'Keywords':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						dataStore: A4(
							_monty5811$apostello$Store_Update$updateKeywords,
							ignorePageInfo,
							model.dataStore,
							A2(_monty5811$apostello$Store_Request$dataFromResp, _monty5811$apostello$Data$decodeKeyword, rawResp),
							rawResp.next)
					});
			case 'ElvantoGroups':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						dataStore: A4(
							_monty5811$apostello$Store_Update$updateElvantoGroups,
							ignorePageInfo,
							model.dataStore,
							A2(_monty5811$apostello$Store_Request$dataFromResp, _monty5811$apostello$Data$decodeElvantoGroup, rawResp),
							rawResp.next)
					});
			case 'UserProfiles':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						dataStore: A4(
							_monty5811$apostello$Store_Update$updateUserProfiles,
							ignorePageInfo,
							model.dataStore,
							A2(_monty5811$apostello$Store_Request$dataFromResp, _monty5811$apostello$Data$decodeUserProfile, rawResp),
							rawResp.next)
					});
			case 'ScheduledSms':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						dataStore: A4(
							_monty5811$apostello$Store_Update$updateQueuedSms,
							ignorePageInfo,
							model.dataStore,
							A2(_monty5811$apostello$Store_Request$dataFromResp, _monty5811$apostello$Data$decodeQueuedSms, rawResp),
							rawResp.next)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						dataStore: A4(
							_monty5811$apostello$Store_Update$updateUsers,
							ignorePageInfo,
							model.dataStore,
							A2(_monty5811$apostello$Store_Request$dataFromResp, _monty5811$apostello$Data$decodeUser, rawResp),
							rawResp.next)
					});
		}
	});
var _monty5811$apostello$Store_Update$ErrResp = F2(
	function (a, b) {
		return {status: a, error: b};
	});
var _monty5811$apostello$Store_Update$decodeErrResp = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'error',
	_elm_lang$core$Json_Decode$string,
	'',
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'status',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_monty5811$apostello$Store_Update$ErrResp)));
var _monty5811$apostello$Store_Update$userFacingErrorMessage = function (err) {
	var _p16 = err;
	switch (_p16.ctor) {
		case 'BadUrl':
			return 'That\'s a bad URL. Sorry.';
		case 'NetworkError':
			return 'Looks like there may be something wrong with your internet connection :(';
		case 'BadStatus':
			var _p17 = _p16._0;
			return function (_) {
				return _.error;
			}(
				A2(
					_elm_lang$core$Result$withDefault,
					{
						status: '',
						error: A2(
							_elm_lang$core$Basics_ops['++'],
							'Something went wrong there. Sorry. (',
							A2(_elm_lang$core$Basics_ops['++'], _p17.body, ')'))
					},
					A2(_elm_lang$core$Json_Decode$decodeString, _monty5811$apostello$Store_Update$decodeErrResp, _p17.body)));
		case 'BadPayload':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'Something went wrong there. Sorry. (',
				A2(_elm_lang$core$Basics_ops['++'], _p16._0, ')'));
		default:
			return 'It took too long to reach the server...';
	}
};
var _monty5811$apostello$Store_Update$handleLoadingFailed = F3(
	function (dt, err, model) {
		var niceMsg = _monty5811$apostello$Store_Update$userFacingErrorMessage(err);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					dataStore: A3(_monty5811$apostello$Store_Model$handleFailed, dt, niceMsg, model.dataStore),
					notifications: A2(_monty5811$apostello$Notification$createLoadingFailed, niceMsg, model.notifications)
				}),
			_1: {ctor: '[]'}
		};
	});
var _monty5811$apostello$Store_Update$update = F2(
	function (msg, model) {
		var _p18 = msg;
		switch (_p18.ctor) {
			case 'LoadData':
				var _p19 = A2(_monty5811$apostello$Store_Request$maybeFetchData, model.page, model.dataStore);
				var ds = _p19._0;
				var cmds = _p19._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{dataStore: ds}),
					_1: cmds
				};
			case 'LoadDataStore':
				var ds = A2(
					_elm_lang$core$Result$withDefault,
					model.dataStore,
					A2(
						_elm_lang$core$Json_Decode$decodeString,
						A2(
							_elm_lang$core$Json_Decode$at,
							{
								ctor: '::',
								_0: 'data',
								_1: {ctor: '[]'}
							},
							_monty5811$apostello$Store_Decode$decodeDataStore),
						_p18._0));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{dataStore: ds}),
					_1: {ctor: '[]'}
				};
			case 'ReceiveRawResp':
				if (_p18._2.ctor === 'Ok') {
					var _p24 = _p18._2._0;
					var _p23 = _p18._1;
					var _p22 = _p18._0;
					var cmds = function () {
						var _p20 = _p23;
						if (_p20 === true) {
							return {ctor: '[]'};
						} else {
							var _p21 = _p24.next;
							if (_p21.ctor === 'Nothing') {
								return {ctor: '[]'};
							} else {
								return {
									ctor: '::',
									_0: _monty5811$apostello$Store_Request$fetchData(
										{
											ctor: '_Tuple2',
											_0: _p22,
											_1: {
												ctor: '_Tuple2',
												_0: false,
												_1: _monty5811$apostello$Store_Request$increasePageSize(_p21._0)
											}
										}),
									_1: {ctor: '[]'}
								};
							}
						}
					}();
					return {
						ctor: '_Tuple2',
						_0: A4(_monty5811$apostello$Store_Update$updateNewData, _p23, _p22, _p24, model),
						_1: cmds
					};
				} else {
					return A3(_monty5811$apostello$Store_Update$handleLoadingFailed, _p18._0, _p18._2._0, model);
				}
			case 'ToggleGroupMembership':
				var _p26 = _p18._0;
				var _p25 = _p18._1;
				var updatedGroup = _elm_lang$core$Native_Utils.update(
					_p26,
					{
						members: A2(_monty5811$apostello$Store_Optimistic$updateGroupMembers, _p26.members, _p25),
						nonmembers: A2(_monty5811$apostello$Store_Optimistic$updateGroupMembers, _p26.nonmembers, _p25)
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dataStore: A4(
								_monty5811$apostello$Store_Update$updateGroups,
								false,
								model.dataStore,
								{
									ctor: '::',
									_0: updatedGroup,
									_1: {ctor: '[]'}
								},
								_elm_lang$core$Maybe$Just('dummy'))
						}),
					_1: {
						ctor: '::',
						_0: A4(
							_monty5811$apostello$Store_Toggle$groupMembership,
							model.settings.csrftoken,
							_p26.pk,
							_p25.pk,
							A2(_monty5811$apostello$Store_Optimistic$memberInList, _p26.members, _p25)),
						_1: {ctor: '[]'}
					}
				};
			case 'ReceiveToggleGroupMembership':
				if (_p18._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								dataStore: A4(
									_monty5811$apostello$Store_Update$updateGroups,
									false,
									model.dataStore,
									{
										ctor: '::',
										_0: _p18._0._0,
										_1: {ctor: '[]'}
									},
									_elm_lang$core$Maybe$Just('dummy'))
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return _monty5811$apostello$Helpers$handleNotSaved(model);
				}
			case 'ToggleElvantoGroupSync':
				var _p27 = _p18._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dataStore: A2(_monty5811$apostello$Store_Optimistic$toggleElvantoGroup, _p27, model.dataStore)
						}),
					_1: {
						ctor: '::',
						_0: A2(_monty5811$apostello$Store_Toggle$elvantoGroupSync, model.settings.csrftoken, _p27),
						_1: {ctor: '[]'}
					}
				};
			case 'ReceiveToggleElvantoGroupSync':
				if (_p18._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								dataStore: A4(
									_monty5811$apostello$Store_Update$updateElvantoGroups,
									false,
									model.dataStore,
									{
										ctor: '::',
										_0: _p18._0._0,
										_1: {ctor: '[]'}
									},
									_elm_lang$core$Maybe$Just('dummy'))
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return _monty5811$apostello$Helpers$handleNotSaved(model);
				}
			case 'CancelSms':
				var _p28 = _p18._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dataStore: A2(_monty5811$apostello$Store_Optimistic$cancelSms, model.dataStore, _p28)
						}),
					_1: {
						ctor: '::',
						_0: A2(_monty5811$apostello$Store_Toggle$cancelSms, model.settings.csrftoken, _p28),
						_1: {ctor: '[]'}
					}
				};
			case 'ToggleRecipientArchive':
				var _p29 = _p18._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dataStore: A2(_monty5811$apostello$Store_Optimistic$removeRecipient, model.dataStore, _p29)
						}),
					_1: {
						ctor: '::',
						_0: A3(_monty5811$apostello$Store_Toggle$recipientArchive, model.settings.csrftoken, _p18._0, _p29),
						_1: {ctor: '[]'}
					}
				};
			case 'ToggleKeywordArchive':
				var _p30 = _p18._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dataStore: A2(_monty5811$apostello$Store_Optimistic$archiveKeyword, model.dataStore, _p30)
						}),
					_1: {
						ctor: '::',
						_0: A3(_monty5811$apostello$Store_Toggle$archiveKeyword, model.settings.csrftoken, _p18._0, _p30),
						_1: {ctor: '[]'}
					}
				};
			case 'ToggleGroupArchive':
				var _p31 = _p18._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dataStore: A2(_monty5811$apostello$Store_Optimistic$archiveGroup, model.dataStore, _p31)
						}),
					_1: {
						ctor: '::',
						_0: A3(_monty5811$apostello$Store_Toggle$recipientGroupArchive, model.settings.csrftoken, _p18._0, _p31),
						_1: {ctor: '[]'}
					}
				};
			case 'ReprocessSms':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: {
						ctor: '::',
						_0: A2(_monty5811$apostello$Store_Toggle$reprocessSms, model.settings.csrftoken, _p18._0),
						_1: {ctor: '[]'}
					}
				};
			case 'ReceiveReprocessSms':
				if (_p18._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								dataStore: A4(
									_monty5811$apostello$Store_Update$updateSmsInbounds,
									false,
									model.dataStore,
									{
										ctor: '::',
										_0: _p18._0._0,
										_1: {ctor: '[]'}
									},
									_elm_lang$core$Maybe$Just('dummy'))
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return _monty5811$apostello$Helpers$handleNotSaved(model);
				}
			case 'ToggleInboundSmsArchive':
				var _p32 = _p18._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dataStore: A2(_monty5811$apostello$Store_Optimistic$archiveSms, model.dataStore, _p32)
						}),
					_1: {
						ctor: '::',
						_0: A3(_monty5811$apostello$Store_Toggle$smsArchive, model.settings.csrftoken, _p18._0, _p32),
						_1: {ctor: '[]'}
					}
				};
			case 'ReceiveToggleInboundSmsArchive':
				if (_p18._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				} else {
					return _monty5811$apostello$Helpers$handleNotSaved(model);
				}
			case 'ToggleInboundSmsDealtWith':
				var _p33 = _p18._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dataStore: A2(_monty5811$apostello$Store_Optimistic$toggleDealtWith, model.dataStore, _p33)
						}),
					_1: {
						ctor: '::',
						_0: A3(_monty5811$apostello$Store_Toggle$smsDealtWith, model.settings.csrftoken, _p18._0, _p33),
						_1: {ctor: '[]'}
					}
				};
			case 'ReceiveToggleInboundSmsDealtWith':
				if (_p18._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								dataStore: A4(
									_monty5811$apostello$Store_Update$updateSmsInbounds,
									false,
									model.dataStore,
									{
										ctor: '::',
										_0: _p18._0._0,
										_1: {ctor: '[]'}
									},
									_elm_lang$core$Maybe$Just('dummy'))
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return _monty5811$apostello$Helpers$handleNotSaved(model);
				}
			case 'ToggleWallDisplay':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: {
						ctor: '::',
						_0: A3(_monty5811$apostello$Store_Toggle$wallDisplay, model.settings.csrftoken, _p18._0, _p18._1),
						_1: {ctor: '[]'}
					}
				};
			case 'ReceiveToggleWallDisplay':
				if (_p18._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								dataStore: A4(
									_monty5811$apostello$Store_Update$updateSmsInbounds,
									true,
									model.dataStore,
									{
										ctor: '::',
										_0: _p18._0._0,
										_1: {ctor: '[]'}
									},
									_elm_lang$core$Maybe$Nothing)
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return _monty5811$apostello$Helpers$handleNotSaved(model);
				}
			case 'ToggleProfileField':
				var _p34 = _p18._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dataStore: A4(
								_monty5811$apostello$Store_Update$updateUserProfiles,
								false,
								model.dataStore,
								{
									ctor: '::',
									_0: _p34,
									_1: {ctor: '[]'}
								},
								_elm_lang$core$Maybe$Just('dummy'))
						}),
					_1: {
						ctor: '::',
						_0: A2(_monty5811$apostello$Store_Toggle$profileField, model.settings.csrftoken, _p34),
						_1: {ctor: '[]'}
					}
				};
			case 'ReceiveToggleProfileField':
				if (_p18._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								dataStore: A4(
									_monty5811$apostello$Store_Update$updateUserProfiles,
									false,
									model.dataStore,
									{
										ctor: '::',
										_0: _p18._0._0,
										_1: {ctor: '[]'}
									},
									_elm_lang$core$Maybe$Just('dummy'))
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return _monty5811$apostello$Helpers$handleNotSaved(model);
				}
			default:
				if (_p18._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				} else {
					return _monty5811$apostello$Helpers$handleNotSaved(model);
				}
		}
	});

var _monty5811$apostello$Update$isJust = function (m) {
	return !_elm_lang$core$Native_Utils.eq(m, _elm_lang$core$Maybe$Nothing);
};
var _monty5811$apostello$Update$updateSettings = F2(
	function (newSCModel, settings) {
		var newEmailSetup = A2(
			_elm_lang$core$List$all,
			_elm_lang$core$Basics$identity,
			{
				ctor: '::',
				_0: _monty5811$apostello$Update$isJust(newSCModel.email_from),
				_1: {
					ctor: '::',
					_0: _monty5811$apostello$Update$isJust(newSCModel.email_host),
					_1: {
						ctor: '::',
						_0: _monty5811$apostello$Update$isJust(newSCModel.email_password),
						_1: {
							ctor: '::',
							_0: _monty5811$apostello$Update$isJust(newSCModel.email_port),
							_1: {
								ctor: '::',
								_0: _monty5811$apostello$Update$isJust(newSCModel.email_username),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
		var newTwilio = A3(_elm_lang$core$Maybe$map2, _monty5811$apostello$Models$TwilioSettings, newSCModel.twilio_sending_cost, newSCModel.twilio_from_num);
		return _elm_lang$core$Native_Utils.update(
			settings,
			{smsCharLimit: newSCModel.sms_char_limit, defaultNumberPrefix: newSCModel.default_number_prefix, twilio: newTwilio, isEmailSetup: newEmailSetup});
	});
var _monty5811$apostello$Update$maybeAddEmailWarning = function (model) {
	var notif = A3(_monty5811$apostello$Notification$Notification, _monty5811$apostello$Notification$WarningNotification, 'You need to setup your email credentials.\n\napostello won\'t be able to send emails until you do. This means new users cannot confirm their email address and no notifications can be sent', false);
	var _p0 = model.settings.isEmailSetup;
	if (_p0 === false) {
		return A2(_elm_lang$core$List$member, notif, model.notifications) ? model : _elm_lang$core$Native_Utils.update(
			model,
			{
				notifications: {ctor: '::', _0: notif, _1: model.notifications}
			});
	} else {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				notifications: A2(_monty5811$apostello$Notification$remove, notif, model.notifications)
			});
	}
};
var _monty5811$apostello$Update$maybeAddTwilioWarning = function (model) {
	var notif = A3(_monty5811$apostello$Notification$Notification, _monty5811$apostello$Notification$ErrorNotification, 'You need to setup your Twilio credentials.\n\nYou won\'t be able to send messages until you do.', false);
	var _p1 = model.settings.twilio;
	if (_p1.ctor === 'Nothing') {
		return A2(_elm_lang$core$List$member, notif, model.notifications) ? model : _elm_lang$core$Native_Utils.update(
			model,
			{
				notifications: {ctor: '::', _0: notif, _1: model.notifications}
			});
	} else {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				notifications: A2(_monty5811$apostello$Notification$remove, notif, model.notifications)
			});
	}
};
var _monty5811$apostello$Update$updateHelper = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'Nope':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: {ctor: '[]'}
				};
			case 'ToggleMenu':
				var _p3 = model.menuState;
				if (_p3.ctor === 'MenuHidden') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{menuState: _monty5811$apostello$Models$MenuVisible}),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{menuState: _monty5811$apostello$Models$MenuHidden}),
						_1: {ctor: '[]'}
					};
				}
			case 'NewUrl':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{notifications: _monty5811$apostello$Notification$empty, menuState: _monty5811$apostello$Models$MenuHidden}),
					_1: {
						ctor: '::',
						_0: _elm_lang$navigation$Navigation$newUrl(_p2._0),
						_1: {ctor: '[]'}
					}
				};
			case 'UrlChange':
				var _p4 = A2(_monty5811$apostello$Route$loc2Page, _p2._0, model.settings);
				var page = _p4._0;
				var pageCmd = _p4._1;
				var _p5 = A2(
					_monty5811$apostello$Store_Request$maybeFetchData,
					page,
					_monty5811$apostello$Store_Model$resetStatus(model.dataStore));
				var newDs = _p5._0;
				var storeCmds = _p5._1;
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{dataStore: newDs, page: page, table: _monty5811$apostello$FilteringTable$initialModel});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _elm_lang$core$List$concat(
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$List$map,
								_elm_lang$core$Platform_Cmd$map(_monty5811$apostello$Messages$StoreMsg),
								storeCmds),
							_1: {
								ctor: '::',
								_0: {
									ctor: '::',
									_0: pageCmd,
									_1: {ctor: '[]'}
								},
								_1: {ctor: '[]'}
							}
						})
				};
			case 'StoreMsg':
				var _p6 = A2(_monty5811$apostello$Store_Update$update, _p2._0, model);
				var newModel = _p6._0;
				var storeCmds = _p6._1;
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Platform_Cmd$map(_monty5811$apostello$Messages$StoreMsg),
						storeCmds)
				};
			case 'FormMsg':
				if (((_p2._0.ctor === 'SiteConfigFormMsg') && (_p2._0._0.ctor === 'ReceiveInitialData')) && (_p2._0._0._0.ctor === 'Ok')) {
					return A2(
						_monty5811$apostello$Forms_Update$update,
						_p2._0,
						_elm_lang$core$Native_Utils.update(
							model,
							{
								settings: A2(_monty5811$apostello$Update$updateSettings, _p2._0._0._0._0, model.settings)
							}));
				} else {
					return A2(_monty5811$apostello$Forms_Update$update, _p2._0, model);
				}
			case 'SidePanelMsg':
				return A2(_monty5811$apostello$Pages_Fragments_SidePanel$update, _p2._0, model);
			case 'NotificationMsg':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							notifications: A2(_monty5811$apostello$Notification$update, _p2._0, model.notifications)
						}),
					_1: {ctor: '[]'}
				};
			case 'FirstRunMsg':
				var _p7 = model.page;
				if (_p7.ctor === 'FirstRun') {
					var _p8 = A3(_monty5811$apostello$Pages_FirstRun$update, model.settings.csrftoken, _p2._0, _p7._0);
					var newFrModel = _p8._0;
					var frCmds = _p8._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: _monty5811$apostello$Pages$FirstRun(newFrModel)
							}),
						_1: A2(
							_elm_lang$core$List$map,
							_elm_lang$core$Platform_Cmd$map(_monty5811$apostello$Messages$FirstRunMsg),
							frCmds)
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'DebugMsg':
				var _p9 = model.page;
				if (_p9.ctor === 'Debug') {
					var _p10 = A3(_monty5811$apostello$Pages_Debug$update, model.settings.csrftoken, _p2._0, _p9._0);
					var newDgModel = _p10._0;
					var dgCmds = _p10._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: _monty5811$apostello$Pages$Debug(newDgModel)
							}),
						_1: A2(
							_elm_lang$core$List$map,
							_elm_lang$core$Platform_Cmd$map(_monty5811$apostello$Messages$DebugMsg),
							dgCmds)
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'ElvantoMsg':
				var _p11 = model.page;
				if (_p11.ctor === 'ElvantoImport') {
					return A3(
						_monty5811$apostello$Pages_ElvantoImport$update,
						{topLevelMsg: _monty5811$apostello$Messages$ElvantoMsg, csrftoken: model.settings.csrftoken},
						_p2._0,
						model);
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'GroupComposerMsg':
				var _p12 = model.page;
				if (_p12.ctor === 'GroupComposer') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: _monty5811$apostello$Pages$GroupComposer(
									_monty5811$apostello$Pages_GroupComposer$update(_p2._0))
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'KeyRespTableMsg':
				var _p13 = model.page;
				if (_p13.ctor === 'KeyRespTable') {
					var _p14 = A2(
						_monty5811$apostello$Pages_KeyRespTable$update,
						_p2._0,
						{csrftoken: model.settings.csrftoken, keyRespModel: _p13._0, isArchive: _p13._1, keyword: _p13._2, store: model.dataStore, optArchiveMatchingSms: _monty5811$apostello$Store_Optimistic$optArchiveMatchingSms});
					var newKRModel = _p14._0;
					var newIsArchive = _p14._1;
					var newK = _p14._2;
					var newStore = _p14._3;
					var krtCmds = _p14._4;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: A3(_monty5811$apostello$Pages$KeyRespTable, newKRModel, newIsArchive, newK),
								dataStore: newStore
							}),
						_1: A2(
							_elm_lang$core$List$map,
							_elm_lang$core$Platform_Cmd$map(_monty5811$apostello$Messages$KeyRespTableMsg),
							krtCmds)
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'ApiSetupMsg':
				var _p15 = model.page;
				if (_p15.ctor === 'ApiSetup') {
					var _p16 = A2(
						_monty5811$apostello$Pages_ApiSetup$update,
						_p2._0,
						{key: _p15._0, notifications: model.notifications, csrftoken: model.settings.csrftoken});
					var newKey = _p16._0;
					var notifications = _p16._1;
					var apiCmds = _p16._2;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: _monty5811$apostello$Pages$ApiSetup(newKey),
								notifications: notifications
							}),
						_1: A2(
							_elm_lang$core$List$map,
							_elm_lang$core$Platform_Cmd$map(_monty5811$apostello$Messages$ApiSetupMsg),
							apiCmds)
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			case 'TableMsg':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							table: A2(_monty5811$apostello$FilteringTable$update, _p2._0, model.table)
						}),
					_1: {ctor: '[]'}
				};
			case 'CurrentTime':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentTime: _p2._0}),
					_1: {ctor: '[]'}
				};
			case 'VisibilityChange':
				var _p19 = _p2._0;
				var _p17 = _p19;
				if (_p17.ctor === 'Hidden') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{pageVisibility: _p19}),
						_1: {ctor: '[]'}
					};
				} else {
					var _p18 = A2(_monty5811$apostello$Store_Request$maybeFetchData, model.page, model.dataStore);
					var newDataStore = _p18._0;
					var storeCmds = _p18._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{dataStore: newDataStore, pageVisibility: _p19}),
						_1: A2(
							_elm_lang$core$List$map,
							_elm_lang$core$Platform_Cmd$map(_monty5811$apostello$Messages$StoreMsg),
							storeCmds)
					};
				}
			case 'KeyPressed':
				var _p20 = {ctor: '_Tuple2', _0: model.menuState, _1: _p2._0};
				if ((_p20._0.ctor === 'MenuVisible') && (_p20._1 === 27)) {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{menuState: _monty5811$apostello$Models$MenuHidden}),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: {ctor: '[]'}
					};
				}
			default:
				var _p21 = A3(_monty5811$apostello$WebPush$update, model.settings.csrftoken, _p2._0, model.webPush);
				var wpModel = _p21._0;
				var wpCmd = _p21._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{webPush: wpModel}),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$Platform_Cmd$map, _monty5811$apostello$Messages$WebPushMsg, wpCmd),
						_1: {ctor: '[]'}
					}
				};
		}
	});
var _monty5811$apostello$Update$update = F2(
	function (msg, model) {
		var _p22 = A2(_monty5811$apostello$Update$updateHelper, msg, model);
		var newModel = _p22._0;
		var cmds = _p22._1;
		return {
			ctor: '_Tuple2',
			_0: _monty5811$apostello$Update$maybeAddTwilioWarning(
				_monty5811$apostello$Update$maybeAddEmailWarning(newModel)),
			_1: _elm_lang$core$Platform_Cmd$batch(cmds)
		};
	});

var _monty5811$apostello$Pages_AccessDenied$view = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('alert alert-danger'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$p,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Uh, oh, you don\'t have access to this page.'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('You\'ll need to contact the admin that runs this site to get access.'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}
	});

var _monty5811$apostello$Pages_Curator$curateToggleCell = F2(
	function (toggleWallDisplay, sms) {
		var colour = function () {
			var _p0 = sms.display_on_wall;
			if (_p0 === true) {
				return 'button-success';
			} else {
				return 'button-danger';
			}
		}();
		var className = A2(_elm_lang$core$Basics_ops['++'], 'button ', colour);
		var text_ = function () {
			var _p1 = sms.display_on_wall;
			if (_p1 === true) {
				return 'Showing';
			} else {
				return 'Hidden';
			}
		}();
		return A2(
			_elm_lang$html$Html$td,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(className),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								A2(toggleWallDisplay, sms.display_on_wall, sms.pk)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(text_),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_Curator$smsRow = F2(
	function (toggleWallDisplay, sms) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toString(sms.pk),
			_1: A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(sms.content),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_monty5811$apostello$Helpers$formatDate(sms.time_received)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(_monty5811$apostello$Pages_Curator$curateToggleCell, toggleWallDisplay, sms),
							_1: {ctor: '[]'}
						}
					}
				})
		};
	});
var _monty5811$apostello$Pages_Curator$view = function (_p2) {
	var _p3 = _p2;
	var head = A2(
		_elm_lang$html$Html$thead,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$th,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Message'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$th,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Time'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$th,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Display?'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
	return A5(
		_monty5811$apostello$FilteringTable$defaultTable,
		{top: _p3.tableMsg},
		head,
		_p3.tableModel,
		_monty5811$apostello$Pages_Curator$smsRow(_p3.toggleWallDisplay),
		_p3.sms);
};
var _monty5811$apostello$Pages_Curator$Props = F4(
	function (a, b, c, d) {
		return {tableMsg: a, tableModel: b, sms: c, toggleWallDisplay: d};
	});

var _monty5811$apostello$Pages_Fragments_Menu$lockedItem = F4(
	function (isStaff, uri, desc, perm) {
		var _p0 = isStaff || perm;
		if (_p0 === true) {
			return A2(
				_elm_lang$html$Html$li,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(uri),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(desc),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$html$Html$text('');
		}
	});
var _monty5811$apostello$Pages_Fragments_Menu$lockedSpaItem = F4(
	function (isStaff, page, desc, perm) {
		var _p1 = isStaff || perm;
		if (_p1 === true) {
			return A2(
				_elm_lang$html$Html$li,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A4(
						_monty5811$apostello$Route$spaLink,
						_elm_lang$html$Html$a,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(desc),
							_1: {ctor: '[]'}
						},
						page),
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$html$Html$text('');
		}
	});
var _monty5811$apostello$Pages_Fragments_Menu$header = F2(
	function (s, check) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (x, y) {
					return x || y;
				}),
			false,
			check) ? A2(
			_elm_lang$html$Html$h4,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'user-select', _1: 'none'},
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('text-left'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(s),
				_1: {ctor: '[]'}
			}) : _elm_lang$html$Html$text('');
	});
var _monty5811$apostello$Pages_Fragments_Menu$pushMenu = F2(
	function (isStaff, wp) {
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$html$Html$map(_monty5811$apostello$Messages$WebPushMsg),
			_monty5811$apostello$WebPush$view(wp));
	});
var _monty5811$apostello$Pages_Fragments_Menu$menuGroup = F3(
	function (title, perms, items) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('menuGroup'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(_monty5811$apostello$Pages_Fragments_Menu$header, title, perms),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{ctor: '[]'},
						items),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_Fragments_Menu$twilioNumber = function (maybeNum) {
	var _p2 = maybeNum;
	if (_p2.ctor === 'Nothing') {
		return _elm_lang$html$Html$text('');
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('text-center'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2rem'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2rem'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(_elm_lang$core$Basics_ops['++'], 'Twilio Number: ', _p2._0)),
				_1: {ctor: '[]'}
			});
	}
};
var _monty5811$apostello$Pages_Fragments_Menu$allUsersMenuItems = F2(
	function (settings, wp) {
		var userPerms = settings.userPerms;
		var isStaff = userPerms.user.is_staff;
		var item = _monty5811$apostello$Pages_Fragments_Menu$lockedItem(isStaff);
		var itemSpa = _monty5811$apostello$Pages_Fragments_Menu$lockedSpaItem(isStaff);
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('menu'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A3(
						_monty5811$apostello$Pages_Fragments_Menu$menuGroup,
						'Keywords',
						{
							ctor: '::',
							_0: isStaff,
							_1: {
								ctor: '::',
								_0: userPerms.can_see_keywords,
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A3(
								itemSpa,
								_monty5811$apostello$Pages$KeywordTable(false),
								'Keywords',
								userPerms.can_see_keywords),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A3(
							_monty5811$apostello$Pages_Fragments_Menu$menuGroup,
							'SMS',
							{
								ctor: '::',
								_0: isStaff,
								_1: {
									ctor: '::',
									_0: userPerms.can_send_sms,
									_1: {
										ctor: '::',
										_0: userPerms.can_see_incoming,
										_1: {
											ctor: '::',
											_0: userPerms.can_see_outgoing,
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{
								ctor: '::',
								_0: A3(
									itemSpa,
									A2(_monty5811$apostello$Pages$initSendAdhoc, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing),
									'Send to Individuals',
									userPerms.can_send_sms),
								_1: {
									ctor: '::',
									_0: A3(
										itemSpa,
										A2(_monty5811$apostello$Pages$initSendGroup, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing),
										'Send to a Group',
										userPerms.can_send_sms),
									_1: {
										ctor: '::',
										_0: A3(itemSpa, _monty5811$apostello$Pages$InboundTable, 'Incoming SMS', userPerms.can_see_incoming),
										_1: {
											ctor: '::',
											_0: A3(itemSpa, _monty5811$apostello$Pages$OutboundTable, 'Outgoing SMS', userPerms.can_see_outgoing),
											_1: {
												ctor: '::',
												_0: A3(itemSpa, _monty5811$apostello$Pages$ScheduledSmsTable, 'Scheduled Messages', isStaff),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A3(
								_monty5811$apostello$Pages_Fragments_Menu$menuGroup,
								'Contacts',
								{
									ctor: '::',
									_0: isStaff,
									_1: {
										ctor: '::',
										_0: userPerms.can_see_contact_names,
										_1: {
											ctor: '::',
											_0: userPerms.can_see_groups,
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: A3(
										itemSpa,
										_monty5811$apostello$Pages$RecipientTable(false),
										'Contacts',
										userPerms.can_see_contact_names),
									_1: {
										ctor: '::',
										_0: A3(
											itemSpa,
											_monty5811$apostello$Pages$GroupTable(false),
											'Groups',
											userPerms.can_see_groups),
										_1: {
											ctor: '::',
											_0: A3(
												itemSpa,
												_monty5811$apostello$Pages$CreateAllGroup(''),
												'Create \"all\" group',
												isStaff),
											_1: {
												ctor: '::',
												_0: A3(
													itemSpa,
													_monty5811$apostello$Pages$GroupComposer(_monty5811$apostello$Pages_GroupComposer$initialModel),
													'Compose group',
													userPerms.can_see_groups),
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: A3(
									_monty5811$apostello$Pages_Fragments_Menu$menuGroup,
									'Settings',
									{
										ctor: '::',
										_0: isStaff,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A3(
											itemSpa,
											_monty5811$apostello$Pages$SiteConfigForm(_elm_lang$core$Maybe$Nothing),
											'Site Configuration',
											isStaff),
										_1: {
											ctor: '::',
											_0: A3(
												itemSpa,
												_monty5811$apostello$Pages$DefaultResponsesForm(_elm_lang$core$Maybe$Nothing),
												'Default Responses',
												isStaff),
											_1: {
												ctor: '::',
												_0: A3(itemSpa, _monty5811$apostello$Pages$UserProfileTable, 'User Permissions', isStaff),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A3(
										_monty5811$apostello$Pages_Fragments_Menu$menuGroup,
										'Import',
										{
											ctor: '::',
											_0: isStaff,
											_1: {
												ctor: '::',
												_0: userPerms.can_import,
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: A3(
												itemSpa,
												_monty5811$apostello$Pages$ContactImport(''),
												'CSV',
												userPerms.can_import),
											_1: {
												ctor: '::',
												_0: A3(itemSpa, _monty5811$apostello$Pages$ElvantoImport, 'Elvanto', userPerms.can_import),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: A3(
											_monty5811$apostello$Pages_Fragments_Menu$menuGroup,
											'Misc',
											{
												ctor: '::',
												_0: isStaff,
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A3(itemSpa, _monty5811$apostello$Pages$Usage, 'Usage Dashboard', isStaff),
												_1: {
													ctor: '::',
													_0: A3(item, '/admin/', 'Admin', isStaff),
													_1: {
														ctor: '::',
														_0: A3(
															itemSpa,
															_monty5811$apostello$Pages$ApiSetup(_elm_lang$core$Maybe$Nothing),
															'API Setup',
															isStaff),
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A3(
												_monty5811$apostello$Pages_Fragments_Menu$menuGroup,
												'Account',
												{
													ctor: '::',
													_0: true,
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A4(_monty5811$apostello$Pages_Fragments_Menu$lockedItem, false, _monty5811$apostello$Urls$account_change_password, 'Change Password', !userPerms.user.is_social),
													_1: {
														ctor: '::',
														_0: A3(item, _monty5811$apostello$Urls$account_logout, 'Logout', true),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A3(
													_monty5811$apostello$Pages_Fragments_Menu$menuGroup,
													'Push Status',
													{
														ctor: '::',
														_0: isStaff || userPerms.can_see_incoming,
														_1: {ctor: '[]'}
													},
													A2(_monty5811$apostello$Pages_Fragments_Menu$pushMenu, isStaff, wp)),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: _monty5811$apostello$Pages_Fragments_Menu$twilioNumber(
					A2(
						_elm_lang$core$Maybe$map,
						function (_) {
							return _.fromNumber;
						},
						settings.twilio)),
				_1: {ctor: '[]'}
			}
		};
	});
var _monty5811$apostello$Pages_Fragments_Menu$menu = F2(
	function (settings, wp) {
		return A2(_monty5811$apostello$Pages_Fragments_Menu$allUsersMenuItems, settings, wp);
	});

var _monty5811$apostello$Pages_Fragments_Shell$title = function (page) {
	var _p0 = page;
	switch (_p0.ctor) {
		case 'Home':
			return '';
		case 'AccessDenied':
			return '';
		case 'Debug':
			return 'Debug Configuration';
		case 'ContactForm':
			if (_p0._1.ctor === 'Just') {
				return 'Edit Contact';
			} else {
				return 'New Contact';
			}
		case 'CreateAllGroup':
			return '';
		case 'Curator':
			return 'Wall Curator';
		case 'ElvantoImport':
			return 'Elvanto Sync';
		case 'Error404':
			return '';
		case 'FirstRun':
			return '';
		case 'GroupComposer':
			return '';
		case 'GroupForm':
			if (_p0._1.ctor === 'Just') {
				return 'Edit Group';
			} else {
				return 'New Group';
			}
		case 'GroupTable':
			if (_p0._0 === true) {
				return 'Groups (archived)';
			} else {
				return 'Groups';
			}
		case 'InboundTable':
			return 'Incoming';
		case 'KeyRespTable':
			if (_p0._1 === true) {
				return A2(_elm_lang$core$Basics_ops['++'], _p0._2, ' reponses (archived)');
			} else {
				return A2(_elm_lang$core$Basics_ops['++'], _p0._2, ' reponses');
			}
		case 'KeywordForm':
			if (_p0._1.ctor === 'Just') {
				return 'Edit Keyword';
			} else {
				return 'New Keyword';
			}
		case 'KeywordTable':
			if (_p0._0 === false) {
				return 'Keywords';
			} else {
				return 'Keywords (archived)';
			}
		case 'OutboundTable':
			return 'Outgoing';
		case 'RecipientTable':
			if (_p0._0 === false) {
				return 'Contacts';
			} else {
				return 'Contacts (archived)';
			}
		case 'ScheduledSmsTable':
			return 'Scheduled';
		case 'SendAdhoc':
			return 'Send';
		case 'SendGroup':
			return 'Send';
		case 'UserProfileTable':
			return 'Permissions';
		case 'Wall':
			return '';
		case 'SiteConfigForm':
			return 'Configuration';
		case 'DefaultResponsesForm':
			return 'Default Responses';
		case 'Usage':
			return '';
		case 'UserProfileForm':
			return '';
		case 'Help':
			return 'Help';
		case 'ContactImport':
			return 'CSV Import';
		default:
			return 'API Setup';
	}
};
var _monty5811$apostello$Pages_Fragments_Shell$menuClass = function (menuState) {
	var _p1 = menuState;
	if (_p1.ctor === 'MenuVisible') {
		return 'menuVisible';
	} else {
		return 'menuHidden';
	}
};
var _monty5811$apostello$Pages_Fragments_Shell$commonShell = F3(
	function (model, mainContent, fab) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('elmShell'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$header,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('head'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('text-center'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: function () {
							var _p2 = model.page;
							if (_p2.ctor === 'Home') {
								return A2(
									_elm_lang$html$Html$h2,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('apostello'),
										_1: {ctor: '[]'}
									});
							} else {
								return A4(
									_monty5811$apostello$Route$spaLink,
									_elm_lang$html$Html$a,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$h2,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('apostello'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									_monty5811$apostello$Pages$Home);
							}
						}(),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('button bounce'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_monty5811$apostello$Messages$ToggleMenu),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Menu'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$main_,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('wrap'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: fab,
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$id('content'),
										_1: {ctor: '[]'}
									},
									_elm_lang$core$List$concat(
										{
											ctor: '::',
											_0: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$h3,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(
															_monty5811$apostello$Pages_Fragments_Shell$title(model.page)),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											},
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$core$List$map,
													_elm_lang$html$Html$map(_monty5811$apostello$Messages$NotificationMsg),
													_monty5811$apostello$Notification$view(model.notifications)),
												_1: {
													ctor: '::',
													_0: {
														ctor: '::',
														_0: mainContent,
														_1: {ctor: '[]'}
													},
													_1: {ctor: '[]'}
												}
											}
										})),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$id('menuWrapper'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class(
										_monty5811$apostello$Pages_Fragments_Shell$menuClass(model.menuState)),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('text-right'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('button button-lg'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$id('close'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_monty5811$apostello$Messages$ToggleMenu),
														_1: {ctor: '[]'}
													}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$i,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('fa fa-close'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: A2(_monty5811$apostello$Pages_Fragments_Menu$menu, model.settings, model.webPush)
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _monty5811$apostello$Pages_Fragments_Shell$view = F3(
	function (model, mainContent, fab) {
		var _p3 = model.page;
		switch (_p3.ctor) {
			case 'Wall':
				return mainContent;
			case 'Usage':
				return mainContent;
			case 'FirstRun':
				return mainContent;
			default:
				return A3(_monty5811$apostello$Pages_Fragments_Shell$commonShell, model, mainContent, fab);
		}
	});

var _monty5811$apostello$Pages_GroupTable$groupRow = F2(
	function (props, group) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toString(group.pk),
			_1: A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: props.groupFormLink(group),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('hide-sm-down'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(group.description),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'$',
											A2(_myrho$elm_round$Round$round, 2, group.cost))),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_monty5811$apostello$Helpers$archiveCell,
									group.is_archived,
									A2(props.toggleArchiveGroup, group.is_archived, group.pk)),
								_1: {ctor: '[]'}
							}
						}
					}
				})
		};
	});
var _monty5811$apostello$Pages_GroupTable$tableHead = A2(
	_elm_lang$html$Html$thead,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$th,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Name'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$th,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('hide-sm-down'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Description'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$th,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Cost'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$th,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('hide-sm-down'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _monty5811$apostello$Pages_GroupTable$view = function (props) {
	return A5(
		_monty5811$apostello$FilteringTable$defaultTable,
		{top: props.tableMsg},
		_monty5811$apostello$Pages_GroupTable$tableHead,
		props.tableModel,
		_monty5811$apostello$Pages_GroupTable$groupRow(props),
		props.groups);
};
var _monty5811$apostello$Pages_GroupTable$Props = F5(
	function (a, b, c, d, e) {
		return {tableMsg: a, tableModel: b, groups: c, toggleArchiveGroup: d, groupFormLink: e};
	});

var _monty5811$apostello$Pages_Help$view = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h3,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('faqs'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('FAQs'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Q. How do I “mail merge” my messages? '),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('A. Any occurrence of '),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$code,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('%name%'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('in any outgoing message will be converted to the first name of each recipient of the message. This also applies to automatic replies sent out by the system.'),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Q. Can I send a message to a group without visiting this site?'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('A. No, you must come here to send a message. However the site should work fine on your phone or tablet.'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Q. What’s a keyword?'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('A. All incoming messages are expected to start with a keyword (maximum length, 12) followed by a space. This is to allow easy collection, grouping, tracking and export of incoming messages and to make it easy to use this service for things like event sign ups or polls and surveys.'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Q. I thought there was a particular keyword, but I can’t see it? '),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('A. You either don’t have access, or someone deleted it. You can request access from the Production Team, who can also recovery deleted keywords.'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Q. How do I get rid of matched keyword responses?'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('A. Click'),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$code,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Archive'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text('to remove a single message, or '),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$code,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Archive all now!'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('to remove all the messages for a keyword.'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Q. What happened to all my keyword responses? '),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('A. Someone probably archived them. You can view them by clicking on the '),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$code,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Archived Replies'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('button when viewing a keyword.'),
																		_1: {ctor: '[]'}
																	}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Q. How can I stop getting messages? '),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$p,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('A. Reply to any message with '),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$code,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('stop'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('and you will be unsubscribed from all future messages. You will need to send '),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$code,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('start'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('to the same number to receive messages again. We cannot reactivate you - the unsubscribing is handled by Twilio and     will stop you from receiving any messages from us. This is not a good idea if you want to sign up for things using this service.'),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});

var _monty5811$apostello$Pages_Home$view = function (helpLink) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Welcome to apostello.'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Please bear in mind that each message you send costs '),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('https://www.twilio.com/sms/pricing'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('money'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(', so please do not send frivolous messages.'),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Additionally, try not to send too many messages - do not abuse this system, people do not like being bombarded with messages all day.'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: helpLink,
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$figure,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$embed,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src('/graphs/recent/'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$type_('image/svg+xml'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};

var _monty5811$apostello$Pages_InboundTable$reprocessCell = F2(
	function (props, sms) {
		return A2(
			_elm_lang$html$Html$td,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('button button-info'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('reingestButton'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									props.reprocessSms(sms.pk)),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Reprocess'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_InboundTable$keywordCell = F2(
	function (props, sms) {
		var _p0 = sms.matched_keyword;
		switch (_p0) {
			case '#':
				return A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$b,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(sms.matched_keyword),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
			case 'No Match':
				return A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$b,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(sms.matched_keyword),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
			default:
				return A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$b,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: props.keywordFormLink(sms),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
		}
	});
var _monty5811$apostello$Pages_InboundTable$recipientCell = F2(
	function (props, sms) {
		return A2(
			_elm_lang$html$Html$td,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: props.replyPageLink(sms),
				_1: {
					ctor: '::',
					_0: props.contactPageLink(sms),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_InboundTable$smsRow = F2(
	function (props, sms) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toString(sms.pk),
			_1: A2(
				_elm_lang$html$Html$tr,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'backgroundColor', _1: sms.matched_colour},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(_monty5811$apostello$Pages_InboundTable$recipientCell, props, sms),
					_1: {
						ctor: '::',
						_0: A2(_monty5811$apostello$Pages_InboundTable$keywordCell, props, sms),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(sms.content),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_monty5811$apostello$Helpers$formatDate(sms.time_received)),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(_monty5811$apostello$Pages_InboundTable$reprocessCell, props, sms),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				})
		};
	});
var _monty5811$apostello$Pages_InboundTable$view = function (props) {
	var head = A2(
		_elm_lang$html$Html$thead,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$th,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('From'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$th,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Keyword'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$th,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Message'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$th,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Time'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$th,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
	return A5(
		_monty5811$apostello$FilteringTable$defaultTable,
		{top: props.tableMsg},
		head,
		props.tableModel,
		_monty5811$apostello$Pages_InboundTable$smsRow(props),
		props.sms);
};
var _monty5811$apostello$Pages_InboundTable$Props = F7(
	function (a, b, c, d, e, f, g) {
		return {tableModel: a, tableMsg: b, sms: c, reprocessSms: d, keywordFormLink: e, contactPageLink: f, replyPageLink: g};
	});

var _monty5811$apostello$Pages_KeywordTable$keywordStatusCell = function (isLive) {
	var _p0 = isLive;
	if (_p0 === true) {
		return A2(
			_elm_lang$html$Html$td,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('badge badge-success'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Active'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	} else {
		return A2(
			_elm_lang$html$Html$td,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('badge badge-warning'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Inactive'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	}
};
var _monty5811$apostello$Pages_KeywordTable$keywordRow = F2(
	function (props, keyword) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toString(keyword.pk),
			_1: A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								props.keywordRespLink,
								function (_) {
									return _.keyword;
								},
								keyword),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('text-center'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									props.keywordRespLink,
									function (_) {
										return _.num_replies;
									},
									keyword),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('hide-sm-down'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(keyword.description),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('hide-sm-down'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(keyword.current_response),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _monty5811$apostello$Pages_KeywordTable$keywordStatusCell(keyword.is_live),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$td,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: props.keywordLink(keyword),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_monty5811$apostello$Helpers$archiveCell,
												keyword.is_archived,
												A2(props.toggleKeywordArchive, keyword.is_archived, keyword.keyword)),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				})
		};
	});
var _monty5811$apostello$Pages_KeywordTable$tableHead = A2(
	_elm_lang$html$Html$thead,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$th,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$th,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Matches'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$th,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('hide-sm-down'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Description'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$th,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('hide-sm-down'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Auto Reply'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$th,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Status'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$th,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('hide-sm-down'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _monty5811$apostello$Pages_KeywordTable$view = function (props) {
	return A6(
		_monty5811$apostello$FilteringTable$table,
		{top: props.tableMsg},
		'table-striped',
		_monty5811$apostello$Pages_KeywordTable$tableHead,
		props.tableModel,
		_monty5811$apostello$Pages_KeywordTable$keywordRow(props),
		props.keywords);
};
var _monty5811$apostello$Pages_KeywordTable$Props = F6(
	function (a, b, c, d, e, f) {
		return {tableMsg: a, tableModel: b, keywords: c, keywordLink: d, keywordRespLink: e, toggleKeywordArchive: f};
	});

var _monty5811$apostello$Pages_OutboundTable$smsRow = F2(
	function (props, sms) {
		var recipient = function () {
			var _p0 = sms.recipient;
			if (_p0.ctor === 'Just') {
				return _p0._0;
			} else {
				return {full_name: '', pk: 0};
			}
		}();
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toString(sms.pk),
			_1: A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: props.contactLink(recipient),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(sms.content),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_monty5811$apostello$Helpers$formatDate(sms.time_sent)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_monty5811$apostello$Data$stringFromMDStatus(sms.status)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				})
		};
	});
var _monty5811$apostello$Pages_OutboundTable$tableHead = A2(
	_elm_lang$html$Html$thead,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$th,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('To'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$th,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Message'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$th,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Sent'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$th,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Status from Twilio'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _monty5811$apostello$Pages_OutboundTable$view = function (props) {
	return A5(
		_monty5811$apostello$FilteringTable$defaultTable,
		{top: props.tableMsg},
		_monty5811$apostello$Pages_OutboundTable$tableHead,
		props.tableModel,
		_monty5811$apostello$Pages_OutboundTable$smsRow(props),
		props.sms);
};
var _monty5811$apostello$Pages_OutboundTable$Props = F4(
	function (a, b, c, d) {
		return {tableMsg: a, tableModel: b, sms: c, contactLink: d};
	});

var _monty5811$apostello$Pages_RecipientTable$doNotReplyIndicator = function (reply) {
	var _p0 = reply;
	if (_p0 === true) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('badge badge-danger'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('No Reply'),
				_1: {ctor: '[]'}
			});
	} else {
		return _elm_lang$html$Html$text('');
	}
};
var _monty5811$apostello$Pages_RecipientTable$recipientRow = F2(
	function (props, recipient) {
		var content = function () {
			var _p1 = recipient.last_sms;
			if (_p1.ctor === 'Just') {
				return _p1._0.content;
			} else {
				return '';
			}
		}();
		var timeReceived = A2(
			_elm_lang$core$Maybe$andThen,
			function (_) {
				return _.time_received;
			},
			recipient.last_sms);
		var style = function () {
			var _p2 = recipient.is_blocking;
			if (_p2 === true) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'background', _1: 'var(--color-red)'},
					_1: {ctor: '[]'}
				};
			} else {
				return {ctor: '[]'};
			}
		}();
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toString(recipient.pk),
			_1: A2(
				_elm_lang$html$Html$tr,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(style),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: props.contactLink(recipient),
							_1: {
								ctor: '::',
								_0: _monty5811$apostello$Pages_RecipientTable$doNotReplyIndicator(recipient.do_not_reply),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(content),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_monty5811$apostello$Helpers$formatDate(timeReceived)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_monty5811$apostello$Helpers$archiveCell,
									recipient.is_archived,
									A2(props.toggleRecipientArchive, recipient.is_archived, recipient.pk)),
								_1: {ctor: '[]'}
							}
						}
					}
				})
		};
	});
var _monty5811$apostello$Pages_RecipientTable$view = function (props) {
	var head = A2(
		_elm_lang$html$Html$thead,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$th,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Name'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$th,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Last Message'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$th,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Received'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$th,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('hide-sm-down'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
	return A5(
		_monty5811$apostello$FilteringTable$defaultTable,
		{top: props.tableMsg},
		head,
		props.tableModel,
		_monty5811$apostello$Pages_RecipientTable$recipientRow(props),
		props.recipients);
};
var _monty5811$apostello$Pages_RecipientTable$Props = F5(
	function (a, b, c, d, e) {
		return {tableMsg: a, tableModel: b, recipients: c, toggleRecipientArchive: d, contactLink: e};
	});

var _monty5811$apostello$Pages_ScheduledSmsTable$cancelButton = F2(
	function (props, sms) {
		return A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('button button-danger'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						props.cancelSms(sms.pk)),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('cancelSmsButton'),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Cancel'),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_ScheduledSmsTable$groupLink = F2(
	function (props, group) {
		var _p0 = group;
		if (_p0.ctor === 'Nothing') {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'});
		} else {
			return props.groupLink(_p0._0);
		}
	});
var _monty5811$apostello$Pages_ScheduledSmsTable$smsRow = F2(
	function (props, sms) {
		var style = function () {
			var _p1 = sms.failed;
			if (_p1 === true) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'background', _1: 'var(--color-red)'},
					_1: {ctor: '[]'}
				};
			} else {
				return {ctor: '[]'};
			}
		}();
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toString(sms.pk),
			_1: A2(
				_elm_lang$html$Html$tr,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(style),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(sms.sent_by),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: props.contactLink(sms.recipient),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(_monty5811$apostello$Pages_ScheduledSmsTable$groupLink, props, sms.recipient_group),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(sms.content),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$td,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(sms.time_to_send_formatted),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$td,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(_monty5811$apostello$Pages_ScheduledSmsTable$cancelButton, props, sms),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				})
		};
	});
var _monty5811$apostello$Pages_ScheduledSmsTable$onlyFuture = F2(
	function (t, sms) {
		var _p2 = sms.time_to_send;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Native_Utils.cmp(
				t,
				_elm_lang$core$Date$toTime(_p2._0)) < 0;
		} else {
			return false;
		}
	});
var _monty5811$apostello$Pages_ScheduledSmsTable$tableHead = A2(
	_elm_lang$html$Html$thead,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$th,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Queued By'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$th,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Recipient'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$th,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Group'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$th,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Message'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$th,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Scheduled Time'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$th,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _monty5811$apostello$Pages_ScheduledSmsTable$view = function (props) {
	return A5(
		_monty5811$apostello$FilteringTable$defaultTable,
		{top: props.tableMsg},
		_monty5811$apostello$Pages_ScheduledSmsTable$tableHead,
		props.tableModel,
		_monty5811$apostello$Pages_ScheduledSmsTable$smsRow(props),
		A2(
			_monty5811$remote_list$RemoteList$filter,
			_monty5811$apostello$Pages_ScheduledSmsTable$onlyFuture(props.currentTime),
			props.sms));
};
var _monty5811$apostello$Pages_ScheduledSmsTable$Props = F7(
	function (a, b, c, d, e, f, g) {
		return {currentTime: a, tableModel: b, tableMsg: c, sms: d, cancelSms: e, groupLink: f, contactLink: g};
	});

var _monty5811$apostello$Pages_Usage$fig = F3(
	function (header, src, col) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'grid-column', _1: col},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h3,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(header),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$figure,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$embed,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$type_('image/svg+xml'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src(src),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _monty5811$apostello$Pages_Usage$row = function (l) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'display', _1: 'grid'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'min-height', _1: '40vh'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'grid-template-columns', _1: 'repeat(16, auto)'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		l);
};
var _monty5811$apostello$Pages_Usage$view = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'margin', _1: '2rem'},
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: _monty5811$apostello$Pages_Usage$row(
			{
				ctor: '::',
				_0: A3(_monty5811$apostello$Pages_Usage$fig, 'Contacts', '/graphs/contacts/', '3 / 6'),
				_1: {
					ctor: '::',
					_0: A3(_monty5811$apostello$Pages_Usage$fig, 'Groups', '/graphs/groups/', '7 / 10'),
					_1: {
						ctor: '::',
						_0: A3(_monty5811$apostello$Pages_Usage$fig, 'Keywords', '/graphs/keywords/', '11 / 14'),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {
			ctor: '::',
			_0: _monty5811$apostello$Pages_Usage$row(
				{
					ctor: '::',
					_0: A3(_monty5811$apostello$Pages_Usage$fig, 'Recent Message History', '/graphs/recent/', '1 / 12'),
					_1: {
						ctor: '::',
						_0: A3(_monty5811$apostello$Pages_Usage$fig, 'Messages', '/graphs/sms/totals/', '13 / 16'),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: _monty5811$apostello$Pages_Usage$row(
					{
						ctor: '::',
						_0: A3(_monty5811$apostello$Pages_Usage$fig, 'Inbound', '/graphs/sms/in/bycontact/', '1 / 8'),
						_1: {
							ctor: '::',
							_0: A3(_monty5811$apostello$Pages_Usage$fig, 'Outbound', '/graphs/sms/out/bycontact/', '9 / 16'),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		}
	});

var _monty5811$apostello$Pages_UserProfileTable$toggleField = F2(
	function (field, profile) {
		var _p0 = field;
		switch (_p0.ctor) {
			case 'Approved':
				return _elm_lang$core$Native_Utils.update(
					profile,
					{approved: !profile.approved});
			case 'Keywords':
				return _elm_lang$core$Native_Utils.update(
					profile,
					{can_see_keywords: !profile.can_see_keywords});
			case 'SendSMS':
				return _elm_lang$core$Native_Utils.update(
					profile,
					{can_send_sms: !profile.can_send_sms});
			case 'Contacts':
				return _elm_lang$core$Native_Utils.update(
					profile,
					{can_see_contact_names: !profile.can_see_contact_names});
			case 'Groups':
				return _elm_lang$core$Native_Utils.update(
					profile,
					{can_see_groups: !profile.can_see_groups});
			case 'Incoming':
				return _elm_lang$core$Native_Utils.update(
					profile,
					{can_see_incoming: !profile.can_see_incoming});
			case 'Outgoing':
				return _elm_lang$core$Native_Utils.update(
					profile,
					{can_see_outgoing: !profile.can_see_outgoing});
			default:
				return _elm_lang$core$Native_Utils.update(
					profile,
					{can_archive: !profile.can_archive});
		}
	});
var _monty5811$apostello$Pages_UserProfileTable$lookupField = F2(
	function (fieldName, profile) {
		var _p1 = fieldName;
		switch (_p1.ctor) {
			case 'Approved':
				return profile.approved;
			case 'Keywords':
				return profile.can_see_keywords;
			case 'SendSMS':
				return profile.can_send_sms;
			case 'Contacts':
				return profile.can_see_contact_names;
			case 'Groups':
				return profile.can_see_groups;
			case 'Incoming':
				return profile.can_see_incoming;
			case 'Outgoing':
				return profile.can_see_outgoing;
			default:
				return profile.can_archive;
		}
	});
var _monty5811$apostello$Pages_UserProfileTable$toggleDataAttr = F2(
	function (fieldName, profile) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$String$toLower(
				_elm_lang$core$Basics$toString(fieldName)),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'-',
				_elm_lang$core$Basics$toString(profile.pk)));
	});
var _monty5811$apostello$Pages_UserProfileTable$toggleCell = F3(
	function (props, userprofile, field) {
		var fieldVal = A2(_monty5811$apostello$Pages_UserProfileTable$lookupField, field, userprofile);
		var buttonType = function () {
			var _p2 = fieldVal;
			if (_p2 === true) {
				return 'button-success';
			} else {
				return 'button-danger';
			}
		}();
		var className = A2(_elm_lang$core$Basics_ops['++'], 'button button-sm ', buttonType);
		var iconType = function () {
			var _p3 = fieldVal;
			if (_p3 === true) {
				return ' ✔ ';
			} else {
				return ' ✖ ';
			}
		}();
		return A2(
			_elm_lang$html$Html$td,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(className),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								props.toggleField(
									A2(_monty5811$apostello$Pages_UserProfileTable$toggleField, field, userprofile))),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html_Attributes$attribute,
									'data-test-id',
									A2(_monty5811$apostello$Pages_UserProfileTable$toggleDataAttr, field, userprofile)),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(iconType),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _monty5811$apostello$Pages_UserProfileTable$tableHead = A2(
	_elm_lang$html$Html$thead,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('text-left'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$th,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('User'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$th,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Approved'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$th,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Keywords'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$th,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Send SMS'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$th,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Contacts'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$th,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Groups'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Incoming'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Outgoing'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Archiving'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _monty5811$apostello$Pages_UserProfileTable$Props = F5(
	function (a, b, c, d, e) {
		return {tableMsg: a, tableModel: b, profiles: c, userProfileLink: d, toggleField: e};
	});
var _monty5811$apostello$Pages_UserProfileTable$Archiving = {ctor: 'Archiving'};
var _monty5811$apostello$Pages_UserProfileTable$Outgoing = {ctor: 'Outgoing'};
var _monty5811$apostello$Pages_UserProfileTable$Incoming = {ctor: 'Incoming'};
var _monty5811$apostello$Pages_UserProfileTable$Groups = {ctor: 'Groups'};
var _monty5811$apostello$Pages_UserProfileTable$Contacts = {ctor: 'Contacts'};
var _monty5811$apostello$Pages_UserProfileTable$SendSMS = {ctor: 'SendSMS'};
var _monty5811$apostello$Pages_UserProfileTable$Keywords = {ctor: 'Keywords'};
var _monty5811$apostello$Pages_UserProfileTable$Approved = {ctor: 'Approved'};
var _monty5811$apostello$Pages_UserProfileTable$userprofileRow = F2(
	function (props, userprofile) {
		var toggleCell_ = _monty5811$apostello$Pages_UserProfileTable$toggleCell(props);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toString(userprofile.pk),
			_1: A2(
				_elm_lang$html$Html$tr,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('text-center'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: props.userProfileLink(userprofile),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(toggleCell_, userprofile, _monty5811$apostello$Pages_UserProfileTable$Approved),
						_1: {
							ctor: '::',
							_0: A2(toggleCell_, userprofile, _monty5811$apostello$Pages_UserProfileTable$Keywords),
							_1: {
								ctor: '::',
								_0: A2(toggleCell_, userprofile, _monty5811$apostello$Pages_UserProfileTable$SendSMS),
								_1: {
									ctor: '::',
									_0: A2(toggleCell_, userprofile, _monty5811$apostello$Pages_UserProfileTable$Contacts),
									_1: {
										ctor: '::',
										_0: A2(toggleCell_, userprofile, _monty5811$apostello$Pages_UserProfileTable$Groups),
										_1: {
											ctor: '::',
											_0: A2(toggleCell_, userprofile, _monty5811$apostello$Pages_UserProfileTable$Incoming),
											_1: {
												ctor: '::',
												_0: A2(toggleCell_, userprofile, _monty5811$apostello$Pages_UserProfileTable$Outgoing),
												_1: {
													ctor: '::',
													_0: A2(toggleCell_, userprofile, _monty5811$apostello$Pages_UserProfileTable$Archiving),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				})
		};
	});
var _monty5811$apostello$Pages_UserProfileTable$view = function (props) {
	return A6(
		_monty5811$apostello$FilteringTable$table,
		{top: props.tableMsg},
		'table-bordered',
		_monty5811$apostello$Pages_UserProfileTable$tableHead,
		props.tableModel,
		_monty5811$apostello$Pages_UserProfileTable$userprofileRow(props),
		props.profiles);
};

var _monty5811$apostello$Pages_Wall$restOfMessage = function (sms) {
	return A2(
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		' ',
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				_elm_lang$core$List$tail(
					A2(_elm_lang$core$String$split, ' ', sms.content)))));
};
var _monty5811$apostello$Pages_Wall$firstWord = function (sms) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(
			A2(_elm_lang$core$String$split, ' ', sms.content)));
};
var _monty5811$apostello$Pages_Wall$smsCard = function (sms) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'backgroundColor', _1: '#ffffff'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'fontSize', _1: '200%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '.5rem'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin', _1: '.5rem'},
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: '#d3d3d3'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_monty5811$apostello$Pages_Wall$firstWord(sms)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_monty5811$apostello$Pages_Wall$restOfMessage(sms)),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _monty5811$apostello$Pages_Wall$view = function (sms) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('text-center'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'background-color', _1: '#5c569c'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '100vh'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '2rem'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$List$map,
					_monty5811$apostello$Pages_Wall$smsCard,
					A2(
						_elm_lang$core$List$filter,
						function (s) {
							return s.display_on_wall;
						},
						_monty5811$remote_list$RemoteList$toList(sms)))),
			_1: {ctor: '[]'}
		});
};

var _monty5811$apostello$View$keywordToKeywordLink = function (keyword) {
	return A4(
		_monty5811$apostello$Route$spaLink,
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('button'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Edit'),
			_1: {ctor: '[]'}
		},
		A2(
			_monty5811$apostello$Pages$KeywordForm,
			_monty5811$apostello$Pages_Forms_Keyword$initialModel,
			_elm_lang$core$Maybe$Just(keyword.keyword)));
};
var _monty5811$apostello$View$keywordToKeywordRespLink = F2(
	function (fn, keyword) {
		return A4(
			_monty5811$apostello$Route$spaLink,
			_elm_lang$html$Html$a,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					fn(keyword)),
				_1: {ctor: '[]'}
			},
			A3(_monty5811$apostello$Pages$KeyRespTable, false, keyword.is_archived, keyword.keyword));
	});
var _monty5811$apostello$View$groupToGroupLink = function (group) {
	return A4(
		_monty5811$apostello$Route$spaLink,
		_elm_lang$html$Html$a,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(group.name),
			_1: {ctor: '[]'}
		},
		A2(
			_monty5811$apostello$Pages$GroupForm,
			_monty5811$apostello$Pages_Forms_Group$initialModel,
			_elm_lang$core$Maybe$Just(group.pk)));
};
var _monty5811$apostello$View$contactToContactLink = function (contact) {
	return A4(
		_monty5811$apostello$Route$spaLink,
		_elm_lang$html$Html$a,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(contact.full_name),
			_1: {ctor: '[]'}
		},
		A2(
			_monty5811$apostello$Pages$ContactForm,
			_monty5811$apostello$Pages_Forms_Contact$initialModel,
			_elm_lang$core$Maybe$Just(contact.pk)));
};
var _monty5811$apostello$View$smsToKeywordLink = function (sms) {
	return A4(
		_monty5811$apostello$Route$spaLink,
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: '#212121'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(sms.matched_keyword),
			_1: {ctor: '[]'}
		},
		A2(
			_monty5811$apostello$Pages$KeywordForm,
			_monty5811$apostello$Pages_Forms_Keyword$initialModel,
			_elm_lang$core$Maybe$Just(sms.matched_keyword)));
};
var _monty5811$apostello$View$smsToContactLink = function (sms) {
	return A4(
		_monty5811$apostello$Route$spaLink,
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'var(--color-black)'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(sms.sender_name),
			_1: {ctor: '[]'}
		},
		A2(_monty5811$apostello$Pages$ContactForm, _monty5811$apostello$Pages_Forms_Contact$initialModel, sms.sender_pk));
};
var _monty5811$apostello$View$smsToReplyLink = function (sms) {
	return A4(
		_monty5811$apostello$Route$spaLink,
		_elm_lang$html$Html$a,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$i,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('fa fa-reply'),
					_1: {ctor: '[]'}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		},
		A2(
			_monty5811$apostello$Pages$initSendAdhoc,
			_elm_lang$core$Maybe$Nothing,
			A2(_elm_lang$core$Maybe$map, _elm_lang$core$List$singleton, sms.sender_pk)));
};
var _monty5811$apostello$View$filterBySenderPk = F2(
	function (pk, recip) {
		return _elm_lang$core$Native_Utils.eq(
			pk,
			A2(_elm_lang$core$Maybe$withDefault, 0, recip.sender_pk));
	});
var _monty5811$apostello$View$filterByMatchedKeyword = F2(
	function (currentKeyword, k) {
		return _elm_lang$core$Native_Utils.eq(k.matched_keyword, currentKeyword);
	});
var _monty5811$apostello$View$content = function (model) {
	var _p0 = model.page;
	switch (_p0.ctor) {
		case 'OutboundTable':
			return _monty5811$apostello$Pages_OutboundTable$view(
				{tableMsg: _monty5811$apostello$Messages$TableMsg, tableModel: model.table, sms: model.dataStore.outboundSms, contactLink: _monty5811$apostello$View$contactToContactLink});
		case 'InboundTable':
			return _monty5811$apostello$Pages_InboundTable$view(
				{
					sms: model.dataStore.inboundSms,
					reprocessSms: function (pk) {
						return _monty5811$apostello$Messages$StoreMsg(
							_monty5811$apostello$Store_Messages$ReprocessSms(pk));
					},
					tableModel: model.table,
					tableMsg: _monty5811$apostello$Messages$TableMsg,
					contactPageLink: _monty5811$apostello$View$smsToContactLink,
					replyPageLink: _monty5811$apostello$View$smsToReplyLink,
					keywordFormLink: _monty5811$apostello$View$smsToKeywordLink
				});
		case 'GroupTable':
			return _monty5811$apostello$Pages_GroupTable$view(
				{
					tableModel: model.table,
					tableMsg: _monty5811$apostello$Messages$TableMsg,
					groups: A2(_monty5811$apostello$Store_Model$filterArchived, _p0._0, model.dataStore.groups),
					toggleArchiveGroup: F2(
						function (b, pk) {
							return _monty5811$apostello$Messages$StoreMsg(
								A2(_monty5811$apostello$Store_Messages$ToggleGroupArchive, b, pk));
						}),
					groupFormLink: function (grp) {
						return A4(
							_monty5811$apostello$Route$spaLink,
							_elm_lang$html$Html$a,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(grp.name),
								_1: {ctor: '[]'}
							},
							A2(
								_monty5811$apostello$Pages$GroupForm,
								_monty5811$apostello$Pages_Forms_Group$initialModel,
								_elm_lang$core$Maybe$Just(grp.pk)));
					}
				});
		case 'GroupComposer':
			return A3(
				_monty5811$apostello$Pages_GroupComposer$view,
				{
					form: _monty5811$apostello$Messages$GroupComposerMsg,
					loadData: _monty5811$apostello$Messages$StoreMsg(_monty5811$apostello$Store_Messages$LoadData),
					groupLink: function (x) {
						return A4(
							_monty5811$apostello$Route$spaLink,
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('float-right button'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Send a Message'),
								_1: {ctor: '[]'}
							},
							A2(_monty5811$apostello$Pages$initSendAdhoc, _elm_lang$core$Maybe$Nothing, x));
					}
				},
				_p0._0,
				A2(_monty5811$apostello$Store_Model$filterArchived, false, model.dataStore.groups));
		case 'RecipientTable':
			return _monty5811$apostello$Pages_RecipientTable$view(
				{
					tableMsg: _monty5811$apostello$Messages$TableMsg,
					tableModel: model.table,
					recipients: A2(_monty5811$apostello$Store_Model$filterArchived, _p0._0, model.dataStore.recipients),
					toggleRecipientArchive: F2(
						function (b, pk) {
							return _monty5811$apostello$Messages$StoreMsg(
								A2(_monty5811$apostello$Store_Messages$ToggleRecipientArchive, b, pk));
						}),
					contactLink: _monty5811$apostello$View$contactToContactLink
				});
		case 'KeywordTable':
			return _monty5811$apostello$Pages_KeywordTable$view(
				{
					tableMsg: _monty5811$apostello$Messages$TableMsg,
					tableModel: model.table,
					keywords: A2(_monty5811$apostello$Store_Model$filterArchived, _p0._0, model.dataStore.keywords),
					toggleKeywordArchive: F2(
						function (b, pk) {
							return _monty5811$apostello$Messages$StoreMsg(
								A2(_monty5811$apostello$Store_Messages$ToggleKeywordArchive, b, pk));
						}),
					keywordLink: _monty5811$apostello$View$keywordToKeywordLink,
					keywordRespLink: _monty5811$apostello$View$keywordToKeywordRespLink
				});
		case 'ElvantoImport':
			return A3(
				_monty5811$apostello$Pages_ElvantoImport$view,
				{
					tableMsg: _monty5811$apostello$Messages$TableMsg,
					topMsg: _monty5811$apostello$Messages$ElvantoMsg,
					toggleElvantoGroupSync: function (_p1) {
						return _monty5811$apostello$Messages$StoreMsg(
							_monty5811$apostello$Store_Messages$ToggleElvantoGroupSync(_p1));
					}
				},
				model.table,
				model.dataStore.elvantoGroups);
		case 'Wall':
			return _monty5811$apostello$Pages_Wall$view(
				A2(
					_monty5811$remote_list$RemoteList$filter,
					function (s) {
						return s.display_on_wall;
					},
					A2(_monty5811$apostello$Store_Model$filterArchived, false, model.dataStore.inboundSms)));
		case 'Curator':
			return _monty5811$apostello$Pages_Curator$view(
				{
					tableMsg: _monty5811$apostello$Messages$TableMsg,
					sms: A2(_monty5811$apostello$Store_Model$filterArchived, false, model.dataStore.inboundSms),
					tableModel: model.table,
					toggleWallDisplay: F2(
						function (b, p) {
							return _monty5811$apostello$Messages$StoreMsg(
								A2(_monty5811$apostello$Store_Messages$ToggleWallDisplay, b, p));
						})
				});
		case 'UserProfileTable':
			return _monty5811$apostello$Pages_UserProfileTable$view(
				{
					tableMsg: _monty5811$apostello$Messages$TableMsg,
					tableModel: model.table,
					profiles: model.dataStore.userprofiles,
					userProfileLink: function (up) {
						return A4(
							_monty5811$apostello$Route$spaLink,
							_elm_lang$html$Html$a,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(up.user.email),
								_1: {ctor: '[]'}
							},
							A2(_monty5811$apostello$Pages$UserProfileForm, _monty5811$apostello$Pages_Forms_UserProfile$initialModel, up.user.pk));
					},
					toggleField: function (_p2) {
						return _monty5811$apostello$Messages$StoreMsg(
							_monty5811$apostello$Store_Messages$ToggleProfileField(_p2));
					}
				});
		case 'ScheduledSmsTable':
			return _monty5811$apostello$Pages_ScheduledSmsTable$view(
				{
					tableMsg: _monty5811$apostello$Messages$TableMsg,
					tableModel: model.table,
					currentTime: model.currentTime,
					sms: model.dataStore.queuedSms,
					contactLink: _monty5811$apostello$View$contactToContactLink,
					groupLink: _monty5811$apostello$View$groupToGroupLink,
					cancelSms: function (_p3) {
						return _monty5811$apostello$Messages$StoreMsg(
							_monty5811$apostello$Store_Messages$CancelSms(_p3));
					}
				});
		case 'KeyRespTable':
			var _p5 = _p0._1;
			var _p4 = _p0._2;
			return A6(
				_monty5811$apostello$Pages_KeyRespTable$view,
				{
					form: _monty5811$apostello$Messages$KeyRespTableMsg,
					tableMsg: _monty5811$apostello$Messages$TableMsg,
					toggleDealtWith: F2(
						function (x, y) {
							return _monty5811$apostello$Messages$StoreMsg(
								A2(_monty5811$apostello$Store_Messages$ToggleInboundSmsDealtWith, x, y));
						}),
					toggleInboundSmsArchive: F2(
						function (x, y) {
							return _monty5811$apostello$Messages$StoreMsg(
								A2(_monty5811$apostello$Store_Messages$ToggleInboundSmsArchive, x, y));
						}),
					pkToReplyLink: _monty5811$apostello$View$smsToReplyLink,
					pkToContactLink: _monty5811$apostello$View$smsToContactLink
				},
				_p5,
				model.table,
				A2(
					_monty5811$remote_list$RemoteList$filter,
					_monty5811$apostello$View$filterByMatchedKeyword(_p4),
					A2(_monty5811$apostello$Store_Model$filterArchived, _p5, model.dataStore.inboundSms)),
				_p0._0,
				_p4);
		case 'FirstRun':
			return A2(
				_elm_lang$html$Html$map,
				_monty5811$apostello$Messages$FirstRunMsg,
				_monty5811$apostello$Pages_FirstRun$view(_p0._0));
		case 'Debug':
			return A2(
				_elm_lang$html$Html$map,
				_monty5811$apostello$Messages$DebugMsg,
				_monty5811$apostello$Pages_Debug$view(_p0._0));
		case 'AccessDenied':
			return _monty5811$apostello$Pages_AccessDenied$view;
		case 'SendAdhoc':
			return A4(
				_monty5811$apostello$Pages_Forms_SendAdhoc$view,
				{
					form: function (_p6) {
						return _monty5811$apostello$Messages$FormMsg(
							_monty5811$apostello$Messages$SendAdhocMsg(_p6));
					},
					postForm: _monty5811$apostello$Messages$FormMsg(_monty5811$apostello$Messages$PostSendAdhocForm),
					smsCharLimit: model.settings.smsCharLimit,
					newContactButton: A4(
						_monty5811$apostello$Route$spaLink,
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('button'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Add a New Contact'),
							_1: {ctor: '[]'}
						},
						A2(_monty5811$apostello$Pages$ContactForm, _monty5811$apostello$Pages_Forms_Contact$initialModel, _elm_lang$core$Maybe$Nothing))
				},
				_p0._0,
				A2(_monty5811$apostello$Store_Model$filterArchived, false, model.dataStore.recipients),
				model.formStatus);
		case 'SendGroup':
			return A4(
				_monty5811$apostello$Pages_Forms_SendGroup$view,
				{
					form: function (_p7) {
						return _monty5811$apostello$Messages$FormMsg(
							_monty5811$apostello$Messages$SendGroupMsg(_p7));
					},
					postForm: _monty5811$apostello$Messages$FormMsg(_monty5811$apostello$Messages$PostSendGroupForm),
					smsCharLimit: model.settings.smsCharLimit,
					newGroupButton: A4(
						_monty5811$apostello$Route$spaLink,
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('button'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Create a New Group'),
							_1: {ctor: '[]'}
						},
						A2(_monty5811$apostello$Pages$GroupForm, _monty5811$apostello$Pages_Forms_Group$initialModel, _elm_lang$core$Maybe$Nothing))
				},
				_p0._0,
				A2(
					_monty5811$remote_list$RemoteList$filter,
					function (x) {
						return _elm_lang$core$Native_Utils.cmp(x.cost, 0) > 0;
					},
					A2(_monty5811$apostello$Store_Model$filterArchived, false, model.dataStore.groups)),
				model.formStatus);
		case 'Error404':
			return _monty5811$apostello$Pages_Error404$view;
		case 'Home':
			return _monty5811$apostello$Pages_Home$view(
				A4(
					_monty5811$apostello$Route$spaLink,
					_elm_lang$html$Html$a,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('FAQs/Help'),
						_1: {ctor: '[]'}
					},
					_monty5811$apostello$Pages$Help));
		case 'Help':
			return _monty5811$apostello$Pages_Help$view;
		case 'ContactImport':
			return A2(
				_monty5811$apostello$Pages_Forms_ContactImport$view,
				{
					post: _monty5811$apostello$Messages$FormMsg(_monty5811$apostello$Messages$PostContactImportForm),
					form: function (_p8) {
						return _monty5811$apostello$Messages$FormMsg(
							_monty5811$apostello$Messages$ContactImportMsg(_p8));
					}
				},
				model.formStatus);
		case 'GroupForm':
			return A5(
				_monty5811$apostello$Pages_Forms_Group$view,
				{
					form: function (_p9) {
						return _monty5811$apostello$Messages$FormMsg(
							_monty5811$apostello$Messages$GroupFormMsg(_p9));
					},
					postForm: _monty5811$apostello$Messages$FormMsg(_monty5811$apostello$Messages$PostGroupForm),
					noop: _monty5811$apostello$Messages$Nope,
					toggleGroupMembership: F2(
						function (x, y) {
							return _monty5811$apostello$Messages$StoreMsg(
								A2(_monty5811$apostello$Store_Messages$ToggleGroupMembership, x, y));
						}),
					restoreGroupLink: function (x) {
						return A4(
							_monty5811$apostello$Route$spaLink,
							_elm_lang$html$Html$a,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Archived Group'),
								_1: {ctor: '[]'}
							},
							A2(_monty5811$apostello$Pages$GroupForm, _monty5811$apostello$Pages_Forms_Group$initialModel, x));
					}
				},
				_p0._1,
				model.dataStore.groups,
				_p0._0,
				model.formStatus);
		case 'ContactForm':
			var _p12 = _p0._1;
			var incomingTable = function () {
				var _p10 = _p12;
				if (_p10.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Maybe$Just(
						_monty5811$apostello$Pages_InboundTable$view(
							{
								sms: A2(
									_monty5811$remote_list$RemoteList$filter,
									_monty5811$apostello$View$filterBySenderPk(_p10._0),
									model.dataStore.inboundSms),
								reprocessSms: function (pk) {
									return _monty5811$apostello$Messages$StoreMsg(
										_monty5811$apostello$Store_Messages$ReprocessSms(pk));
								},
								tableModel: model.table,
								tableMsg: _monty5811$apostello$Messages$TableMsg,
								contactPageLink: _monty5811$apostello$View$smsToContactLink,
								replyPageLink: _monty5811$apostello$View$smsToReplyLink,
								keywordFormLink: _monty5811$apostello$View$smsToKeywordLink
							}));
				}
			}();
			var canSeeContactNotes = model.settings.userPerms.can_see_contact_notes || model.settings.userPerms.user.is_staff;
			var canSeeContactNum = model.settings.userPerms.can_see_contact_nums || model.settings.userPerms.user.is_staff;
			return A6(
				_monty5811$apostello$Pages_Forms_Contact$view,
				{
					postForm: _monty5811$apostello$Messages$FormMsg(
						A2(_monty5811$apostello$Messages$PostContactForm, canSeeContactNum, canSeeContactNotes)),
					c: function (_p11) {
						return _monty5811$apostello$Messages$FormMsg(
							_monty5811$apostello$Messages$ContactFormMsg(_p11));
					},
					noop: _monty5811$apostello$Messages$Nope,
					spa: function (x) {
						return A4(
							_monty5811$apostello$Route$spaLink,
							_elm_lang$html$Html$a,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Archived Contact'),
								_1: {ctor: '[]'}
							},
							A2(_monty5811$apostello$Pages$ContactForm, _monty5811$apostello$Pages_Forms_Contact$initialModel, x));
					},
					defaultNumberPrefix: model.settings.defaultNumberPrefix,
					canSeeContactNum: canSeeContactNum,
					canSeeContactNotes: canSeeContactNotes
				},
				incomingTable,
				_p12,
				model.dataStore.recipients,
				_p0._0,
				model.formStatus);
		case 'KeywordForm':
			return A7(
				_monty5811$apostello$Pages_Forms_Keyword$view,
				{
					postForm: _monty5811$apostello$Messages$FormMsg(_monty5811$apostello$Messages$PostKeywordForm),
					k: function (_p13) {
						return _monty5811$apostello$Messages$FormMsg(
							_monty5811$apostello$Messages$KeywordFormMsg(_p13));
					},
					noop: _monty5811$apostello$Messages$Nope,
					spa: function (x) {
						return A4(
							_monty5811$apostello$Route$spaLink,
							_elm_lang$html$Html$a,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Archived Keyword'),
								_1: {ctor: '[]'}
							},
							A2(_monty5811$apostello$Pages$KeywordForm, _monty5811$apostello$Pages_Forms_Keyword$initialModel, x));
					}
				},
				model.dataStore.keywords,
				A2(_monty5811$apostello$Store_Model$filterArchived, false, model.dataStore.groups),
				model.dataStore.users,
				_p0._1,
				_p0._0,
				model.formStatus);
		case 'SiteConfigForm':
			return A4(
				_monty5811$apostello$Pages_Forms_SiteConfig$view,
				{
					postForm: _monty5811$apostello$Messages$FormMsg(_monty5811$apostello$Messages$PostSiteConfigForm),
					form: function (_p14) {
						return _monty5811$apostello$Messages$FormMsg(
							_monty5811$apostello$Messages$SiteConfigFormMsg(_p14));
					}
				},
				A2(_monty5811$apostello$Store_Model$filterArchived, false, model.dataStore.groups),
				_p0._0,
				model.formStatus);
		case 'DefaultResponsesForm':
			return A3(
				_monty5811$apostello$Pages_Forms_DefaultResponses$view,
				{
					postForm: _monty5811$apostello$Messages$FormMsg(_monty5811$apostello$Messages$PostDefaultRespForm),
					form: function (_p15) {
						return _monty5811$apostello$Messages$FormMsg(
							_monty5811$apostello$Messages$DefaultResponsesFormMsg(_p15));
					}
				},
				_p0._0,
				model.formStatus);
		case 'CreateAllGroup':
			return A3(
				_monty5811$apostello$Pages_Forms_CreateAllGroup$view,
				{
					postForm: _monty5811$apostello$Messages$FormMsg(_monty5811$apostello$Messages$PostCreateAllGroupForm),
					form: function (_p16) {
						return _monty5811$apostello$Messages$FormMsg(
							_monty5811$apostello$Messages$CreateAllGroupMsg(_p16));
					}
				},
				_p0._0,
				model.formStatus);
		case 'UserProfileForm':
			return A5(
				_monty5811$apostello$Pages_Forms_UserProfile$view,
				{
					postForm: _monty5811$apostello$Messages$FormMsg(_monty5811$apostello$Messages$PostUserProfileForm),
					form: function (_p17) {
						return _monty5811$apostello$Messages$FormMsg(
							_monty5811$apostello$Messages$UserProfileFormMsg(_p17));
					}
				},
				_p0._1,
				model.dataStore.userprofiles,
				_p0._0,
				model.formStatus);
		case 'ApiSetup':
			return A2(
				_elm_lang$html$Html$map,
				_monty5811$apostello$Messages$ApiSetupMsg,
				_monty5811$apostello$Pages_ApiSetup$view(_p0._0));
		default:
			return _monty5811$apostello$Pages_Usage$view;
	}
};
var _monty5811$apostello$View$view = function (model) {
	var mainContent = _monty5811$apostello$View$content(model);
	var shell = _monty5811$apostello$Pages_Fragments_Shell$view(model);
	var sidePanel = A3(_monty5811$apostello$Pages_Fragments_SidePanel$view, model.dataStore, model.page, model.settings.userPerms.can_archive || model.settings.userPerms.user.is_staff);
	return A2(shell, mainContent, sidePanel);
};

var _monty5811$apostello$Main$init = F2(
	function (flagsVal, location) {
		var flags = function () {
			var _p0 = A2(_elm_lang$core$Json_Decode$decodeValue, _monty5811$apostello$Models$decodeFlags, flagsVal);
			if (_p0.ctor === 'Ok') {
				return _p0._0;
			} else {
				return _elm_lang$core$Native_Utils.crashCase(
					'Main',
					{
						start: {line: 27, column: 13},
						end: {line: 32, column: 69}
					},
					_p0)(
					A2(_elm_lang$core$Basics_ops['++'], 'Try reloading the page\n', _p0._0));
			}
		}();
		var _p2 = A2(_monty5811$apostello$Route$loc2Page, location, flags.settings);
		var page = _p2._0;
		return A2(
			_monty5811$apostello$Update$update,
			_monty5811$apostello$Messages$UrlChange(location),
			A2(_monty5811$apostello$Models$initialModel, flags.settings, page));
	});
var _monty5811$apostello$Main$main = A2(
	_elm_lang$navigation$Navigation$programWithFlags,
	_monty5811$apostello$Messages$UrlChange,
	{init: _monty5811$apostello$Main$init, view: _monty5811$apostello$View$view, update: _monty5811$apostello$Update$update, subscriptions: _monty5811$apostello$Subscriptions$subscriptions})(_elm_lang$core$Json_Decode$value);

var Elm = {};
Elm['Main'] = Elm['Main'] || {};
if (typeof _monty5811$apostello$Main$main !== 'undefined') {
    _monty5811$apostello$Main$main(Elm['Main'], 'Main', {"types":{"unions":{"Pages.GroupComposer.Msg":{"args":[],"tags":{"UpdateQueryString":["String"]}},"DateTimePicker.Internal.TimeIndicator":{"args":[],"tags":{"HourIndicator":[],"MinuteIndicator":[],"AMPMIndicator":[]}},"Pages.KeyRespTable.Msg":{"args":[],"tags":{"ReceiveArchiveAllResp":["Result.Result Http.Error Bool"],"ArchiveAllButtonClick":["String"],"ArchiveAllCheckBoxClick":[]}},"Messages.Msg":{"args":[],"tags":{"CurrentTime":["Time.Time"],"TableMsg":["FilteringTable.Msg"],"FormMsg":["Messages.FormMsg"],"ElvantoMsg":["Pages.ElvantoImport.Msg"],"VisibilityChange":["PageVisibility.Visibility"],"ToggleMenu":[],"KeyPressed":["Int"],"GroupComposerMsg":["Pages.GroupComposer.Msg"],"SidePanelMsg":["Messages.SidePanelMsg"],"NotificationMsg":["Notification.Msg"],"Nope":[],"KeyRespTableMsg":["Pages.KeyRespTable.Msg"],"NewUrl":["String"],"WebPushMsg":["WebPush.Msg"],"FirstRunMsg":["Pages.FirstRun.Msg"],"UrlChange":["Navigation.Location"],"DebugMsg":["Pages.Debug.Msg"],"StoreMsg":["Store.Messages.StoreMsg"],"ApiSetupMsg":["Pages.ApiSetup.Msg"]}},"Dict.LeafColor":{"args":[],"tags":{"LBBlack":[],"LBlack":[]}},"Platform.Cmd.Cmd":{"args":["msg"],"tags":{"Cmd":[]}},"Pages.ElvantoImport.Msg":{"args":[],"tags":{"FetchGroups":[],"PullGroups":[],"ReceiveButtonResp":["Result.Result Http.Error Bool"]}},"Pages.Forms.SendAdhoc.Msg":{"args":[],"tags":{"UpdateDate":["DateTimePicker.State","Maybe.Maybe Date.Date"],"UpdateContent":["String"],"UpdateAdhocFilter":["String"],"ToggleSelectedContact":["Int"]}},"Pages.Forms.Contact.Msg":{"args":[],"tags":{"UpdateNumberField":["String"],"UpdateFirstNameField":["String"],"UpdateLastNameField":["String"],"UpdateDoNotReplyField":["Maybe.Maybe Data.Recipient"],"UpdateNotesField":["String"]}},"Pages.FirstRun.Msg":{"args":[],"tags":{"UpdateAdminPass1Field":["String"],"UpdateAdminPass2Field":["String"],"UpdateAdminEmailField":["String"],"ReceiveCreateAdminUser":["Result.Result Http.Error Pages.FirstRun.FirstRunResp"],"CreateAdminUser":[]}},"Json.Encode.Value":{"args":[],"tags":{"Value":[]}},"Pages.Forms.Group.Msg":{"args":[],"tags":{"UpdateGroupDescField":["String"],"UpdateGroupNameField":["String"],"UpdateNonMemberFilter":["String"],"UpdateMemberFilter":["String"]}},"PageVisibility.Visibility":{"args":[],"tags":{"Visible":[],"Hidden":[]}},"Store.DataTypes.RemoteDataType":{"args":[],"tags":{"ScheduledSms":[],"Groups":["Maybe.Maybe Int"],"Users":[],"IncomingSms":[],"UserProfiles":[],"ElvantoGroups":[],"Keywords":["Maybe.Maybe String"],"OutgoingSms":[],"Contacts":["Maybe.Maybe Int"]}},"Pages.Debug.Msg":{"args":[],"tags":{"ReceiveSendTestSms":["Result.Result Http.Error Pages.Debug.DebuggerResp"],"UpdateTestSmsBodyField":["String"],"UpdateTestEmailBodyField":["String"],"SendTestSms":[],"UpdateTestEmailToField":["String"],"ReceiveSendTestEmail":["Result.Result Http.Error Pages.Debug.DebuggerResp"],"UpdateTestSmsToField":["String"],"SendTestEmail":[]}},"Pages.Forms.SiteConfig.Msg":{"args":[],"tags":{"UpdateSiteNameField":["String"],"UpdateTwilioSid":["String"],"UpdateEmailHostField":["String"],"UpdateSmsExpiredDate":["DateTimePicker.State","Maybe.Maybe Date.Date"],"UpdateSyncElvantoField":[],"UpdateTwilioAuthToken":["String"],"UpdateNotApprovedField":["String"],"UpdateGroupsFilter":["String"],"UpdateDefaultPrefixField":["String"],"UpdateDisableRepliesField":[],"UpdateSmsCharLimitField":["String"],"UpdateEmailPortField":["String"],"UpdateEmailPassField":["String"],"UpdateAutoAddGroupsField":["Int"],"UpdateEmailFromField":["String"],"UpdateTwilioFromNum":["String"],"UpdateRollingExpiration":["String"],"UpdateOfficeEmailField":["String"],"ReceiveInitialData":["Result.Result Http.Error Pages.Forms.SiteConfig.Model"],"UpdateDisableLoginEmailField":[],"UpdateEmailUserField":["String"],"UpdateTwilioSendCost":["String"],"UpdateSlackUrlField":["String"]}},"Dict.Dict":{"args":["k","v"],"tags":{"RBNode_elm_builtin":["Dict.NColor","k","v","Dict.Dict k v","Dict.Dict k v"],"RBEmpty_elm_builtin":["Dict.LeafColor"]}},"Date.Date":{"args":[],"tags":{"Date":[]}},"Maybe.Maybe":{"args":["a"],"tags":{"Just":["a"],"Nothing":[]}},"Pages.ApiSetup.Msg":{"args":[],"tags":{"ReceiveApiKey":["Result.Result Http.Error String"],"Get":[],"Generate":[],"Delete":[]}},"Notification.NotificationType":{"args":[],"tags":{"ErrorNotification":[],"InfoNotification":[],"WarningNotification":[],"SuccessNotification":[]}},"Regex.Regex":{"args":[],"tags":{"Regex":[]}},"WebPush.Msg":{"args":[],"tags":{"UpdateRecieved":["Json.Encode.Value"],"Register":[],"Unregister":[],"CheckSubscribed":[],"NoOp":[]}},"FilteringTable.Msg":{"args":[],"tags":{"GoToPage":["Int"],"UpdateFilter":["String"]}},"Pages.Forms.DefaultResponses.Msg":{"args":[],"tags":{"UpdateNoKeywordAutoReply":["String"],"UpdateNameUpdateReply":["String"],"UpdateAutoName":["String"],"UpdateDefaultNoKeywordNotLive":["String"],"UpdateKeywordNoMatch":["String"],"ReceiveInitialData":["Result.Result Http.Error Pages.Forms.DefaultResponses.Model"],"UpdateStartReply":["String"],"UpdateNameFailReply":["String"]}},"Store.Messages.StoreMsg":{"args":[],"tags":{"ToggleGroupMembership":["Data.RecipientGroup","Data.RecipientSimple"],"ToggleGroupArchive":["Bool","Int"],"ReceiveReprocessSms":["Result.Result Http.Error Data.SmsInbound"],"ReceiveToggleWallDisplay":["Result.Result Http.Error Data.SmsInbound"],"ToggleInboundSmsDealtWith":["Bool","Int"],"ReceiveToggleInboundSmsArchive":["Result.Result Http.Error Data.SmsInbound"],"LoadData":[],"ToggleWallDisplay":["Bool","Int"],"ReprocessSms":["Int"],"LoadDataStore":["String"],"ReceiveToggleGroupMembership":["Result.Result Http.Error Data.RecipientGroup"],"ReceiveToggleElvantoGroupSync":["Result.Result Http.Error Data.ElvantoGroup"],"ReceiveLazy":["Result.Result Http.Error { body : String, code : Int }"],"ReceiveToggleProfileField":["Result.Result Http.Error Data.UserProfile"],"ToggleInboundSmsArchive":["Bool","Int"],"ReceiveToggleInboundSmsDealtWith":["Result.Result Http.Error Data.SmsInbound"],"ToggleProfileField":["Data.UserProfile"],"ReceiveRawResp":["Store.DataTypes.RemoteDataType","Bool","Result.Result Http.Error Store.Model.RawResponse"],"CancelSms":["Int"],"ToggleRecipientArchive":["Bool","Int"],"ToggleKeywordArchive":["Bool","String"],"ToggleElvantoGroupSync":["Data.ElvantoGroup"]}},"Messages.FormMsg":{"args":[],"tags":{"DefaultResponsesFormMsg":["Pages.Forms.DefaultResponses.Msg"],"PostCreateAllGroupForm":[],"ContactImportMsg":["Pages.Forms.ContactImport.Msg"],"ContactFormMsg":["Pages.Forms.Contact.Msg"],"SendGroupMsg":["Pages.Forms.SendGroup.Msg"],"CreateAllGroupMsg":["Pages.Forms.CreateAllGroup.Msg"],"PostSendAdhocForm":[],"PostDefaultRespForm":[],"ReceiveFormResp":["List (Platform.Cmd.Cmd Messages.Msg)","Result.Result Http.Error { body : String, code : Int }"],"PostGroupForm":[],"SendAdhocMsg":["Pages.Forms.SendAdhoc.Msg"],"PostUserProfileForm":[],"PostSiteConfigForm":[],"PostKeywordForm":[],"UserProfileFormMsg":["Pages.Forms.UserProfile.Msg"],"PostSendGroupForm":[],"GroupFormMsg":["Pages.Forms.Group.Msg"],"PostContactImportForm":[],"SiteConfigFormMsg":["Pages.Forms.SiteConfig.Msg"],"PostContactForm":["Bool","Bool"],"KeywordFormMsg":["Pages.Forms.Keyword.Msg"]}},"Dict.NColor":{"args":[],"tags":{"BBlack":[],"Red":[],"NBlack":[],"Black":[]}},"Pages.Forms.ContactImport.Msg":{"args":[],"tags":{"UpdateText":["String"]}},"Messages.SidePanelMsg":{"args":[],"tags":{"ArchiveItem":["String","String","Bool"],"ReceiveArchiveResp":["String","Result.Result Http.Error Bool"]}},"Notification.Msg":{"args":[],"tags":{"Remove":["Notification.Notification"]}},"Pages.Forms.UserProfile.Msg":{"args":[],"tags":{"UpdateCanSendSms":["Maybe.Maybe Data.UserProfile"],"UpdateCanSeeGroups":["Maybe.Maybe Data.UserProfile"],"UpdateApproved":["Maybe.Maybe Data.UserProfile"],"UpdateCanImport":["Maybe.Maybe Data.UserProfile"],"UpdateCanSeeOutgoing":["Maybe.Maybe Data.UserProfile"],"UpdateCanSeeContactNums":["Maybe.Maybe Data.UserProfile"],"UpdateCanSeeKeywords":["Maybe.Maybe Data.UserProfile"],"UpdateMessageCostLimit":["String"],"UpdateCanArchive":["Maybe.Maybe Data.UserProfile"],"UpdateCanSeeContactNames":["Maybe.Maybe Data.UserProfile"],"UpdateCanSeeContactNotes":["Maybe.Maybe Data.UserProfile"],"UpdateCanSeeIncoming":["Maybe.Maybe Data.UserProfile"]}},"DateTimePicker.Internal.InternalState":{"args":[],"tags":{"InternalState":["{ inputFocused : Bool , forceClose : Bool , event : String , today : Maybe.Maybe Date.Date , titleDate : Maybe.Maybe Date.Date , date : Maybe.Maybe Date.Date , time : DateTimePicker.Internal.Time , hourPickerStart : Int , minutePickerStart : Int , currentAngle : Maybe.Maybe Float , activeTimeIndicator : Maybe.Maybe DateTimePicker.Internal.TimeIndicator }"]}},"Pages.Forms.CreateAllGroup.Msg":{"args":[],"tags":{"UpdateGroupName":["String"]}},"Pages.Forms.Keyword.Msg":{"args":[],"tags":{"UpdateKeywordCustRespField":["String"],"UpdateKeywordOwnersFilter":["String"],"UpdateKeywordDeacRespField":["String"],"UpdateKeywordCustNewPersonRespField":["String"],"UpdateSelectedLinkedGroup":["List Int","Int"],"UpdateKeywordTooEarlyRespField":["String"],"UpdateDeactivateTime":["DateTimePicker.State","Maybe.Maybe Date.Date"],"UpdateSelectedSubscriber":["List Int","Int"],"UpdateKeywordDisableRepliesField":["Maybe.Maybe Data.Keyword"],"UpdateKeywordLinkedGroupsFilter":["String"],"UpdateActivateTime":["DateTimePicker.State","Maybe.Maybe Date.Date"],"UpdateKeywordKeywordField":["String"],"UpdateKeywordDescField":["String"],"UpdateSelectedOwner":["List Int","Int"],"UpdateKeywordSubscribersFilter":["String"]}},"Http.Error":{"args":[],"tags":{"BadUrl":["String"],"NetworkError":[],"Timeout":[],"BadStatus":["Http.Response String"],"BadPayload":["String","Http.Response String"]}},"Result.Result":{"args":["error","value"],"tags":{"Ok":["value"],"Err":["error"]}},"Pages.Forms.SendGroup.Msg":{"args":[],"tags":{"UpdateSGContent":["String"],"UpdateGroupFilter":["String"],"UpdateSGDate":["DateTimePicker.State","Maybe.Maybe Date.Date"],"SelectGroup":["Int"]}}},"aliases":{"Data.UserProfile":{"args":[],"type":"{ pk : Int , user : Data.User , approved : Bool , message_cost_limit : Float , can_see_groups : Bool , can_see_contact_names : Bool , can_see_keywords : Bool , can_see_outgoing : Bool , can_see_incoming : Bool , can_send_sms : Bool , can_see_contact_nums : Bool , can_see_contact_notes : Bool , can_import : Bool , can_archive : Bool }"},"Store.Model.RawResponse":{"args":[],"type":"{ body : String, next : Maybe.Maybe String }"},"Data.Keyword":{"args":[],"type":"{ keyword : String , pk : Int , description : String , current_response : String , is_live : Bool , num_replies : String , num_archived_replies : String , is_archived : Bool , disable_all_replies : Bool , custom_response : String , custom_response_new_person : String , deactivated_response : String , too_early_response : String , activate_time : Date.Date , deactivate_time : Maybe.Maybe Date.Date , linked_groups : List Int , owners : List Int , subscribed_to_digest : List Int }"},"Data.Recipient":{"args":[],"type":"{ first_name : String , last_name : String , number : Maybe.Maybe String , pk : Int , full_name : String , is_archived : Bool , is_blocking : Bool , do_not_reply : Bool , notes : String , last_sms : Maybe.Maybe Data.SmsInbound }"},"Http.Response":{"args":["body"],"type":"{ url : String , status : { code : Int, message : String } , headers : Dict.Dict String String , body : body }"},"DateTimePicker.Internal.Time":{"args":[],"type":"{ hour : Maybe.Maybe Int , minute : Maybe.Maybe Int , amPm : Maybe.Maybe String }"},"Data.SmsInbound":{"args":[],"type":"{ sid : String , pk : Int , sender_name : String , content : String , time_received : Maybe.Maybe Date.Date , dealt_with : Bool , is_archived : Bool , display_on_wall : Bool , matched_keyword : String , matched_colour : String , sender_pk : Maybe.Maybe Int }"},"Pages.Debug.DebuggerResp":{"args":[],"type":"{ status : String, error : String }"},"Pages.FirstRun.FirstRunResp":{"args":[],"type":"{ status : String, error : String }"},"Data.User":{"args":[],"type":"{ pk : Int , email : String , username : String , is_staff : Bool , is_social : Bool }"},"Pages.Forms.DefaultResponses.Model":{"args":[],"type":"{ keyword_no_match : String , default_no_keyword_auto_reply : String , default_no_keyword_not_live : String , start_reply : String , auto_name_request : String , name_update_reply : String , name_failure_reply : String }"},"Data.ElvantoGroup":{"args":[],"type":"{ name : String , pk : Int , sync : Bool , last_synced : Maybe.Maybe Date.Date }"},"Data.RecipientGroup":{"args":[],"type":"{ name : String , pk : Int , description : String , members : List Data.RecipientSimple , nonmembers : List Data.RecipientSimple , cost : Float , is_archived : Bool }"},"Pages.Forms.SiteConfig.Model":{"args":[],"type":"{ site_name : String , sms_char_limit : Int , default_number_prefix : String , disable_all_replies : Bool , disable_email_login_form : Bool , office_email : String , auto_add_new_groups : List Int , sms_expiration_date : Maybe.Maybe Date.Date , datePickerSmsExpiredState : DateTimePicker.State , sms_rolling_expiration_days : Maybe.Maybe Int , slack_url : String , sync_elvanto : Bool , not_approved_msg : String , email_host : Maybe.Maybe String , email_port : Maybe.Maybe Int , email_username : Maybe.Maybe String , email_password : Maybe.Maybe String , email_from : Maybe.Maybe String , twilio_account_sid : Maybe.Maybe String , twilio_auth_token : Maybe.Maybe String , twilio_from_num : Maybe.Maybe String , twilio_sending_cost : Maybe.Maybe Float , groupsFilter : Regex.Regex }"},"Data.RecipientSimple":{"args":[],"type":"{ full_name : String, pk : Int }"},"DateTimePicker.State":{"args":[],"type":"DateTimePicker.Internal.InternalState"},"Time.Time":{"args":[],"type":"Float"},"Notification.Notification":{"args":[],"type":"{ type_ : Notification.NotificationType , text : String , showClose : Bool }"},"Navigation.Location":{"args":[],"type":"{ href : String , host : String , hostname : String , protocol : String , origin : String , port_ : String , pathname : String , search : String , hash : String , username : String , password : String }"}},"message":"Messages.Msg"},"versions":{"elm":"0.18.0"}});
}

if (typeof define === "function" && define['amd'])
{
  define([], function() { return Elm; });
  return;
}

if (typeof module === "object")
{
  module['exports'] = Elm;
  return;
}

var globalElm = this['Elm'];
if (typeof globalElm === "undefined")
{
  this['Elm'] = Elm;
  return;
}

for (var publicModule in Elm)
{
  if (publicModule in globalElm)
  {
    throw new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');
  }
  globalElm[publicModule] = Elm[publicModule];
}

}).call(this);



/***/ })
/******/ ]);